@page "/"

@*@inject IRepository repository*@
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (Products is null)
{
    <div class="spinner" />
}
else
{
    @*  <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        <div class="container-md">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar producto..." @bind-value="Filter" />
        </div>
        <div class="mx-1">
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
            <button type="button" class="btn btn-primary">
                <i class="oi oi-cart" />
            </button>
        </div>
         <AuthorizeView>
    <Authorized>
    @if (counter > 0)
    {
    <a href="/Orders/ShowCart" class="btn btn-primary">Ver Carro de Compras (@counter)</a>
    }
    </Authorized>
    </AuthorizeView>

    </div>*@

    <div class="container">

        <div class="item">
            <h5>
                Categories:
            </h5>
            <ul>
                <li> Buy & Sell </li>
                <li> ×Tools (5,219) </li>
                <li> Power Tools (2,720) </li>
                <li> Hand Tools (1,208) </li>
                <li> Other (948) </li>
                <li> Tool Storage & Benches (236 </li>
                <li> Ladders & Scaffolding (107) </li>
            </ul>
            <h5>
                Location:
            </h5>
            <ul>
                <li> Manitoba (4,544) </li>
                <li> Brandon Area (147) </li>
                <li> Flin Flon (2) </li>
                <li> Thompson (2) </li>
                <li> Winnipeg (4,393) </li>
            </ul>

            <h5>
                Filter byOffer Type:

            </h5>
            <ul>
                <li> All Types </li>
                <li> Offering (4,515) </li>
                <li> Wanted (29) </li>
            </ul>

            <h5>
                Price
            </h5>
            <div class="row">
                <div class="col">
                    from
                    <input type="number" class="form-control">
                </div>
                <div class="col-2 text-center m-0 p-0">
                    <br>
                    -
                </div>
                <div class="col">
                    to
                    <input type="number" class="form-control">
                </div>
            </div>
            <div class="row mt-2">
                <div class="col d-grid gap-2">
                    <button class="btn btn-success">Update</button>
                </div>
            </div>

        </div>
        <div class="item2">

            <div class="cont">

                @foreach (var product in Products!)
                {
                    <div class="card">
                        <div class="card-img-top">
                            <img src="@product.MainImage" id="card-img" class="text-center" alt="@product.Name" />
                        </div>

                        <div class="card-body">
                            <h5 class="card-title text-navy"> @product.Name</h5>
                            <p class="card-text smfnt">@product.Description</p>
                            <h5 class="text-muted">@($"{product.Price:C2}")</h5>
                        </div>
                        <div class="card-footer">
                            <a href="/productDetail/@product.Id" class="btn btn-sm btn-secondary"><i class="oi oi-info me-1" />Details</a>
                            <button class="btn btn-sm btn-primary" @onclick=@(() => AddToCartAsync(product.Id))><i class="oi oi-plus" /> Add to Cart</button>
                        </div>
                    </div>
                }
            </div>
            <Pagination CurrentPage="currentPage"
                        TotalPages="totalPages"
                        SelectedPage="SelectedPageAsync" />

        </div>
    </div>

}

@code {

    public class Product
    {
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string MainImage { get; set; }
        public decimal Price { get; set; }
        public int Id { get; set; }
    }

    private int currentPage = 1;
    private int totalPages = 3;
    private int counter = 0;
    private bool isAuthenticated;
    Product p = new Product()
        {
            Name = "Empanada",
            Id = 1,
            Description = "Description1",
            MainImage = "Images/ghibli.jpg",
            Price = 234000
        };
    Product p2 = new Product()
        {
            Name = "Agua",
            Id = 1,
            Description = "Description2",
            MainImage = "Images/portada.jpeg",
            Price = 2234000
        };
    Product p3 = new Product()
        {
            Name = "Jugo",
            Id = 1,
            Description = "Description3",
            MainImage = "Images/tattoo.jpg",
            Price = 234000
        };
    public List<Product>? Products = new List<Product>();

    [CascadingParameter]
    //private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    //[Parameter]
    //[SupplyParameterFromQuery]
    //public string Page { get; set; } = "";

    //[Parameter]
    //[SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnParametersSetAsync()
    {
        // await CheckIsAuthenticatedAsync();
        // await LoadCounterAsync();
    }

    //private async Task CheckIsAuthenticatedAsync()
    //{
    //    var authenticationState = await authenticationStateTask;
    //    isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    //}

    //private async Task LoadCounterAsync()
    //{
    //    if (!isAuthenticated)
    //    {
    //        return;
    //    }

    //    var responseHttp = await repository.Get<int>("/api/temporalSales/count");
    //    if (responseHttp.Error)
    //    {
    //        return;
    //    }
    //    counter = responseHttp.Response;
    //}


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        Products.Add(p);
        Products.Add(p2);
        Products.Add(p3);
        Products.Add(p);
        Products.Add(p2);
        Products.Add(p3);
        Products.Add(p);
        Products.Add(p2);
        Products.Add(p3);
        Products.Add(p);
        Products.Add(p2);
        Products.Add(p3);
        //if (!string.IsNullOrWhiteSpace(Page))
        //{
        //    page = Convert.ToInt32(Page);
        //}

        //string url1 = string.Empty;
        //string url2 = string.Empty;

        //if (string.IsNullOrEmpty(Filter))
        //{
        //    url1 = $"api/products?page={page}&RecordsNumber=8";
        //    url2 = $"api/products/totalPages/?RecordsNumber=8";
        //}
        //else
        //{
        //    url1 = $"api/products?page={page}&filter={Filter}&RecordsNumber=8";
        //    url2 = $"api/products/totalPages?filter={Filter}&RecordsNumber=8";
        //}

        //try
        //{
        //    var responseHppt = await repository.Get<List<Product>>(url1);
        //    var responseHppt2 = await repository.Get<int>(url2);
        //    Products = responseHppt.Response!;
        //    totalPages = responseHppt2.Response!;
        //}
        //catch (Exception ex)
        //{
        //    await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        //}
    }

    private async Task CleanFilterAsync()
    {
        await sweetAlertService.FireAsync("Error", "test", SweetAlertIcon.Error);
        //    Filter = string.Empty;
        //    await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task AddToCartAsync(int productId)
    {
        //if (!isAuthenticated)
        //{
        //    navigationManager.NavigateTo("/Login");
        //    var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
        //        {
        //            Toast = true,
        //            Position = SweetAlertPosition.TopEnd,
        //            ShowConfirmButton = false,
        //            Timer = 5000
        //        });
        //    await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debes haber iniciado sesión para poder agregar productos al carro de compras.");
        //    return;
        //}

        //var temporalSaleDTO = new TemporalSaleDTO
        //    {
        //        ProductId = productId
        //    };

        //var httpResponse = await repository.Post("/api/temporalSales", temporalSaleDTO);
        //if (httpResponse.Error)
        //{
        //    var message = await httpResponse.GetErrorMessageAsync();
        //    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //    return;
        //}

        //await LoadCounterAsync();

        var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Producto agregado al carro de compras.");
    }


}
