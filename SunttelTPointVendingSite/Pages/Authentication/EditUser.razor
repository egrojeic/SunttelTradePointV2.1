@page "/EditUser"
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@*@inject ILoginService loginService*@
@inject IRepository Repository

@using System.ComponentModel.DataAnnotations


@if (loading)
{
    <Loading></Loading>
}
else
{
    <EditForm Model="user">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-person" /> Edit User
                    <a class="btn btn-sm btn-secondary float-end" href="/changePassword"><i class="oi oi-key" /> Change Password</a>
                    <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Save</button>
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Name:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.FirstName" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Last Name:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.LastName" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>ID:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.Document" />
                                <ValidationMessage For="@(() => user.Document)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Phone:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.PhoneNumber" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Address:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.Address" />
                                <ValidationMessage For="@(() => user.Address)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Country:</label>
                            <select class="form-select" @onchange="CountryChangedAsync">
                                <option value="0">-- Select a Country --</option>
                                @if (countries.Any())
                                {
                                    @foreach (var country in countries)
                                    {
                                        <option value="@country.Id">@country.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>State:</label>
                            <select class="form-select" @onchange="StateHasChangedAsync">
                                <option value="0">-- Select a State --</option>
                                @if (states.Any())
                                {
                                    @foreach (var state in states)
                                    {
                                        <option value="@state.Id">@state.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>City:</label>
                            <select class="form-select" @onchange="CitiesHasChangedAsync">
                                <option value="0">-- Select a City --</option>
                                @if (states.Any())
                                {
                                    @foreach (var city in cities)
                                    {
                                        <option value="@city.Id">@city.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <InputImg Label="Picture" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private User user = new User();
    private string? imageUrl;
    private bool loading = false;

    List<Country> countries = new List<Country>();
    List<GeoRegion> states = new List<GeoRegion>();
    List<City> cities = new List<City>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsyc();

        GetCountries();

        if (!string.IsNullOrEmpty(user!.Photo))
        {
            imageUrl = user.Photo;
            user.Photo = null;
        }

    }

    private async Task LoadUserAsyc()
    {
        // loading = true;

        //var responseHTTP = await repository.Get<User>($"/api/accounts");

        // loading = false;
        //if (responseHTTP.Error)
        //{
        //    if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
        //    {
        //        navigationManager.NavigateTo("/");
        //        return;
        //    }
        //    var messageError = await responseHTTP.GetErrorMessageAsync();
        //    await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
        //    return;
        //}
        //user = responseHTTP.Response;
    }

    private void ImageSelected(string imagenBase64)
    {
        user!.Photo = imagenBase64;
        imageUrl = null;
    }

    public class User
    {
        public string Document { get; set; } = null!;

        public string FirstName { get; set; } = null!;

        public string LastName { get; set; } = null!;

        public string Address { get; set; } = null!;

        public string? Photo { get; set; }

        public City? City { get; set; }

        public int CityId { get; set; }

        public string FullName => $"{FirstName} {LastName}";

        public string? PhoneNumber { get; set; }
    }

    private async Task GetCountries()
    {
        var responseHttp = await Repository.Get<List<Country>>($"api/GeographicPlaces/GetCountries");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            if (responseHttp.Response is not null && responseHttp.Response.Any())
            {
                countries = responseHttp.Response;
            }
        }

        StateHasChanged();
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = e.Value!.ToString();
        await LoadStatesAsync(selectedCountry!);
    }

    private async Task LoadStatesAsync(string countryId)
    {
        var responseHttp = await Repository.Get<List<GeoRegion>>($"api/GeographicPlaces/GetRegions?countryId={countryId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            if (responseHttp.Response is not null && responseHttp.Response.Any())
            {
                states = responseHttp.Response;
            }
        }

        StateHasChanged();
    }

    private async Task StateHasChangedAsync(ChangeEventArgs e)
    {
        var selectedState = e.Value!.ToString();
        await LoadCitiesAsync(selectedState!);
    }

    private async Task LoadCitiesAsync(string stateId)
    {
        var responseHttp = await Repository.Get<List<City>>($"api/GeographicPlaces/GetCities?regionId={stateId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            if (responseHttp.Response is not null && responseHttp.Response.Any())
            {
                cities = responseHttp.Response;
            }
        }

        StateHasChanged();
    }

    private void CitiesHasChangedAsync(ChangeEventArgs e)
    {
        var selectedCity = e.Value!.ToString();
        user.City = cities.Find(x => x.Id == selectedCity);
    }
}
