@page "/Payments"
@page "/Payments/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.PaymentServices.PaymentServices PaymentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation


<PageTitleComponent Title="Payments" IconName="Payments.png"
                    Description="With this tool you can create and edit payments ">
</PageTitleComponent>

<div class="panelMenuContainer">
    <PaymentsMenu ></PaymentsMenu>   
    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>   
</div>
<div class="panelMenuContainer">  
    <PaymentMenu2 SetDocumentTypeId="SetDocumentTypeId"></PaymentMenu2>
    <RangeDatesInput StartDate="@startingDate" disableBtn="true" ></RangeDatesInput>
</div>


<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Payments"></WaitingProcessIndicator>

    }
    else
    {

        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="paymentList"
                    TItem="Payment"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"                   
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn TItem="Payment" Property="DocumentType.Name" Title="@GetName("DocumentType",new Payment())"  Width="308px" />
                <RadzenDataGridColumn TItem="Payment" Property="Code" Title="@GetName("Code",new Payment())"  Width="208px" />
                <RadzenDataGridColumn TItem="Payment" Property="PaymentRef" Title="@GetName("PaymentRef",new Payment())" Filterable="false" Sortable="false" Width="208px" />
                <RadzenDataGridColumn TItem="Payment" Property="PaymentDate" Title="@GetName("PaymentDate",new Payment())" Filterable="false" Sortable="false" Width="208px" />
                <RadzenDataGridColumn TItem="Payment" Property="Payer.Name" Title="@GetName("Payer",new Payment())" Filterable="false" Sortable="false" Width="208px" />
                <RadzenDataGridColumn TItem="Payment" Property="Receiver.Name" Title="@GetName("Receiver",new Payment())" Filterable="false" Sortable="false" Width="208px" />              
                <RadzenDataGridColumn TItem="Payment" Property="Status.Name" Title="@GetName("Status",new Payment())" Width="208px" />
                <RadzenDataGridColumn TItem="Payment" Property="Receiver.Name" Title="@GetName("Receiver",new Payment())" Filterable="false" Sortable="false" Width="208px" />
                <RadzenDataGridColumn TItem="Payment" Property="PaymentValue" Title="@GetName("PaymentValue",new Payment())" Filterable="false" Sortable="false" Width="208px" />
                <RadzenDataGridColumn TItem="Payment" Property="ReturnedPayment" Title="@GetName("ReturnedPayment",new Payment())" Filterable="false" Sortable="false" Width="208px" />
            
            </Columns>
        </RadzenDataGrid>
    }
</div>



@code {
    [Parameter]
    public string _filterItems { get; set; }
    public List<Payment> paymentList { get; set; }
    public CommercialDocumentType documentType { get; set; }

    bool isLoading = false;

    DateTime startingDate = DateTime.Now;

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        if (_filterItems != null) LoadData();
        base.OnInitialized();

    }

    public async void LoadData()
    {
        isLoading = true;
        if (documentType != null)
        {
            await PaymentServices.GetPaymentList((filter != null ? filter : "all"), startingDate.ToString(), documentType.Id, 1, 10);
        }
        isLoading = false;
        StateHasChanged();
    }

    public async void SetDocumentTypeId(CommercialDocumentType item)
    {

        if (item != null)
        {
            documentType = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<Payment> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
      
        </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        Payment argObj = (Payment)args.Value;
        Navigation.NavigateTo($"PaymentsItem/{argObj.Id}/{_filterItems}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void Setfilter( string value)
    {
        filter = value;
         StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
   


}
