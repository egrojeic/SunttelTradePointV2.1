@page "/SalesPayments/{page}"
@page "/SalesPayments/{page}/{_filterItems}"
@page "/PurchasesPayments/{page}"
@page "/PurchasesPayments/{page}/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.PaymentServices.PaymentServices PaymentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

@inject IJSRuntime Js

<PageTitleComponent Title="@(namePage+(pageView=="table"?"":" Dynamic View"))" IconName="Payments.png"
                    Description="@($"With this tool you can create and edit {namePage}")">
</PageTitleComponent>

    <div class="panelMenuContainer">
    <PaymentsMenu PageHome="@Page" pageView="@pageView" page="@backPage"></PaymentsMenu>
        <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>
    </div>
    <div class="panelMenuContainer">
    <PaymentMenu2 isASales="@isASale" SetTypeId="SetPaymentType"></PaymentMenu2>
        <RangeDatesInput @bind-StartDate="@startingDate"
                     StartDateName="From"
                     @bind-EndDate="endDate"
                     EndDateName="To"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
    </div>


@if (pageView == "table")
{

<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="@(namePage)"></WaitingProcessIndicator>

    }
    else
    {

        @if (paymentList!=null && paymentList.Count>0)
        {

        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="paymentList"
                    TItem="Payment"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn TItem="Payment" Property="DocumentType.Name" Title="@GetName("DocumentType",new Payment())" Width="208px" />
                <RadzenDataGridColumn TItem="Payment" Property="Code" Title="@GetName("Code",new Payment())" Width="88px" />
                <RadzenDataGridColumn TItem="Payment" Property="@nameof(Payment.PaymentRef)" Title="@GetName("PaymentRef",new Payment())" Filterable="false" Sortable="false" Width="88px" />
                        <RadzenDataGridColumn TItem="Payment" Property="@nameof(Payment.PaymentDate)" Title="@GetName("PaymentDate",new Payment())" Filterable="false" FormatString="{0:yyyy-MM-dd}" Sortable="false" Width="88px" />
                        <RadzenDataGridColumn TItem="Payment" Property="Payer.Name" Title="@GetName("Payer",new Payment())" Filterable="false" Sortable="false" Width="108px" />
                <RadzenDataGridColumn TItem="Payment" Property="Status.Name" Title="@GetName("Status",new Payment())" Width="88px" />
                <RadzenDataGridColumn TItem="Payment" Property="Receiver.Name" Title="@GetName("Receiver",new Payment())" Filterable="false" Sortable="false" Width="108px" />
                <RadzenDataGridColumn TItem="Payment" Property="PaymentValue" Title="@GetName("PaymentValue",new Payment())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Sortable="false" Width="108px" />
                <RadzenDataGridColumn TItem="Payment" Property="@nameof(Payment.ReturnedPayment)" Title="@GetName("ReturnedPayment",new Payment())" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Width="208px">
                            <Template Context="data">
                                <RadzenCheckBox @bind-Value="@data.ReturnedPayment" />
                            </Template>
                </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Payment" Property="DocumentType.IsASale" Title="@GetName("IsASale",new Payment())" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Width="208px">
                            <Template Context="data">
                             <RadzenCheckBox @bind-Value="@data.DocumentType.IsASale" />
                            </Template>
                        </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <div class="container-total">
            <div class="item">
                <label>
                    @($"Records: {paymentList.Count}")
                </label>
            </div>
            <div class="item"><label>@SumTotal()</label> </div>
        </div>
        }
    }
</div>
}

@if (pageView == "view")
{
    <PaymentsView paymentList="paymentList"></PaymentsView>
}

@code {
    [Parameter]
    public string _filterItems { get; set; }
    [Parameter]
    public string page { get; set; }
    public string pageView { get; set; } = "table";
    public List<Payment> paymentList { get; set; }
    public PaymentType paymentType { get; set; }

    string namePage = "";
    string backPage = "";
    string icoLogo = "";

    bool isASale = false;
    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        if (_filterItems != null) LoadData();
        ValidateUri();
        base.OnInitialized();

    }

    protected override void OnParametersSet()
    {
        ValidateUri();
        pageView = "table";
        StateHasChanged();
    }

    public async void LoadData()
    {
        isLoading = true;
        if (paymentType != null)
        {            
            paymentList = await PaymentServices.GetPaymentList((filter != null ? filter : "all"), (paymentType != null ? paymentType?.Id : ""), startingDate, endDate, 1, 10);
        }
        isLoading = false;
        StateHasChanged();
    }

    public async void SetPaymentType(PaymentType item)
    {

        if (item != null)
        {
            paymentType = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<Payment> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>

        </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        Payment argObj = (Payment)args.Value;
        Navigation.NavigateTo($"{backPage}/{argObj.Id}/{_filterItems}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void Setfilter(string value)
    {
        filter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void EventSearchAll(string value)
    {
        filter = "all";
        LoadData();
    }
    public void Page(string name){
        pageView = name;
        StateHasChanged();
    }

    public string SumTotal()
    {

        double value = 0;
        string result = "";
        if (paymentList != null)
        {
            string paymentValue = paymentList.Sum(s => s.PaymentValue).ToString("N2");                 
            result = $"{GetName("PaymentValue", new Payment())}: {paymentValue}";
          
        }

        return result; //value.ToString("N2", format);
    }

    public void ValidateUri()
    {
        string Name = Navigation.Uri;
        if (Name.Contains("SalesPayments"))
        {
            isASale = true;
            namePage = "Sales Payments";
            backPage = $"SalesPaymentsItem/{page}";
            icoLogo = "Payments.png";
        }
        else
        if (Name.Contains("PurchasesPayments"))
        {
            isASale = false;
            if (Name.Contains("PurchasesPayments"))
            {
                backPage = $"PurchasesPaymentsItem/{page}";
                namePage = " Purchases Payments";
                icoLogo = "Payments.png";
            }
        }
        StateHasChanged();
    }

}
