@page "/PaymentViaGeneral"
@page "/PaymentViaGeneral/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.PaymentServices.PaymentServices PaymentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>


<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>



<PageTitleComponent Title="Payment Vias" IconName="paymentVias.png"
                    Description="With this tool you can create and edit payment vias ">
</PageTitleComponent>

<div class="panelMenuContainer">
    <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
    <PaymentsViasMenu></PaymentsViasMenu>
    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>
</div>



<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Payments"></WaitingProcessIndicator>

    }
    else
    {
        @if (paymentViatList != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="paymentViatList"
                    TItem="PaymentVia"
                    ColumnWidth="100%"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
                <Columns>

                    <RadzenDataGridColumn TItem="PaymentVia" Property="Name" Title="@GetName("Name",new BasicConcept())" Width="308px" />
                    <RadzenDataGridColumn TItem="PaymentVia" Title="@GetName("Action",new BasicConcept())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                        <Template Context="data">

                            <Confirm Id="@data.Id" TextValue="@($"¿ Confirm delete ?")"
                             IdSelect="@IdDelete"
                             ConfirmIdAction='ConfirmDelete'
                             CancelAction="CancelDelete"
                             SelectIdAction="SelectDelete"></Confirm>

                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {paymentViatList.Count}"
                            )
                    </label>
                </div>
            </div>

        }
    }
</div>



@code {
    [Parameter]
    public string _filterItems { get; set; }
    public List<PaymentVia> paymentViatList { get; set; }

    string IdDelete = "";
    string msg = "";
    bool viewMsg = false;
    bool isLoading = false;

    DateTime startingDate = DateTime.Now;

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        _filterItems = "all";
        LoadData();
        base.OnInitialized();

    }

    public async void LoadData()
    {
        isLoading = true;
        paymentViatList = await PaymentServices.GetPaymentViasList(0, 1, (filter != null ? filter : "all"));
        isLoading = false;
        StateHasChanged();
    }




    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<PaymentVia> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>

    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        PaymentVia argObj = (PaymentVia)args.Value;
        Navigation.NavigateTo($"PaymentVia/{argObj.Id}/{_filterItems}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void Setfilter(string value)
    {
        filter = value;
        StateHasChanged();
    }

    #region Confirm
    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await PaymentServices.DeletePaymentViaById(Id);
        if (result) { LoadData(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }
    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void Add()
    {

    }

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }

    private void Home()
    {
        Navigation.NavigateTo("/SalesPayments/1");
    }

    public void EventIdSelectionMenuItem(string name)
    {
        Navigation.NavigateTo(name);
        //  Js.InvokeAsync<object>("open", name, "_blank");

    }

}
