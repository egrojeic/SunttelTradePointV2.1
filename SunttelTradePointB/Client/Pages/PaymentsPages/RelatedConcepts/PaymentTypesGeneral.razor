@page "/PaymentTypeGeneral"
@page "/PaymentTypeGeneral/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.PaymentServices.PaymentServices PaymentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>


<PageTitleComponent Title="Payment Type" IconName="paymentTypes.png"
                    Description="With this tool you can create and edit payment type ">
</PageTitleComponent>

<div class="panelMenuContainer">
    <button @onclick="Home" class="general-menu-button btn-new"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
    <PaymentTypeMenu></PaymentTypeMenu>
    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>
</div>


<div class="tableContainer">

    @*  <div class="detailsTitleContainer" style="width:100%;">
    <h3 class="subTitleDetailForm">@GetName("ImportFileRecords",new Payment())</h3>
    <svg @onclick='()=>EventIdSelectionMenuItem("PaymentType")' style="margin-left:20px;" title="Add new Recipe Item" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style " viewBox="0 0 16 16">
    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
    </div> *@
    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Payments"></WaitingProcessIndicator>

    }
    else
    {
        @if (paymentTypettList!=null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="paymentTypettList"
                    TItem="PaymentType"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn TItem="PaymentType" Property="Name" Title="@GetName("Name",new BasicConcept())" Width="308px" />
                    <RadzenDataGridColumn TItem="PaymentType" Title="@GetName("Action",new BasicConcept())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                        <Template Context="data">

                            <Confirm Id="@data.Id" TextValue="@($"¿Are you sure to permanently delete Name: {@data.Name} ?")"
                             IdSelect="@IdDelete"
                             ConfirmIdAction='ConfirmDelete'
                             CancelAction="CancelDelete"
                             SelectIdAction="SelectDelete"></Confirm>

                        </Template>
                    </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {paymentTypettList.Count}"
                            )
                    </label>
                </div>
            </div>

        }
    }
</div>



@code {
    [Parameter]
    public string _filterItems { get; set; }
    public List<PaymentType> paymentTypettList { get; set; }

 
    string IdDelete = "";
    string msg = "";
    bool viewMsg = false;
    bool isLoading = false;

    DateTime startingDate = DateTime.Now;

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        _filterItems ="all";
       LoadData();
        base.OnInitialized();

    }

    public async void LoadData()
    {
        isLoading = true;
        paymentTypettList = await PaymentServices.GetPaymentTypeList(0, 1, (filter != null ? filter : "all"));
        isLoading = false;
        StateHasChanged();
    }




    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<PaymentType> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>

    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        PaymentType argObj = (PaymentType)args.Value;
        Navigation.NavigateTo($"PaymentType/{argObj.Id}/{_filterItems}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void Setfilter(string value)
    {
        filter = value;
        StateHasChanged();
    }


    #region Confirm
    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await PaymentServices.DeletePaymentTypeById(Id);
        if (result) { LoadData(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }
    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void Add()
    {

    }

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }

    private void Home()
    {
        Navigation.NavigateTo("SalesPayments/1");
    }

    public void EventIdSelectionMenuItem(string name)
    {
        Navigation.NavigateTo(name);
       // Js.InvokeAsync<object>("open", name, "_blank");

    }

}
