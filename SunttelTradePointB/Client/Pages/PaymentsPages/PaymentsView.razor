@using Syncfusion.Blazor.PivotView
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.PaymentServices.PaymentServices PaymentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation

<style>
    .e-pivotview .e-grouping-bar .e-pivot-button, .e-pivotview .e-group-rows .e-pivot-button {
        background-color: #0d223f;
    }

        .e-pivotview .e-grouping-bar .e-pivot-button, .e-pivotview .e-group-rows .e-pivot-button:hover {
            background-color: #0d223f;
            box-shadow: 0px 0px 5px gray;
            color: black;
        }

    .e-pivotview {
        min-height: 200px;
        width: 100%;
    }
</style>


@inject IJSRuntime Js


@if (isLoading)
{
    <WaitingProcessIndicator loadingTopic="Shipping"></WaitingProcessIndicator>
}
else
{
    @if (paymentViewList != null)
    {
        <SfPivotView TValue="PaymentView" Height="100%" Width="100%"
             @ref="@Pivot"
             Toolbar="@Olap"
             ShowGroupingBar="true"
             ShowFieldList=true
             ShowToolbar=true
             AllowConditionalFormatting=true
             AllowCalculatedField=true
             AllowPdfExport=true
             AllowExcelExport=true
             ShowTooltip=true>
            <PivotViewDisplayOption Primary="Primary.Table" View="View.Both"></PivotViewDisplayOption>
            <PivotViewDataSourceSettings DataSource="@paymentViewList">
                <PivotViewColumns>
                    <PivotViewColumn Name="@nameof(PaymentView.PayerName)" Caption="@GetName(nameof(Payment.Payer.Name),new Payment())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(PaymentView.DocumentTypeName)" Caption="@GetName(nameof(Payment.DocumentType.Name),new Payment())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(PaymentView.PaymentDate)" Caption="@GetName(nameof(Payment.PaymentDate),new Payment())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(PaymentView.ReturnedPayment)" Caption="@GetName(nameof(Payment.ReturnedPayment),new Payment())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(PaymentView.PaymentRef)" Caption="@GetName(nameof(Payment.PaymentRef),new Payment())"></PivotViewColumn>
                  
                </PivotViewColumns>
                <PivotViewRows>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="@nameof(PaymentView.PaymentValue)" Caption="@GetName(nameof(Payment.PaymentValue),new Payment())"></PivotViewValue>
                  
                </PivotViewValues>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="@nameof(PaymentView.PaymentValue)" Format="N2" UseGrouping=true></PivotViewFormatSetting>
                  
                </PivotViewFormatSettings>
            </PivotViewDataSourceSettings>
            <PivotViewEvents TValue="PaymentView" RenameReport="RenameReport" RemoveReport="RemoveReport" SaveReport="SaveReport" LoadReport="LoadReport" FetchReport="FetchReport"></PivotViewEvents>
        </SfPivotView>
        @if (paymentViewList != null)
        {
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Count item : {paymentViewList.Count}"
                            )
                    </label>
                </div>
            </div>
        }
    }

}


@code {
    [Parameter]
    public string _filterItems { get; set; }
    [Parameter]
    public List<Payment> paymentList { get; set; }
    [Parameter]
    public string page { get; set; }    
    public List<PaymentView> paymentViewList { get; set; }
    public CommercialDocumentType documentType { get; set; }

    string namePage = "";
    string backPage = "";
    string icoLogo = "";

    bool isASale = false;
    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    #region Pivot

    SfPivotView<PaymentView> Pivot;
    public List<ToolbarItems> Olap = new List<ToolbarItems> {
        ToolbarItems.New,
        ToolbarItems.Save,
        ToolbarItems.SaveAs,
        ToolbarItems.Rename,
        ToolbarItems.Remove,
        ToolbarItems.Load,
        ToolbarItems.Grid,
        ToolbarItems.Chart,
        ToolbarItems.MDX,
        ToolbarItems.Export,
        ToolbarItems.SubTotal,
        ToolbarItems.GrandTotal,
        ToolbarItems.ConditionalFormatting,
        ToolbarItems.FieldList,

                                                };
    public List<string> Report = new List<string>();
    public List<string> ReportName = new List<string>();

    #endregion End Pivot

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        LoadData();
        
        base.OnInitialized();

    }

    protected override void OnParametersSet()
    {
    
        StateHasChanged();
    }

    public async void LoadData()
    {
        isLoading = true;
        if (paymentList != null)
        {
            paymentViewList = new List<PaymentView>();
            foreach (var item in paymentList)
            {
                paymentViewList.Add(new  PaymentView
                        {
                           Id = item.Id,
                           PayerName = item.Payer !=null ? item.Payer.Name:"",
                           DocumentTypeName = item.DocumentType !=null ? item.DocumentType.Name:"",
                           PaymentDate  = item.PaymentDate ,
                           PaymentRef = item.PaymentRef,
                           PaymentValue = item.PaymentValue,
                           ReturnedPayment = item.ReturnedPayment,
                           Code = item.Code    
                        });
            }

        }


        isLoading = false;
        StateHasChanged();
    }

    public async void SetDocumentTypeId(CommercialDocumentType item)
    {

        if (item != null)
        {
            documentType = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<Payment> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>

    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        Payment argObj = (Payment)args.Value;
        Navigation.NavigateTo($"{backPage}/{argObj.Id}/{_filterItems}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void Setfilter(string value)
    {
        filter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void EventSearchAll(string value)
    {
        filter = value;
    }

    public string SumTotal()
    {

        double value = 0;
        string result = "";
        if (paymentList != null)
        {
            string paymentValue = paymentList.Sum(s => s.PaymentValue).ToString("N2");                 
            result = $"{GetName("PaymentValue", new Payment())}: {paymentValue}";
          
        }

        return result; //value.ToString("N2", format);
    }

    public void ValidateUri()
    {
        string Name = Navigation.Uri;
        if (Name.Contains("SalesPayments"))
        {
            isASale = true;
            namePage = "Sales Payments";
            backPage = $"SalesPaymentsItem/{page}";
            icoLogo = "Payments.png";
        }
        else
        if (Name.Contains("PurchasesPayments"))
        {
            isASale = false;
            if (Name.Contains("PurchasesPayments"))
            {
                backPage = $"PurchasesPaymentsItem/{page}";
                namePage = " Purchases Payments";
                icoLogo = "Payments.png";
            }
        }
        StateHasChanged();
    }

    #region EventPivot

    public void SaveReport(SaveReportArgs args)
    {
        int i = 0;
        bool IsSaved = false;
        for (i = 0; i < this.ReportName.Count; i++)
        {
            if (this.ReportName[i] == args.ReportName)
            {
                this.Report[i] = args.Report;
                IsSaved = true;
            }
        }
        if (args.Report != null && !(IsSaved))
        {
            this.Report.Add(args.Report);
            this.ReportName.Add(args.ReportName);
        }

    }
    public void FetchReport(FetchReportArgs args)
    {
        args.ReportName = ReportName.ToArray();
    }
    public async Task LoadReport(LoadReportArgs args)
    {
        int i = 0;
        int j = 0;


        for (i = 0; i < ReportName.Count; i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                j = i;
            }
        }
        if (Pivot != null) await this.Pivot.LoadPersistDataAsync(Report[j]);

    }
    public async Task RemoveReport(RemoveReportArgs args)
    {
        int i = 0;
        for (i = 0; i < ReportName.Count; i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                ReportName.RemoveAt(i);
                Report.RemoveAt(i);
                break;
            }
        }
        if (Report.Count > 0)
        {
            await this.Pivot.LoadPersistDataAsync(Report[0]);
        }
    }
    public void RenameReport(RenameReportArgs args)
    {
        if (args.IsReportExists)
        {
            int j = 0;
            for (j = 0; j < ReportName.Count; j++)
            {
                if (ReportName[j] == args.Rename)
                {
                    ReportName.RemoveAt(j);
                    Report.RemoveAt(j);
                    break;
                }
            }
        }
        int i = 0;
        for (i = 0; i <= (ReportName.Count - 1); i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                ReportName[i] = args.Rename;

            }
        }
    }


    public class PaymentView
    {
        public string DocumentTypeName { get; set; }
        public string Code { get; set; }
        public string Id { get; set; }
        public string PaymentRef { get; set; }
        public DateTime PaymentDate { get; set; }
        public string PayerName { get; set; }
        public double PaymentValue { get; set; }
        public bool ReturnedPayment { get; set; }
       
       
    }

    #endregion EndEventPivot

}
