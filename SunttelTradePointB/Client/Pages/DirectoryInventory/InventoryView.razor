@using Syncfusion.Blazor.PivotView
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.InvetoryModels;
@using System.Globalization;
@inject SunttelTradePointB.Client.Services.InventoryServices.Inventory _Inventory
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject WarehouseService warehouseService

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:hover {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>



@if (isLoading)
{
    <WaitingProcessIndicator loadingTopic="Inventory"></WaitingProcessIndicator>
}
else
{
    @if (InventoryDetaiViewList != null)
    {
        <SfPivotView TValue="InventoryDetailView" Height="100%" Width="100%"
             @ref="@Pivot"
             Toolbar="@Olap"
             ShowGroupingBar="true"
             ShowFieldList=true
             ShowToolbar=true
             AllowConditionalFormatting=true
             AllowCalculatedField=true
             AllowPdfExport=true
             AllowExcelExport=true
             ShowTooltip=true>
            <PivotViewDisplayOption Primary="Primary.Table" View="View.Both"></PivotViewDisplayOption>
            <PivotViewDataSourceSettings DataSource="@InventoryDetaiViewList">
                <PivotViewColumns>
                    <PivotViewColumn Name="@nameof(InventoryDetailView.InventoryBusinessLineName)" Caption="@GetName(nameof(InventoryDetail.InventoryBusinessLine),new InventoryDetail())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(InventoryDetailView.CurrentWarehouseName)" Caption="@GetName(nameof(InventoryDetail.CurrentWarehouse),new InventoryDetail())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(InventoryDetailView.CustomerReservedForName)" Caption="@GetName(nameof(InventoryDetail.CustomerReservedFor),new InventoryDetail())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(InventoryDetailView.InventoryItemName)" Caption="@GetName(nameof(InventoryDetail.InventoryItem),new InventoryDetail())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(InventoryDetailView.ItemBoxName)" Caption="@GetName(nameof(InventoryDetail.ItemBox),new InventoryDetail())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(InventoryDetailView.BoxCode)" Caption="@GetName(nameof(InventoryDetail.BoxCode),new InventoryDetail())"></PivotViewColumn>
                    <PivotViewColumn Name="@nameof(InventoryDetailView.EntryDate)" Caption="@GetName(nameof(InventoryDetail.EntryDate),new InventoryDetail())"></PivotViewColumn>                   
                </PivotViewColumns>
                <PivotViewRows>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="@nameof(InventoryDetailView.Qty)" Caption="@GetName(nameof(InventoryDetail.Qty),new InventoryDetail())"></PivotViewValue>
                    <PivotViewValue Name="@nameof(InventoryDetailView.QtyOnProductionOrder)" Caption="@GetName(nameof(InventoryDetail.QtyOnProductionOrder),new InventoryDetail())"></PivotViewValue>
                    <PivotViewValue Name="@nameof(InventoryDetailView.QtyOnPurchaseOrder)" Caption="@GetName(nameof(InventoryDetail.QtyOnPurchaseOrder ),new InventoryDetail())"></PivotViewValue>
                    <PivotViewValue Name="@nameof(InventoryDetailView.QtyOnOrder )" Caption="@GetName(nameof(InventoryDetail.QtyOnOrder),new InventoryDetail())"></PivotViewValue>
                    <PivotViewValue Name="@nameof(InventoryDetailView.QtyOnTransferOrder )" Caption="@GetName(nameof(InventoryDetail.QtyOnTransferOrder),new InventoryDetail())"></PivotViewValue>
                    <PivotViewValue Name="@nameof(InventoryDetailView.BasicUnitsQty)" Caption="@GetName(nameof(InventoryDetail.BasicUnitsQty),new InventoryDetail())"></PivotViewValue>
                    <PivotViewValue Name="@nameof(InventoryDetailView.EntryScannedQty)" Caption="@GetName(nameof(InventoryDetail.EntryScannedQty),new InventoryDetail())"></PivotViewValue>
                    <PivotViewValue Name="@nameof(InventoryDetailView.UnitCost)" Caption="@GetName(nameof(InventoryDetail.UnitCost),new InventoryDetail())"></PivotViewValue>

                </PivotViewValues>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="@nameof(InventoryDetailView.UnitCost)" Format="N2" UseGrouping=true></PivotViewFormatSetting>

                </PivotViewFormatSettings>
            </PivotViewDataSourceSettings>
            <PivotViewEvents TValue="InventoryDetailView" RenameReport="RenameReport" RemoveReport="RemoveReport" SaveReport="SaveReport" LoadReport="LoadReport" FetchReport="FetchReport"></PivotViewEvents>
        </SfPivotView>
        @if (InventoryDetaiViewList != null)
        {
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Count item : {InventoryDetaiViewList.Count}"
                            )
                    </label>
                </div>
            </div>
        }
    }

}





@code {
    [Parameter]
    public List<InventoryDetail>? InventoryDetaiList { get; set; }   
    List<InventoryDetailView>? InventoryDetaiViewList;

    public List<Concept> buyerList { get; set; }
    public Concept buyer { get; set; }
    public Warehouse warehouse { get; set; }

    bool isLoading = true;

    #region Pivot

    SfPivotView<InventoryDetailView> Pivot;
    public List<ToolbarItems> Olap = new List<ToolbarItems> {
        ToolbarItems.New,
        ToolbarItems.Save,
        ToolbarItems.SaveAs,
        ToolbarItems.Rename,
        ToolbarItems.Remove,
        ToolbarItems.Load,
        ToolbarItems.Grid,
        ToolbarItems.Chart,
        ToolbarItems.MDX,
        ToolbarItems.Export,
        ToolbarItems.SubTotal,
        ToolbarItems.GrandTotal,
        ToolbarItems.ConditionalFormatting,
        ToolbarItems.FieldList
                                                };
    public List<string> Report = new List<string>();
    public List<string> ReportName = new List<string>();

    #endregion End Pivot

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    protected async override void OnInitialized()
    {
        LoadData();
        base.OnInitialized();
    }

    public async void LoadData()
    {
        isLoading = true;

        if (InventoryDetaiList != null)
        {
            InventoryDetaiViewList = new List<InventoryDetailView>();
            foreach (var item in InventoryDetaiList.Take(500))
            {
                InventoryDetaiViewList.Add(new InventoryDetailView
                    {
                        Id = item.Id,
                        SquadId = item.SquadId,
                        EntryDate = item.EntryDate,
                        ItemBoxName = item.ItemBox!=null ? item.ItemBox.Name:"",
                        BoxCode = item.BoxCode,
                        BasicUnitsQty = item.BasicUnitsQty,
                        Qty = item.Qty,
                        QtyAvailable = item.QtyAvailable,
                        QtyOnHand = item.QtyOnHand,
                        QtyOnOrder = item.QtyOnOrder,
                        QtyOnProductionOrder = item.QtyOnProductionOrder,
                        QtyOnPurchaseOrder = item.QtyOnPurchaseOrder,
                        QtyOnSalesOrder = item.QtyOnSalesOrder,
                        QtyOnTransferOrder = item.QtyOnTransferOrder,
                        QtyReserved = item.QtyReserved,
                        EntryScannedQty = item.EntryScannedQty,
                        CurrentWarehouseName = item.CurrentWarehouse !=null ?  item.CurrentWarehouse.Name:"",
                        CustomerReservedForName = item.CustomerReservedFor !=null ? item.CustomerReservedFor.Name:"",
                        InventoryBusinessLineName = item.InventoryBusinessLine != null ? item.InventoryBusinessLine.Name : "",
                        InventoryItemName = item.InventoryItem !=null? item.InventoryItem.Name:"",
                        UnitCost = item.UnitCost,
                        Pack = item.Pack
                        
                    });
            }

        }

        isLoading = false;
        StateHasChanged();
    }


    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


    #region EventPivot

    public void SaveReport(SaveReportArgs args)
    {
        int i = 0;
        bool IsSaved = false;
        for (i = 0; i < this.ReportName.Count; i++)
        {
            if (this.ReportName[i] == args.ReportName)
            {
                this.Report[i] = args.Report;
                IsSaved = true;
            }
        }
        if (args.Report != null && !(IsSaved))
        {
            this.Report.Add(args.Report);
            this.ReportName.Add(args.ReportName);
        }

    }
    public void FetchReport(FetchReportArgs args)
    {
        args.ReportName = ReportName.ToArray();
    }
    public async Task LoadReport(LoadReportArgs args)
    {
        int i = 0;
        int j = 0;


        for (i = 0; i < ReportName.Count; i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                j = i;
            }
        }
        if (Pivot != null) await this.Pivot.LoadPersistDataAsync(Report[j]);

    }
    public async Task RemoveReport(RemoveReportArgs args)
    {
        int i = 0;
        for (i = 0; i < ReportName.Count; i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                ReportName.RemoveAt(i);
                Report.RemoveAt(i);
                break;
            }
        }
        if (Report.Count > 0)
        {
            await this.Pivot.LoadPersistDataAsync(Report[0]);
        }
    }
    public void RenameReport(RenameReportArgs args)
    {
        if (args.IsReportExists)
        {
            int j = 0;
            for (j = 0; j < ReportName.Count; j++)
            {
                if (ReportName[j] == args.Rename)
                {
                    ReportName.RemoveAt(j);
                    Report.RemoveAt(j);
                    break;
                }
            }
        }
        int i = 0;
        for (i = 0; i <= (ReportName.Count - 1); i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                ReportName[i] = args.Rename;

            }
        }
    }


    public class InventoryDetailView
    {
        public string Id { get; set; }
        public string SquadId { get; set; }
        public string CurrentWarehouseName { get; set; }
        public string InventoryItemName { get; set; }
        public double Qty { get; set; }
        public double QtyAvailable { get; set; }
        public double QtyReserved { get; set; }
        public double QtyOnHand { get; set; }
        public double QtyOnOrder { get; set; }
        public double QtyOnSalesOrder { get; set; }
        public double QtyOnPurchaseOrder { get; set; }
        public double QtyOnProductionOrder { get; set; }
        public double QtyOnTransferOrder { get; set; }
        public double EntryScannedQty { get; set; }
        public DateTime EntryDate { get; set; }
        public string ItemBoxName { get; set; }
        public double Pack { get; set; }
        public string BoxCode { get; set; }
        public string CustomerReservedForName { get; set; }
        public double UnitCost { get; set; }
        public double BasicUnitsQty { get; set; }
        public string InventoryBusinessLineName { get; set; }


    }

    #endregion EndEventPivot


   

}
