@page "/Inventory"
@page "/Inventory/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.InvetoryModels;
@inject SunttelTradePointB.Client.Services.InventoryServices.Inventory _Inventory
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject WarehouseService warehouseService


<PageTitleComponent Title="Inventory" IconName="inventory.png"
                    Description="With this tool you can create and edit inventory">
</PageTitleComponent>


<div class="panelMenuContainer">
    <InventoryMenu></InventoryMenu>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
    <RangeDatesInput StartDate="@startingDate" disableBtn="true"></RangeDatesInput>
</div>

<div class="panelMenuContainer">
    <InventoryMenu2 SetDocumentTypeId="SetDocumentTypeId"></InventoryMenu2>
</div>


 

<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

    }
    else
    {

        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="20"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@InventoryDetaiList"
                    TItem="InventoryDetail"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn TItem="InventoryDetail" Property="CurrentWarehouse.Name" Title="@GetName("CurrentWarehouse", new InventoryDetail())" Width="180px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="InventoryItem.Name" Title="@GetName("InventoryItem", new InventoryDetail())" Width="180px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="Qty" Title="@GetName("Qty", new InventoryDetail())" Width="100px" Filterable="false" Sortable="false" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyAvailable" Title="@GetName("QtyAvailable", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyReserved" Title="@GetName("QtyReserved", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyOnHand" Title="@GetName("QtyOnHand", new InventoryDetail())"  Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyOnOrder" Title="@GetName("QtyOnOrder", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyOnSalesOrder" Title="@GetName("QtyOnSalesOrder", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyOnPurchaseOrder" Title="@GetName("QtyOnPurchaseOrder", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyOnSalesOrder" Title="@GetName("QtyOnSalesOrder", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyOnTransferOrder" Title="@GetName("QtyOnTransferOrder", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="QtyOnProductionOrder" Title="@GetName("QtyOnProductionOrder", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="EntryScannedQty" Title="@GetName("EntryScannedQty", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="EntryDate" Title="@GetName("EntryDate", new InventoryDetail())" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="ItemBox.Name" Title="@GetName("ItemBox", new InventoryDetail())"  Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="Pack" Title="@GetName("Pack", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="BoxCode" Title="@GetName("BoxCode", new InventoryDetail())"  Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="CustomerReservedFor.Name" Title="@GetName("CustomerReservedFor", new InventoryDetail())" Filterable="false" Sortable="false" Width="180px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="UnitCost" Title="@GetName("UnitCost", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="BasicUnitsQty" Title="@GetName("BasicUnitsQty", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />
                <RadzenDataGridColumn TItem="InventoryDetail" Property="InventoryBusinessLine.Name" Title="@GetName("InventoryBusinessLine", new InventoryDetail())" Filterable="false" Sortable="false" Width="100px" />


            </Columns>
        </RadzenDataGrid>
    }
</div>



@code {
    [Parameter]
    public string _filterItems { get; set; }
    List<InventoryDetail>? InventoryDetaiList;
    public List<Concept> buyerList { get; set; }
    public Concept buyer { get; set; }
    public CommercialDocumentType commercialDocumentType { get; set; }

    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        if (_filterItems != null) LoadData();
        base.OnInitialized();
    }

    public async void LoadData()
    {
        isLoading = true;
        if (commercialDocumentType !=null && commercialDocumentType.Id != null)
        {
            InventoryDetaiList = await _Inventory.GetInventoryList(_filterItems, commercialDocumentType.Id, DateTime.Now.ToShortDateString(), 1, 10);
        }
        isLoading = false;      
        StateHasChanged();
    }

    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<InventoryDetail> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        InventoryDetail argObj = (InventoryDetail)args.Value;

        Navigation.NavigateTo($"SaleItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }


    public async void SetDocumentTypeId(CommercialDocumentType item)
    {

        if (item != null)
        {
            commercialDocumentType = item;
        }
        StateHasChanged();
    }



    public async void EventIdSelectionAndId(Concept item)
    {
      
        //if (SearcherValue == "Buyer")
        //{
        //    commercialDocument.Buyer = item;
        //    buyerWarehouseList = await DocumentServices.GetCommercialBuyerWarehouseList(item.Id);
        //    addressList = await DocumentServices.GetEntityDetailsAddressList(item.Id);

        //}
       
        StateHasChanged();
    }



    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


}
