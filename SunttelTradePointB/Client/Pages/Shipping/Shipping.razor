@page "/Shipping"
@page "/Shipping/{_filterItems}"



@using SunttelTradePointB.Shared.Sales;
@inject SunttelTradePointB.Client.Services.ShippingServices.ShippingServices ShippingServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation


<PageTitleComponent Title="Shipping" IconName="commercialActivities.png"
                    Description="With this tool you can create and edit Sales operations such as Orders and Invoices">
</PageTitleComponent>




<div class="panelMenuContainer">
    <ShippingMenu></ShippingMenu>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>

</div>
<div class="panelMenuContainer aling">
    <ShippingMenu2 SetWarehouse="Setwarehouse"></ShippingMenu2>
    <RangeDatesInput StartDate="@startingDate"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
</div>


<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Shipping"></WaitingProcessIndicator>

    }
    else
    {

        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@commercialdocumentList"
                    TItem="CommercialDocument"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value="@selectedcommercialdocuments"                    
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn TItem="CommercialDocument" Property="DocumentNumber" Title="@GetName("DocumentNumber", new CommercialDocument() )" Width="208px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="ShipDate" Title="Ship Date" FormatString="{0:d}" Filterable="false" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="DeliveryDate" Title="Delivery Date" Filterable="false" FormatString="{0:d}" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="Buyer.Name" Title="Customer" Width="200px"  />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="DocumentPrinted" Title="@GetName("DocumentPrinted", new CommercialDocument() )" Sortable="false" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="PrintingSatus.PickingTicketPrinted" Title="@GetName("PickingTicketPrinted", new SalesDocumentPrintingSatus() )" Sortable="false" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="PrintingSatus.LabelsPrinted" Title="@GetName("LabelsPrinted", new SalesDocumentPrintingSatus() )" Sortable="false" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="PrintingSatus.BillOfLandingPrinted" Title="@GetName("BillOfLandingPrinted", new SalesDocumentPrintingSatus() )" Sortable="false" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="ShippingStatusDocument.Name" Title="@GetName("ShippingStatusDocument", new CommercialDocument() )" Width="200px" Sortable="false" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="@nameof(CommercialDocument.FinanceStatusDocument)" Title="@GetName("FinanceStatusDocument", new CommercialDocument() )"  Sortable="false" Width="200px" />

            </Columns>
        </RadzenDataGrid>
    }
</div>



@code {

    [Parameter]
    public string _filterItems { get; set; }
    List<CommercialDocument>? commercialdocumentList { get; set; }

    public Warehouse warehouse { get; set; }
    IList<CommercialDocument>? selectedcommercialdocuments;

    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {


        if (_filterItems != null) LoadData();
        base.OnInitialized();

    }

    public async void LoadData()
    {
        isLoading = true;
        if (warehouse != null)
        {
            commercialdocumentList = await ShippingServices.GetShippingtList(startingDate, startingDate, warehouse.Id, (_filterItems != null ? _filterItems : "all"),1,20);

        }
        isLoading = false;
    
        StateHasChanged();
    }

    public void EventSearchAll(string value)
    {
        docsFilter = value;
    }

    public async void Setwarehouse(Warehouse item)
    {

        if (item != null)
        {
            warehouse = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<CommercialDocument> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="View" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        CommercialDocument argObj = (CommercialDocument)args.Value;
        Console.WriteLine($"Menu item with Value={argObj.Id} clicked");
        Navigation.NavigateTo($"ShippingItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void SetdocsFilter(string value)
    {
        docsFilter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


}
