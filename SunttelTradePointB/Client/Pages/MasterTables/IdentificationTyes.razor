@page "/IdentificationTyes"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems

@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive;
@inject ContextMenuService ContextMenuService

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }
</style>

<PageTitleComponent Title="Types of Identification for Entities" IconName="identificationType.png"
                    Description="Types of identification the different entities could have">
</PageTitleComponent>

<div class="panelMenuContainer">
    <IdentificationMenu></IdentificationMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>

<div >
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Identification type"></WaitingProcessIndicator>
    }else{
        @if(entityIdentificationTypeList != null)
        {
            <SfGrid DataSource="entityIdentificationTypeList"
            Height="auto"
            Width="100%"
            TValue="IdentificationType"
            AllowFiltering="true"
            AllowTextWrap="false"
            AllowPaging="true"
            AllowResizing="true"
            ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
                <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(IdentificationType.Code)" HeaderText="Code" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(IdentificationType.Name)" HeaderText="Name" Width="110"></GridColumn>
                </GridColumns>
                <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="IdentificationType"></GridEvents>
            </SfGrid>
        }
    }
</div>


@code {
    string filterText = "";
    List<IdentificationType>? entityIdentificationTypeList;
    IList<IdentificationType> selectedIdentificationType;


    bool isLoading = false;
    string _filterItems = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetFilteredIdentificationType(_filterItems);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFilteredIdentificationType("all");
    }

    public async Task GetFilteredIdentificationType(string filter = "")
    {
        if (filter.Length >= 0)
        {
            isLoading = true;
            StateHasChanged();

            var response = await actorsNodeServive.GetIdentificationTypes(filter);

            if (response != null)
                entityIdentificationTypeList = response;

            isLoading = false;
            StateHasChanged();
        }
    }


    public void OnContextMenuClick(ContextMenuClickEventArgs<IdentificationType> args)
    {
        IdentificationType _IdentificationType = new();
        _IdentificationType = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            navigationManager.NavigateTo($"/IdentificationTyes/{_IdentificationType.Id}/Edit");
        }
    }


}
