@page "/Boxes"
@page "/Boxes/{_filterItems}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http
@inject TransactionalItemsService transactItemsService;
@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<PageTitleComponent Title="Box Types" IconName="boxes.png"
                    Description="Box types to keep the different products">
</PageTitleComponent>

<div class="panelMenuContainer">
    <BoxTypesMenu></BoxTypesMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>
@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{
    @if (@boxes != null)
    {
        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@boxes"
                TItem="Box"
                ColumnWidth="100%"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="50">

            <Columns>
                <RadzenDataGridColumn TItem="Box" Property="Name" Title="@GetName("Name", new AtomConcept())" Width="200px"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="Code" Title="@GetName("Code", new AtomConcept())" Filterable="false" Width="80px" ></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="Cost" Title="@GetName("Cost", new Box())" TextAlign="Radzen.TextAlign.Right" FormatString="{0:N2}" Width="100px"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="ContainersNumber" Title="@GetName("ContainersNumber", new Box())" TextAlign="Radzen.TextAlign.Right" Filterable="false" Sortable="false" Width="80px"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="FlagWet" Title="@GetName("FlagWet", new Box())" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="80px">
                    <Template Context="data">
                        <RadzenCheckBox @bind-Value="@data.FlagWet" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="Length" Title="@GetName("Length", new Box())" TextAlign="Radzen.TextAlign.Right" Width="80px"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="Width" Title="@GetName("Width", new Box())" TextAlign="Radzen.TextAlign.Right" Width="80px"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="Height" Title="@GetName("Height", new Box())" Width="80px" TextAlign="Radzen.TextAlign.Right"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="Notes" Title="@GetName("Notes", new Box())" Width="80px"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Box" Property="Id" Title="@GetName("Id", new Box())" Width="50px"></RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <div class="container-total">
            <div class="item">
                <label>
                    @(
                        $"Records: {boxes.Count}"
                        )
                </label>
                <label>
                    @(
                        $"{GetName("Cost", new Box())}: {boxes.Sum(s=>s.Cost).ToString("N2")}"
                        )
                </label>
            </div>
        </div>

    }

}

@code {
    [Parameter]
    public string _filterItems { get; set; } = "";
    public List<Box> boxes { get; set; }

    List<GridColumn> ListGridBox = new List<GridColumn>();
    SfGrid<Box>? referDataGrid;

    bool isLoading = false;  

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected override void OnInitialized()
    {
        _filterItems = "all";
        LoadData();

        transactItemsService.Page = "Boxes";
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name) != null ? UICommonFunctions.GetDisplayName(Obj, Name) : Name;
        return Name;
    }

    private async Task LoadData()
    {
        isLoading = true;
        boxes = await transactItemsService.GetBoxTable(_filterItems);
        isLoading = false;
        StateHasChanged();
    }



    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<Box> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        Box argObj = (Box)args.Value;
        Navigation.NavigateTo($"/BoxeConcept/Boxes/{_filterItems}/{argObj.Id}");

    }

    #endregion Grid






}