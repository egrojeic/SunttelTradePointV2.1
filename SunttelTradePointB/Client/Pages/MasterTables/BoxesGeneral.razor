@page "/Boxes"
@page "/Boxes/{_filterItems}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http
@inject TransactionalItemsService transactItemsService;
@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject NavigationManager Navigation

<PageTitleComponent Title="Box Types" IconName="boxes.png"
                    Description="Box types to keep the different products">
</PageTitleComponent>

<div class="panelMenuContainer">
    <BoxTypesMenu></BoxTypesMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>
@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{
    @if (@boxes != null)
    {
        <SfGrid @ref="referDataGrid" DataSource="@boxes"
        AllowFiltering="true"
        AllowTextWrap="false"
        AllowPaging="true"
        AllowResizing="true"
        Width="100%"
        ContextMenuItems="@(contextMenuItemModel)">


            <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
            <GridColumns>
                <GridColumn Field="@nameof(Box.Name)" HeaderText="@GetName("Name", new AtomConcept())" Width="250px"></GridColumn>
                <GridColumn Field="@nameof(Box.Code)" HeaderText="@GetName("Code", new AtomConcept())" Width="90px"></GridColumn>
                <GridColumn Field="@nameof(Box.Cost)" HeaderText="@GetName("Cost", new Box())" Width="100px"></GridColumn>
                <GridColumn Field="@nameof(Box.ContainersNumber)" HeaderText="@GetName("ContainersNumber", new Box())" Width="80px"></GridColumn>
                <GridColumn Field="@nameof(Box.FlagWet)" HeaderText="@GetName("FlagWet", new Box())" Width="80px" DisplayAsCheckBox=true></GridColumn>
                <GridColumn Field="@nameof(Box.Length)" HeaderText="@GetName("Length", new Box())" Width="80px"></GridColumn>
                <GridColumn Field="@nameof(Box.Width)" HeaderText="@GetName("Width", new Box())" Width="80px"></GridColumn>
                <GridColumn Field="@nameof(Box.Height)" HeaderText="@GetName("Height", new Box())" Width="80px"></GridColumn>
                <GridColumn Field="@nameof(Box.Notes)" HeaderText="@GetName("Notes", new Box())" Width="100px"></GridColumn>
            </GridColumns>
            <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="Box"></GridEvents>

        </SfGrid>
    }

}

@code {
    [Parameter]
    public string _filterItems { get; set; } = "";
    public List<Box> boxes { get; set; }

    List<GridColumn> ListGridBox = new List<GridColumn>();
    SfGrid<Box>? referDataGrid;

    bool isLoading = false;

    List<ContextMenuItemModel> contextMenuItemModel = new List<ContextMenuItemModel>()
    {
        new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" }
    };


    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected override void OnInitialized()
    {
        if (_filterItems != "" && _filterItems != null)
        {
            LoadData();
        }
        transactItemsService.Page = "Boxes";
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name) != null ? UICommonFunctions.GetDisplayName(Obj, Name) : Name;
        return Name;
    }

    private async Task LoadData()
    {
        isLoading = true;
        boxes = await transactItemsService.GetBoxTable( _filterItems);
        isLoading = false;
        StateHasChanged();
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<Box> args)
    {
        Box itemBox = null;
        itemBox = args.RowInfo.RowData;
        transactItemsService.BoxSelectedItems = itemBox;
        if (args.Item.Text == "Edit")
        {
            Navigation.NavigateTo($"/BoxeConcept/Boxes/Edit/{_filterItems}");
        }
    }




}