@page "/TypesTransactionalItems"
@page "/TypesTransactionalItems/{_filterItems}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http
@inject TransactionalItemsService transactItemsService;
@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject NavigationManager Navigation


<PageTitleComponent Title="Types of Transactional Items" IconName="TransactionalTypes.png"
                    Description="Describe how the commercial items could be classified">
</PageTitleComponent>

<div class="panelMenuContainer">
    <MenuConcet></MenuConcet>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>




@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{

    <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@transactionalItemType"
                TItem="TransactionalItemType"
                ColumnWidth="300px"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="2">

        <Columns>
            <RadzenDataGridColumn TItem="TransactionalItemType" Property="Name" Title="@GetName("Name", new TransactionalItemType())" Width="80px" />
            <RadzenDataGridColumn TItem="TransactionalItemType" Property="Code" Title="@GetName("Code", new TransactionalItemType())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
            <RadzenDataGridColumn TItem="TransactionalItemType" Property="HasProductionSpecs" Title="@GetName("HasProductionSpecs", new TransactionalItemType())" Width="80px" TextAlign="Radzen.TextAlign.Center">
                <Template>
                    @{
                        var HasProductionSpecs = (bool)context.GetType().GetProperty(nameof(TransactionalItemType.HasProductionSpecs)).GetValue(context);
                        <input type="checkbox" checked="@HasProductionSpecs" disabled />                      
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TransactionalItemType" Property="HasPackingRecipe" Title="@GetName("HasPackingRecipe", new TransactionalItemType())" Width="80px" TextAlign="Radzen.TextAlign.Center">
                <Template>
                    @{
                        var HasPackingRecipe = (bool)context.GetType().GetProperty(nameof(TransactionalItemType.HasPackingRecipe)).GetValue(context);
                        <input type="checkbox" checked="@HasPackingRecipe" disabled />
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
  
}



@code {

    [Parameter]
    public string _filterItems { get; set; } = "";
    public List<TransactionalItemType> transactionalItemType { get; set; }  
   

    bool isLoading = false;  

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }



    protected override void OnInitialized()
    {

        if (_filterItems != "" && _filterItems != null)
        {
            LoadData();
        }
        transactItemsService.Page = "TypesTransactionalItems";
    }   


    private async Task LoadData()
    {
        isLoading = true;
        var data = await transactItemsService.GetTransactionalItemTypes(_filterItems);
        transactionalItemType = data; 
        isLoading = false;
        StateHasChanged();

    }

    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItemType> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItemType argObj = (TransactionalItemType)args.Value;   
        Navigation.NavigateTo($"/TypesTransactionalItemsConcept/TypesTransactionalItems/{_filterItems}/{argObj.Id}");
      
    }

    #endregion Grid


    public void Onload(object args)
    {
        isLoading = false;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


}
