@page "/EntityPalletType"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common

@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject ActorsNodeService actorsNodeServive
@inject NavigationManager navigationManager

<PageTitleComponent Title="Pallet Types" IconName="EntityRoles.png"
                    Description="Describes the different pallets types">
</PageTitleComponent>

<div class="panelMenuContainer">
    <PalletTypeMenu></PalletTypeMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>

<div class="tableBodyContainer">
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Pallet Types"></WaitingProcessIndicator>
    }else{
        @if(palletTypesList != null)
        {
            <SfGrid DataSource="palletTypesList"
            Height="auto"
            Width="auto"
            TValue="PalletType"
            AllowFiltering="true"
            AllowTextWrap="false"
            AllowPaging="true"
            AllowResizing="true"
            ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
                <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(PalletType.Code)" HeaderText="Code" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(PalletType.LegacyId)" HeaderText="LegacyId" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(PalletType.Name)" HeaderText="Name" Width="110"></GridColumn>
                </GridColumns>
                <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="PalletType"></GridEvents>
            </SfGrid>

            
        }
    }

</div>


@code {
    string filterText = "";
    List<PalletType> palletTypesList;
    IList<PalletType> selectedPalletTypes;


    bool isLoading = false;
    string _filterItems = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetFilterPalletTypes(_filterItems);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFilterPalletTypes();
    }

    private async Task GetFilterPalletTypes(string filter = "")
    {
        if (filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

            var response = await actorsNodeServive.GetPalletTypeList(filter);

            if (response != null)
                palletTypesList = response;

            isLoading = false;
            StateHasChanged();
        }
    }

    void ShowContextMenu(MouseEventArgs e)
    {
        if (JSRuntime != null)
        {
            JSRuntime.InvokeVoidAsync("ShowContextMenu", e.ClientX, e.ClientY);
        }
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<PalletType> args)
    {
        PalletType _PalletType = new();
        _PalletType = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            navigationManager.NavigateTo($"EntityPalletType/{_PalletType.Id}/Edit");
        }
    }



}
