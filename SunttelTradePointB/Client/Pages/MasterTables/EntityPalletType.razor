@page "/EntityPalletType"
@using SunttelTradePointB.Shared.Common

@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject ActorsNodeService actorsNodeServive
@inject NavigationManager navigationManager

<PageTitleComponent Title="Pallet Types" IconName="EntityRoles.png"
                    Description="Describes the different pallets types">
</PageTitleComponent>

<div class="panelMenuContainer">
    <PalletTypeMenu></PalletTypeMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>

<div class="tableBodyContainer">
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Pallet Types"></WaitingProcessIndicator>
    }else{
        @if(palletTypesList != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@palletTypesList"
                    TItem="PalletType"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value=@selectedPalletTypes Class="m-4"
                    CellContextMenu="@ShowContextMenuWithContent">

                <Columns>
                    <RadzenDataGridColumn TItem="PalletType" Property="Code" Title="Code" Frozen="true" Width="30px" />
                    <RadzenDataGridColumn TItem="PalletType" Property="LegacyId" Title="Legacy Id" Frozen="true" Width="30px" />
                    <RadzenDataGridColumn TItem="PalletType" Property="Name" Filterable="true" Title="Name" Frozen="true" Width="180px" TextAlign="TextAlign.Center" />
                </Columns>
            </RadzenDataGrid>
            
        }
    }

</div>


@code {
    string filterText = "";
    List<PalletType> palletTypesList;
    IList<PalletType> selectedPalletTypes;


    bool isLoading = false;
    string _filterItems = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetFilterPalletTypes(_filterItems);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFilterPalletTypes();
    }

    private async Task GetFilterPalletTypes(string filter = "")
    {
        if (filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

            var response = await actorsNodeServive.GetPalletTypeList();

            if (response != null)
                palletTypesList = response;

            isLoading = false;
            StateHasChanged();
        }
    }

    void ShowContextMenu(MouseEventArgs e)
    {
        if (JSRuntime != null)
        {
            JSRuntime.InvokeVoidAsync("ShowContextMenu", e.ClientX, e.ClientY);
        }
    }

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<PalletType> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>

    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        PalletType argObj = (PalletType)args.Value;

        if (args.Text == "Edit")
            navigationManager.NavigateTo($"EntityPalletType/{argObj.Id}/Edit");

        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }



}
