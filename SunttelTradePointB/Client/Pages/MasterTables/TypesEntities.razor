@page "/TypesEntities"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems

@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject ActorsNodeService actorsNodeServive
@inject NavigationManager navigationManager

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>

<PageTitleComponent Title="Types of Entities/Actors/Nodes" IconName="EntityGroups.png"
                    Description="Describe how the entities could be classified">
</PageTitleComponent>

<div class="panelMenuContainer">
    <TypeMenu></TypeMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>

<div>
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Entity Types"></WaitingProcessIndicator>
    }
    else
    {
        @if (entityTypesList != null)
        {

            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    ColumnWidth="100%"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument"
                    Data="entityTypesList"
                    TItem="EntityType">
                <Columns>
                    <RadzenDataGridColumn TItem="EntityType" Property="Code" Title="@GetName("Code",new EntityType())" Filterable="false" Width="150px" />
                    <RadzenDataGridColumn TItem="EntityType" Property="Name" Title="@GetName("LegacyId",new EntityType())" Filterable="false" Width="150px" />
                    <RadzenDataGridColumn TItem="EntityType" Title="@GetName("Action",new EntityGroup())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                        <Template Context="data">
                            <Confirm Id="@data.Id" TextValue="@($"¿ Confirm delete ?")"
                             IdSelect="@IdDelete"
                             ConfirmIdAction='ConfirmDelete'
                             CancelAction="CancelDelete"
                             SelectIdAction="SelectDelete"></Confirm>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {entityTypesList.Count}"
                            )
                    </label>
                </div>
            </div>

        }
    }
</div>


@code {
    List<EntityType> entityTypesList;
    IList<EntityType> selectedEntityType;

    bool viewMsg = false;
    string msg = "";
    string IdDelete = "";
    bool isLoading = false;
   
    string _filterItems = "";
    string filter = "all";
    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetEntityTypes();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetEntityTypes();
    }

    private async Task GetEntityTypes()
    {
        if (filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

            var response = await actorsNodeServive.GetEntityTypeList(filter);

            if (response != null)
                entityTypesList = response;

            isLoading = false;
            StateHasChanged();

        }
    }

    void ShowContextMenu(MouseEventArgs e)
    {
        if (JSRuntime != null)
        {
            JSRuntime.InvokeVoidAsync("ShowContextMenu", e.ClientX, e.ClientY);
        }
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<EntityType> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        EntityType argObj = (EntityType)args.Value;
        navigationManager.NavigateTo($"/EntityType/{argObj.Id}/Edit");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }


    #region Confirm

    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await actorsNodeServive.DeleteEntityTypeById(Id);
        if (result) { GetEntityTypes(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }

    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


}
