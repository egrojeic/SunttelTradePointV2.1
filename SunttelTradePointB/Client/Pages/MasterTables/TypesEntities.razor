@page "/TypesEntities"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems

@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject ActorsNodeService actorsNodeServive
@inject NavigationManager navigationManager

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<PageTitleComponent Title="Types of Entities/Actors/Nodes" IconName="EntityGroups.png"
                    Description="Describe how the entities could be classified">
</PageTitleComponent>

<div class="panelMenuContainer">
    <TypeMenu></TypeMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>

<div>
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Entity Types"></WaitingProcessIndicator>
    }else{
        @if(entityTypesList != null)
        {
            <SfGrid DataSource="entityTypesList"
            Height="auto"
            Width="100%"
            TValue="EntityType"
            AllowFiltering="true"
            AllowTextWrap="false"
            AllowPaging="true"
            AllowResizing="true"
            ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
                <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(EntityType.Code)" HeaderText="Code" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(EntityType.LegacyId)" HeaderText="LegacyId" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(EntityType.Name)" HeaderText="Name" Width="110"></GridColumn>
                </GridColumns>
                <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="EntityType"></GridEvents>
            </SfGrid>

        }
    }
</div>


@code {
    List<EntityType> entityTypesList;
    IList<EntityType> selectedEntityType;

    bool isLoading = false;
    string _filterItems = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetEntityTypes(_filterItems);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetEntityTypes("all");
    }

    private async Task GetEntityTypes(string filter = "")
    {
        if(filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

            var response = await actorsNodeServive.GetEntityTypeList(filter);

            if (response != null)
                entityTypesList = response;

            isLoading = false;
            StateHasChanged();

        }
    } 

    void ShowContextMenu(MouseEventArgs e)
    {
        if (JSRuntime != null)
        {
            JSRuntime.InvokeVoidAsync("ShowContextMenu", e.ClientX, e.ClientY);
        }
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<EntityType> args)
    {
        EntityType _EntityType = new();
        _EntityType = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            navigationManager.NavigateTo($"/EntityType/{_EntityType.Id}/Edit");
        }
    }


}
