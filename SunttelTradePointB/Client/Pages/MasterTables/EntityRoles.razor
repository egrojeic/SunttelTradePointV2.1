@page "/EntityRoles"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common


@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject ActorsNodeService actorsNodeServive
@inject NavigationManager navigationManager

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }
</style>

<PageTitleComponent Title="Entity Roles" IconName="EntityRoles.png"
                    Description="Describes the different roles the entities could play">
</PageTitleComponent>

<div class="panelMenuContainer">
    <RolesMenu></RolesMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>


<div class="tableBodyContainer">
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Roles"></WaitingProcessIndicator>
    }else{
        @if(entityRolesList != null)
        {
            <SfGrid DataSource="entityRolesList"
                Height="auto"
                Width="auto"
                TValue="EntityRole"
                AllowFiltering="true"
                AllowTextWrap="false"
                AllowPaging="true"
                AllowResizing="true"    
                
                ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
                <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(EntityRole.Code)" HeaderText="Code" Width="130px"></GridColumn>
                    @*<GridColumn Field="@nameof(EntityRole.LegacyId)" HeaderText="Legacy Id" Width="130px"></GridColumn>*@
                    <GridColumn Field="@nameof(EntityRole.Name)" HeaderText="Name" Width="auto"></GridColumn>
                    @*<GridColumn Field="@nameof(EntityRole.EntityRoleClassifier.ToString)" HeaderText="Role Classifier" Width="110"></GridColumn>*@
                </GridColumns>
                <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="EntityRole"></GridEvents>
            </SfGrid>
        }
    }
</div>


@code {
    string filterText = "";
    List<EntityRole> entityRolesList;
    IList<EntityRole> selectedRoles;


    bool isLoading = false;
    string _filterItems = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetFilterRoles(_filterItems);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFilterRoles("all");
    }

    private async Task GetFilterRoles(string filter = "")
    {
        if(filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

           
           filter = "all";
            

            var response = await actorsNodeServive.GetListEntityRoles(filter);

            if (response != null)
                entityRolesList = response;

            isLoading = false;
            StateHasChanged();
        }
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<EntityRole> args)
    {
        EntityRole _EntityRole = new();
        _EntityRole = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            navigationManager.NavigateTo($"/EntityRoles/{_EntityRole.Id}/Edit");
        }
    }


}
