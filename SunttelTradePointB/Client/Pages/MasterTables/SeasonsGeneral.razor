@page "/SeasonsGeneral"
@page "/SeasonsGeneral/{_filterItems}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http
@inject TransactionalItemsService transactItemsService;
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<PageTitleComponent Title="Seasons" IconName="seasons.png"
                    Description="Commercial Seasons">
</PageTitleComponent>

<div class="panelMenuContainer">
    <BoxTypesMenu></BoxTypesMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>

@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{
    if (seasonBusiness != null)
    {


        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@seasonBusiness"
                TItem="SeasonBusiness"
                ColumnWidth="100%"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="50">

            <Columns>
                <RadzenDataGridColumn TItem="SeasonBusiness" Property="Name" Title="@GetName("Name", new AtomConcept())"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SeasonBusiness" Property="Code" Title="@GetName("Code", new AtomConcept())"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SeasonBusiness" Property="FlagSundayShipping)" Title="@GetName("FlagSundayShipping", new SeasonBusiness())"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SeasonBusiness" Property="StartDate" Title="@GetName("StartDate", new SeasonBusiness())" FormatString="{0:yyyy-MM-dd}" Filterable="false"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SeasonBusiness" Property="EndDate" Title="@GetName("EndDate", new SeasonBusiness())" FormatString="{0:yyyy-MM-dd}" Filterable="false"></RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SeasonBusiness" Property="Notes" Title="@GetName("Notes", new AtomConcept())"></RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <div class="container-total">
            <div class="item">
                <label>
                    @(
                        $"Records: {seasonBusiness.Count}"
                        )
                </label>
            </div>
        </div>

    }
}



@code {
    [Parameter]
    public string _filterItems { get; set; } = "";
    SfGrid<SeasonBusiness>? referDataGrid;
    List<SeasonBusiness> seasonBusiness = new List<SeasonBusiness>();

    bool isLoading = false;
    List<ContextMenuItemModel> contextMenuItemModel = new List<ContextMenuItemModel>()
            {
        new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" }
            };

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected override void OnInitialized()
    {
        _filterItems = "all";
        LoadData();
        transactItemsService.Page = "SeasonsGeneral";
    }
    private async Task LoadData()
    {
        isLoading = true;
        var data = await transactItemsService.GetSeasonsTable(0, 250, _filterItems);
        seasonBusiness = data;
        //await referDataGrid.Refresh();
        isLoading = false;
        StateHasChanged();

    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<SeasonBusiness> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        SeasonBusiness argObj = (SeasonBusiness)args.Value;
        Navigation.NavigateTo($"/SeasonBusinessConcept/SeasonsGeneral/{_filterItems}/{argObj.Id}");
    }

    #endregion Grid


    public async void OnContextMenuClick(ContextMenuClickEventArgs<SeasonBusiness> args)
    {
        SeasonBusiness itemSeasonBusiness = null;
        itemSeasonBusiness = args.RowInfo.RowData;
        transactItemsService.SeasonBusinessSelectedItems = itemSeasonBusiness;

    }
}