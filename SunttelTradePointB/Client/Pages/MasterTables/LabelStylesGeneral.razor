@page "/LabelStyles"
@page "/LabelStyles/{_filterItems}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http
@inject TransactionalItemsService transactItemsService;
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>


<PageTitleComponent Title=" Label Style" IconName="palette.png"
                    Description="Here you can add label style">
</PageTitleComponent>

<div class="panelMenuContainer">
    <MenuConcet></MenuConcet>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>
@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{
    @if (@labelStyles != null)
    {


        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@labelStyles"
                TItem="LabelStyle"
                ColumnWidth="300px"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="50">

            <Columns>
                <RadzenDataGridColumn TItem="LabelStyle" Property="Name" Title="@GetName( "Name", new AtomConcept())" Width="80px" />
                <RadzenDataGridColumn TItem="LabelStyle" Property="Code" Title="@GetName( "Code", new AtomConcept())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                 <RadzenDataGridColumn TItem="LabelStyle" Property="Notes" Title="@GetName( "Notes", new AtomConcept())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="LabelStyle" Property="PDFReportName" Title="@GetName( "PDFReportName", new LabelStyle())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="LabelStyle" Property="Purpose" Title="@GetName( "Purpose", new LabelStyle())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
            </Columns>
        </RadzenDataGrid>


    }

}

@code {
    [Parameter]
    public string _filterItems { get; set; } = "";
   
    public List<LabelStyle> labelStyles = new();
 
    SfGrid<Box>? referDataGrid;

    bool isLoading = false;



    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected override void OnInitialized()
    {
      _filterItems = "all";
      LoadData();       
        transactItemsService.Page = "LabelStyles";


    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name) != null ? UICommonFunctions.GetDisplayName(Obj, Name) : Name;
        return Name;
    }

    private async Task LoadData()
    {
        isLoading = true;
        labelStyles = await transactItemsService.GetLabelStyles(_filterItems);
        isLoading = false;
        StateHasChanged();
    }


    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<LabelStyle> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        LabelStyle argObj = (LabelStyle)args.Value;
        Navigation.NavigateTo($"/LabelStylesConcept/LabelStyles/{_filterItems}/{argObj.Id}");
      
    }

    #endregion Grid



   

}