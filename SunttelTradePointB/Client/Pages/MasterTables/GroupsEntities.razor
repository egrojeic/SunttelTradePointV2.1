@page "/GroupsEntities"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems

@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive;
@inject ContextMenuService ContextMenuService


<PageTitleComponent Title="Groups of Entities/Actors/Nodes" IconName="EntityGroups.png"
                    Description="Describe the groups of the entities">
</PageTitleComponent>

<div class="panelMenuContainer">
    <GroupsMenu></GroupsMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>

<div class="tableBodyContainer">
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Groups"></WaitingProcessIndicator>
    }else{
        @if(entityGroupList != null)
        {
            <SfGrid 
                DataSource="entityGroupList"
                Height="auto"
                Width="auto"
                TValue="EntityGroup"
                AllowFiltering="true"
                AllowTextWrap="false"
                AllowPaging="true"
                AllowResizing="true"    
                ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
                <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(EntityGroup.Code)" HeaderText="Code" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(EntityGroup.Name)" HeaderText="Name" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(EntityGroup.GroupClassificationCriteria)" HeaderText="Group Classification" Width="110"></GridColumn>
                </GridColumns>
                    <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="EntityGroup"></GridEvents>
            </SfGrid>


        }
    }
</div>


@code {
    string filterText = "";
    List<EntityGroup>? entityGroupList;
    IList<EntityGroup> selectedGroups;


    bool isLoading = false;
    string _filterItems = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetFilteredGroup(_filterItems);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFilteredGroup();
    }

    public async Task GetFilteredGroup(string filter = "")
    {
        if(filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

            var response = await actorsNodeServive.GetListEntityGroups(filter);

            if (response != null)
                entityGroupList = response;

            isLoading = false;
            StateHasChanged();
        }
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<EntityGroup> args)
    {
        EntityGroup _EntityGroup = new();
        _EntityGroup = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            navigationManager.NavigateTo($"/GroupsEntities/{_EntityGroup.Id}");
        }
    }

}
