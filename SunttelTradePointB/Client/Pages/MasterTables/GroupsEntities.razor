@page "/GroupsEntities"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems

@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive;
@inject ContextMenuService ContextMenuService

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }
</style>
<PageTitleComponent Title="Groups of Entities/Actors/Nodes" IconName="EntityGroups.png"
                    Description="Describe the groups of the entities">
</PageTitleComponent>

<div class="panelMenuContainer">
    <GroupsMenu></GroupsMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>

<div>
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Groups"></WaitingProcessIndicator>

    }else{
        @if(entityGroupList != null)
        {

            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    ColumnWidth="100%"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument"
                    Data="entityGroupList"
                    TItem="EntityGroup">
                <Columns>
                    <RadzenDataGridColumn TItem="EntityGroup" Property="Code" Title="@GetName("Code",new EntityGroup())" Filterable="false" Width="50px" />
                    <RadzenDataGridColumn TItem="EntityGroup" Property="Name" Title="@GetName("Name",new EntityGroup())" Filterable="false" Width="150px" />
                    <RadzenDataGridColumn TItem="EntityGroup" Property="GroupClassificationCriteria" Title="@GetName("GroupClassificationCriteria",new EntityGroup())" Filterable="false" Width="150px" />
                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {entityGroupList.Count}"
                            )
                    </label>
                </div>
            </div>

        }
    }
</div>


@code {
    string filterText = "";
    List<EntityGroup>? entityGroupList;
    IList<EntityGroup> selectedGroups;


    bool isLoading = false;
    string _filterItems = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetFilteredGroup(_filterItems);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFilteredGroup("all");
    }

    public async Task GetFilteredGroup(string filter = "")
    {
        if(filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

            if (filter.ToLower() == "all" || filter.ToLower() == "todo")
            {
                filter = "";
            }

            var response = await actorsNodeServive.GetListEntityGroups(filter);

            if (response != null)
                entityGroupList = response;

            isLoading = false;
            StateHasChanged();
        }
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<EntityGroup> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        EntityGroup argObj = (EntityGroup)args.Value;        
        navigationManager.NavigateTo($"/GroupsEntities/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}
