@page "/GroupConcept/{Page}/{Mode}/{filterItems}"
@page "/GroupConcept/{Page}/{Mode}"
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;


<PageTitleComponent Title="Children Groups" IconName="group.png"
                    Description="Children Groups">
</PageTitleComponent>

<div class="flex-horizontal-center position-relative">

    <SfTab Height="50px">
        <TabAnimationSettings>
            <TabAnimationPrevious Effect=AnimationEffect.None></TabAnimationPrevious>
            <TabAnimationNext Effect=AnimationEffect.None></TabAnimationNext>
        </TabAnimationSettings>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="General"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">

                        <div class="grid-columns-2 box-shadow-mode">
                            <div><label>@GetName( "Name", new AtomConcept())</label></div>
                            <div><input type="text" @bind-value="conceptGroup.Name" class="form-control" placeholder="Edit value" /></div>
                            <div><label>@GetName( "Code", new AtomConcept())</label></div>
                            <div><input type="text" @bind-value="conceptGroup.Code" class="form-control" placeholder="Edit value" /></div>
                            <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                            <div><input type="text" @bind-value="conceptGroup.Notes" class="form-control" placeholder="Edit value" /></div>
                            <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
                            <div><input type="text" @bind-value="conceptGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "Groups", new ConceptType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">
                        <div class="grid-columns-2 ">
                            <div></div>
                            <div>
                                <div style="display:@(dataGridView?"block":"none");"> <button @onclick='()=>Closed("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-pen-to-square"></i></button></div>
                                <div style="display:@(!dataGridView?"block":"none");"> <button @onclick='()=>Open("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-list"></i></button></div>
                            </div>                            
                        </div>
                        <div style="display:@(!dataGridView?"block":"none");">
                            <div class="grid-columns-2 box-shadow-mode">
                                <div><label>@GetName( "Name", new AtomConcept())</label></div>
                                <div><input type="text" @bind-value="childrenGroup.Name" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                                <div><input type="text" @bind-value="childrenGroup.Notes" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
                                <div><input type="text" @bind-value="childrenGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
                                <div></div>
                                <div> <button @onclick='AddGroupchildren' class="size-btn color-btn margin-left  "><i class="fa-sharp fa-solid fa-circle-plus"></i></button></div>
                            </div>
                        </div>
                        <div style="display:@(dataGridView?"block":"none");">
                            @if (childrenGroups == null) childrenGroups = new();

                            <DataGrid TParameter="ConceptGroup"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="childrenGroups"
                                      GridColumnsList="gridColumnListchildrenGroups"
                                      EventCallbackOnLoad="Onload"
                                      Width="800">
                            </DataGrid>
                        </div>


                    </div>

                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>

    <div class="flex-horizontal-end position ">
        <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
        <button @onclick='Save' class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
    </div>


</div>

@code {
  [Parameter]
    public string Page { get; set; } = "";
    [Parameter]
    public string Mode { get; set; } = "Add";
    [Parameter]
    public string filterItems { get; set; } = "";
    public ConceptGroup conceptGroup = new();
    public List<ConceptGroup> childrenGroups = new();
    public ConceptGroup childrenGroup = new();
    public bool dataGridView = true;

    public List<GridColumn> gridColumnListchildrenGroups = new();

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (Mode == "Edit")
        {
            conceptGroup = transactionalService.ConceptGroupSelectedItems;
            if (conceptGroup == null) { Closed("control"); }

            childrenGroups = conceptGroup.ChildrenGroups;
        }

        if (Mode == "Add")
        {
            conceptGroup = new();
        }


        gridColumnListchildrenGroups = new List<GridColumn>
            {
            new GridColumn() { Field = nameof(ConceptGroup.Name), HeaderText = GetName("Name", new ConceptGroup()) , Width="300" },
            new GridColumn() { Field = nameof(ConceptGroup.Code), HeaderText = GetName("Code", new ConceptGroup()) , Width="120" },
            new GridColumn() { Field = nameof(ConceptGroup.GroupClassificationCriteria), HeaderText = GetName("GroupClassificationCriteria", new ConceptGroup()), Width="300" }
            };
    }


    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo($"/{Page}/{filterItems}");
        if (value == "grid") dataGridView = false;
    }

    public void Open(string value)
    {
        if (value == "grid") dataGridView = true;
    }


    public async void Save()
    {
        conceptGroup.ChildrenGroups = childrenGroups;
        var resul = await transactionalService.SaveTransactionalItemGroup(null, conceptGroup);
        if (resul)
        {
            conceptGroup = new();
            childrenGroups = new();
        }
      
    }
    public async void AddGroupchildren()
    {
        if (childrenGroup.Name != null)
        {
            if (childrenGroup.GroupClassificationCriteria != null)
            {
                childrenGroups.Add(childrenGroup);
                childrenGroup = new();
            }

        }

    }

    public void DeleteChildrenGroups(string value)
    {
        if (childrenGroups != null)
        {
            var remove = childrenGroups.Where(r => r.Name.Trim() == value.Trim()).FirstOrDefault();
            if (remove != null)
            {
                childrenGroups.Remove(remove);
            }

        }

    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<ConceptGroup> args)
    {
        ConceptGroup ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        childrenGroup = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = false;
        }
    }

    public void Onload(object args)
    {

        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }  
}
