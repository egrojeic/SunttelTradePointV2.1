@page "/GroupConcept/{Page}/{Mode}/{filterItems}"
@page "/GroupConcept/{Page}/{Mode}"
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;


<PageTitleComponent Title=" Group " IconName="group.png"
                    Description="Here you can add  Groups">
</PageTitleComponent>

<div class="flex-horizontal-center">
    <div class="grid-columns-2 box-shadow-mode">
        <div><label>@GetName( "Name", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="conceptGroup.Name" class="form-control" placeholder="Edit value" /></div>
        <div><label>@GetName( "Code", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="conceptGroup.Code" class="form-control" placeholder="Edit value" /></div>
        <div><label>@GetName( "Notes", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="conceptGroup.Notes" class="form-control" placeholder="Edit value" /></div>
        <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
        <div><input type="text" @bind-value="conceptGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
    </div>
    <div class="grid-columns-2 box-shadow-mode">
        <div>
            <label>
                @GetName( "Groups", new ConceptType())
            </label>
        </div>
        <div></div>
        <div><label>@GetName( "Name", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="childrenGroup.Name" class="form-control" placeholder="Edit value" /></div>
         <div><label>@GetName( "Notes", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="childrenGroup.Notes" class="form-control" placeholder="Edit value" /></div>
        <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
        <div><input type="text" @bind-value="childrenGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
        <div></div>
        <div> <button @onclick='AddGroupchildren' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button></div>
    </div>

    <div class="content-item">
        @{
            if (childrenGroups != null)
            {
                foreach (ConceptGroup Elemen in childrenGroups)
                {
                    <div class="tag">
                        <p><b>@GetName( "Name", new AtomConcept()):</b> @Elemen?.Name</p>
                        <p><b>@GetName( "GroupClassificationCriteria", new ConceptGroup()):</b> @Elemen?.GroupClassificationCriteria</p>
                        <input type="button" class="delete color-btn" @onclick="()=>DeleteChildrenGroups(Elemen?.Name)" value="X" />
                    </div>
                    <div class="tagEnd">
                    </div>
                }
            }

        }
    </div>


    <div></div>
    <div class="flex-horizontal-end">
        <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
        <button @onclick='Save' class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
    </div>


</div>

@code {
    [Parameter]
    public string Page { get; set; } = "";
    [Parameter]
    public string Mode { get; set; } = "Add";
    [Parameter]
    public string filterItems { get; set; } = "";
    public ConceptGroup conceptGroup = new();
    public List<ConceptGroup> childrenGroups = new();
    public ConceptGroup childrenGroup = new();

    protected override void OnInitialized()
    {
        if (Mode == "Edit")
        {
            conceptGroup = transactionalService.ConceptGroupSelectedItems;
        }
        if (Mode == "Add")
        {
            conceptGroup = new();
        }
        base.OnInitialized();
    }


    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo($"/{Page}/{filterItems}");
    }

    public async void Save()
    {
        conceptGroup.ChildrenGroups = childrenGroups;
        await transactionalService.SaveTransactionalItemGroup(null, conceptGroup);
        conceptGroup = new();
        childrenGroups = new();
    }
    public async void AddGroupchildren()
    {
        if (childrenGroup.Name != null )
        {
            if ( childrenGroup.GroupClassificationCriteria != null)
            {
                childrenGroups.Add(childrenGroup);
                childrenGroup = new();
            }
           
        }
      
    }

    public void DeleteChildrenGroups(string value)
    {
        if (childrenGroups !=null)
        {
            var remove =  childrenGroups.Where(r => r.Name.Trim() == value.Trim()).FirstOrDefault();
            if (remove !=null)
            {
                childrenGroups.Remove(remove);
            }
          
        }
        
    }


    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
}
