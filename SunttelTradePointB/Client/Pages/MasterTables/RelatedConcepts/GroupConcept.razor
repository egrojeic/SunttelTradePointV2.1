@page "/GroupConcept/{Page}/{Mode}/{filterItems}"
@page "/GroupConcept/{Page}/{Mode}"
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.SplitButtons
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;


<div class="flex-verical-center position-relative" style="display:@(!modeEdit?"flex":"none");">
    @if (@viewMsg)
    {
        <MessageSaveComponent isVisible="viewMsg" message="@msg">
        </MessageSaveComponent>
    }

    @if (pageView == "Groups")
    {
        <PageTitleComponent Title=" Children Groups" IconName="group.png"
                        Description="Here you can add types of Children Groups">
        </PageTitleComponent>
        <div class="flex-horizontal-center">           
            <div >
                <div class="grid-columns-2 box-shadow-mode">
                    <div><label>@GetName( "Name", new AtomConcept())</label></div>
                    <div><input type="text" @bind-value="childrenGroup.Name" class="form-control" placeholder="Edit value" /></div>
                    <div><label>@GetName( "Code", new AtomConcept())</label></div>
                    <div><input type="text" @bind-value="childrenGroup.Code" class="form-control" placeholder="Edit value" /></div>
                    <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                    <div><input type="text" @bind-value="childrenGroup.Notes" class="form-control" placeholder="Edit value" /></div>
                    <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
                    <div><input type="text" @bind-value="childrenGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
                    <div></div>
                    <div>
                        <button @onclick='()=>OpenAdd("Groups")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button @onclick='AddGroupchildren' class="size-btn color-btn margin-left  "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>

        </div>
    }

</div>

<div class="flex-verical-center position-relative" style="display:@(modeEdit?"flex":"none");">
    @if (@viewMsg)
    {
        <MessageSaveComponent isVisible="viewMsg" message="@msg">
        </MessageSaveComponent>
    }

    <PageTitleComponent Title="Children Groups" IconName="group.png"
                        Description="Children Groups">
    </PageTitleComponent>

    <div class="container-menu-g">
        <nav>
            <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>
        </nav>
    </div>

    <div class="grid-columns-header ">
       
            <div><label>@GetName( "Name", new AtomConcept())</label></div>
            <div><input type="text" @bind-value="conceptGroup.Name" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "Code", new AtomConcept())</label></div>
            <div><input type="text" @bind-value="conceptGroup.Code" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "Notes", new AtomConcept())</label></div>
            <div><input type="text" @bind-value="conceptGroup.Notes" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
            <div><input type="text" @bind-value="conceptGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
       
    </div>

    <div class="flex-horizontal-center position-relative">

        <SfTab Height="300px" HeaderPlacement="HeaderPosition.Left">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "Groups", new ConceptType())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="flex-horizontal-center">
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">Children Groups</h3>
                                <svg @onclick='()=>ClosedAdd("Groups")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                                @*<img class="img-style" src="/images/save-2.png" @onclick='()=>AddItem("Groups")' />*@
                            </div>
                            @if (childrenGroups == null) childrenGroups = new();

                            <DataGrid TParameter="ConceptGroup"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="childrenGroups"
                                      GridColumnsList="gridColumnListchildrenGroups"
                                      EventCallbackOnLoad="Onload"
                                      Width="800">
                            </DataGrid>

                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>

     
    </div>
</div>
@code {
    [Parameter]
    public string Page { get; set; } = "";
    [Parameter]
    public string Mode { get; set; } = "Add";
    [Parameter]
    public string filterItems { get; set; } = "";
    public ConceptGroup conceptGroup = new();
    public List<ConceptGroup> childrenGroups = new();
    public ConceptGroup childrenGroup = new();
    public bool dataGridView = true;

    public bool modeEdit = true, viewMsg = false;
    public string msg = "", pageView = "";

    public List<GridColumn> gridColumnListchildrenGroups = new();

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (Mode == "Edit")
        {
            conceptGroup = transactionalService.ConceptGroupSelectedItems;
            if (conceptGroup == null) { Closed("control"); }

            childrenGroups = conceptGroup.ChildrenGroups;
        }

        if (Mode == "Add")
        {
            conceptGroup = new();
        }


        gridColumnListchildrenGroups = new List<GridColumn>
            {
            new GridColumn() { Field = nameof(ConceptGroup.Name), HeaderText = GetName("Name", new ConceptGroup()) , Width="300" },
            new GridColumn() { Field = nameof(ConceptGroup.Code), HeaderText = GetName("Code", new ConceptGroup()) , Width="120" },
            new GridColumn() { Field = nameof(ConceptGroup.GroupClassificationCriteria), HeaderText = GetName("GroupClassificationCriteria", new ConceptGroup()), Width="300" }
            };
    }


    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo($"/{Page}/{filterItems}");
        if (value == "grid") dataGridView = false;
    }

    public void Open(string value)
    {
        if (value == "grid") dataGridView = true;
    }


    public async void AddGroupchildren()
    {
        if (childrenGroup.Name != null)
        {
            if (childrenGroup.GroupClassificationCriteria != null)
            {
                childrenGroups.Add(childrenGroup);
                childrenGroup = new();
                Msg("Added");
            }

        }

    }

    public void DeleteChildrenGroups(string value)
    {
        if (childrenGroups != null)
        {
            var remove = childrenGroups.Where(r => r.Name.Trim() == value.Trim()).FirstOrDefault();
            if (remove != null)
            {
                childrenGroups.Remove(remove);
                Msg("Deleted");
            }

        }

    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<ConceptGroup> args)
    {
        ConceptGroup ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        childrenGroup = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = false;
        }
    }

    public void Onload(object args)
    {
        StateHasChanged();
    }

    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }

    public async void ItemSelected(MenuEventArgs e)
    {


        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {
            conceptGroup.ChildrenGroups = childrenGroups;
            var resul = await transactionalService.SaveTransactionalItemGroup( conceptGroup);
            if (resul)
            {
                conceptGroup = new();
                childrenGroups = new();               
            }
            Msg(resul);

        }
        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    private void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
    }
    private void Msg(string? Msg)
    {
        msg = Msg;
        viewMsg = true;
    }
}
