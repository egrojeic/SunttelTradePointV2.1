@page "/TypesTransactionalItemsConcept/{Page}/{Mode}/{filterItems}"
@page "/TypesTransactionalItemsConcept/{Page}/{Mode}"
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using SunttelTradePointB.Client.Shared.Menus
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.SplitButtons
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;




<div class="flex-verical-center position-relative" style="display:@(!modeEdit?"flex":"none");">
   
    @if (@viewMsg)
    {
        <MessageSaveComponent isVisible="viewMsg" message="@msg"    >
        </MessageSaveComponent>
    }

    @if (pageView == "ChildrenGroups")
    {
        <PageTitleComponent Title=" Children Groups" IconName="group.png"
                        Description="Here you can add types of Children Groups">
        </PageTitleComponent>
        <div class="flex-horizontal-center">
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div>
                    <label>
                        @GetName( "ChildrenGroups", new ConceptGroup())
                    </label>
                </div>
                <div></div>
                <div><label>@GetName( "Name", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="childrenGroup.Name" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Code", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="childrenGroup.Code" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="childrenGroup.Notes" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
                <div><input type="text" @bind-value="childrenGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
                <div></div>
                <div class="flex-horizontal-end">
                    <button @onclick='()=>OpenAdd("ChildrenGroups")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='AddGroupchildren' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>
    }

    @if (pageView == "TransactionalItemProcessesGeneral")
    {
        <PageTitleComponent Title=" Processes General"
                        Description="Here you can add processes general">
        </PageTitleComponent>

        <div class="flex-horizontal-center ">
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div><label>@GetName( "Name", new TransactionalItemProcessStep())</label></div>
                <div><input type="text" @bind-value="transactionalItemProcessStep.Name" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "GeneralInstructions", new TransactionalItemProcessStep())</label></div>
                <div> <textarea style="resize:false;" @bind="transactionalItemProcessStep.GeneralInstructions" class="form-control" placeholder="Edit value"></textarea></div>
                <div><label>@GetName( "Cost", new TransactionalItemProcessStep())</label></div>
                <div><input type="number" @bind-value="transactionalItemProcessStep.Cost" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Order", new TransactionalItemProcessStep())</label></div>
                <div><input type="number" @bind-value="transactionalItemProcessStep.Order" class="form-control" placeholder="Edit value" /></div>
                <div> </div>
                <div style="display:@(dataGridView?"flex":"none");" class="flex-horizontal-end">
                    <button @onclick='()=>OpenAdd("TransactionalItemProcesses")' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>


    }

    @if (pageView == "TransactionalItemProcessestags")
    {
        <PageTitleComponent Title="Children Tag "
                        Description="Here you can add children tag">
        </PageTitleComponent>

        <div class="grid-columns-2 box-shadow-mode width-page1">
            <div><label>@GetName( "Key", new TransactionalItemTag())</label></div>
            <div><input type="text" @bind-value="transactionalItemProcessTag.Key" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "Value", new TransactionalItemTag())</label></div>
            <div><input type="text" @bind-value="transactionalItemProcessTag.Value" class="form-control" placeholder="Edit value" /></div>
            <div></div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>OpenAdd("TransactionalItemProcesses")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick='AddTag' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>

            </div>
        </div>

    }

    @if (pageView == "TransactionalItemTypeCharacteristics")
    {
        <PageTitleComponent Title="@GetName( "PossibleValues", new TransactionalItemTypeCharacteristic())"
                        Description="@("Here you can add "+@GetName( "PossibleValues", new TransactionalItemTypeCharacteristic()) )">
        </PageTitleComponent>
        <div class="flex-horizontal-center ">

            <div class="grid-columns-2 box-shadow-mode">
                <div><label>@GetName( "Name", new TransactionalItemTypeCharacteristic())</label></div>
                <div><input type="text" @bind-value="transactionalItemTypeCharacteristic.Name" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "PossibleValues", new TransactionalItemTypeCharacteristic())</label></div>
                <div><input type="text" @bind-value="possibleValue" class="form-control" placeholder="Edit value" /></div>
                <div></div>
                <div>
                    <button @onclick='()=>OpenAdd("TransactionalItemTypeCharacteristics")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='AddPossibleValue' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
            <br>

            <div class="flex-horizontal-center ">
                <DataGrid TParameter="PossibleValues"
                      EventCallbackMenu="OnContextMenuClick"
                      parameterList="possibleValuesModel"
                      GridColumnsList="gridColumnListPossibleValues"
                      Width="400">
                </DataGrid>
            </div>
        </div>


    }

    @if (pageView == "QualityParameters")
    {
        <PageTitleComponent Title="Quality Parameters "
                        Description="Here you can add quality parameters">
        </PageTitleComponent>
        <div class="flex-horizontal-center ">
            <div class="grid-columns-2 box-shadow-mode">
                <div><label>@GetName( "Name", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="transactionalItemQuality.Name" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Code", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="transactionalItemQuality.Code" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="transactionalItemQuality.Notes" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Value", new TransactionalItemQualityPair())</label></div>
                <div><input type="text" @bind-value="transactionalItemQualityPair.Value" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "DefaultValue", new TransactionalItemQuality())</label></div>
                <div><input type="text" @bind-value="transactionalItemQuality.DefaultValue" class="form-control" placeholder="Edit value" /></div>
                <div></div>
                <div>
                    <button @onclick='()=>OpenAdd("QualityParameters")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>AddItem("QualityParameters")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>
    }

    @if (pageView == "InRecipeQualityModifiers")
    {
        <PageTitleComponent Title=" Recipe Quality Modifiers "
                        Description="Here you can add quality modifiers">
        </PageTitleComponent>
        <div class="flex-horizontal-center" >
            <div class="grid-columns-2 box-shadow-mode">
                <div><label>@GetName( "Name", new ProductRecipeQualityModifier())</label></div>
                <div><input type="text" @bind-value="inRecipeQualityModifier.Name" class="form-control" placeholder="Edit value" /></div>
                <div>
                    <button @onclick='()=>OpenAdd("InRecipeQualityModifiers")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>AddItem("InRecipeQualityModifiers")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>


    }

</div>


<div class="flex-verical-center position-relative" style="display:@(modeEdit?"flex":"none");">
     @if (@viewMsg)
    {
        <MessageSaveComponent isVisible="viewMsg" message="@msg"    >
        </MessageSaveComponent>
    }

    <PageTitleComponent Title=" Transactional Type" IconName="TransactionalTypes.png"
                        Description="Here you can add types of transactional">
    </PageTitleComponent>

    <div class="container-menu-g">
        <nav>
            <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>
        </nav>
    </div>

    <div class="grid-columns-header ">
        <div><label>@GetName( "Name", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="transactionalItemType.Name" class="form-control" placeholder="Edit value" /></div>
        <div><label>@GetName( "HasProductionSpecs", new TransactionalItemType())</label></div>
        <div>
            <SfSwitch @bind-Checked="@transactionalItemType.HasProductionSpecs"></SfSwitch>
        </div>
        <div><label>@GetName( "HasPackingRecipe", new TransactionalItemType())</label></div>
        <div>
            <SfSwitch @bind-Checked="@transactionalItemType.HasPackingRecipe"></SfSwitch>
        </div>
    </div>



    <SfTab Height="300px"  HeaderPlacement="HeaderPosition.Left">
        <TabAnimationSettings>
        </TabAnimationSettings>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "ChildrenGroups", new ConceptGroup())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">

                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">@GetName( "ChildrenGroups", new ConceptGroup())</h3>
                            <svg @onclick='()=>ClosedAdd("ChildrenGroups")' title="Add new tag" style="margin-left:20px;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </div>

                        @if (transactionalItemProcessSteps == null) transactionalItemProcessSteps = new();

                        <DataGrid TParameter="ConceptGroup"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="childrenGroups"
                                  GridColumnsList="gridColumnListConceptGroup"
                                  EventCallbackOnLoad="Onload"
                                  Width="100%">
                        </DataGrid>

                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "TransactionalItemProcesses", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <SfTab Height="50px">
                        <TabAnimationSettings>
                        </TabAnimationSettings>
                        <TabItems>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="General"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>

                                    <div class="flex-horizontal-center">
                                        <div class="detailsTitleContainer">
                                            <h3 class="subTitleDetailForm">General</h3>
                                            <svg @onclick='()=>ClosedAdd("TransactionalItemProcessesGeneral")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                            </svg>
                                            <img class="img-style" src="/images/save-2.png" @onclick='()=>AddItem("TransactionalItemProcessesGeneral")' />
                                        </div>

                                        @if (transactionalItemProcessSteps == null) { transactionalItemProcessSteps = new List<TransactionalItemProcessStep>(); }


                                        <DataGrid TParameter="TransactionalItemProcessStep"
                                                  EventCallbackMenu="OnContextMenuClick"
                                                  parameterList="transactionalItemProcessSteps"
                                                  GridColumnsList="gridColumnList"
                                                  EventCallbackOnLoad="Onload">
                                        </DataGrid>



                                    </div>
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="@GetName( "TransactionalItemProcessTags", new TransactionalItemProcessStep())"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    <div class="flex-horizontal-center">
                                        <div class="detailsTitleContainer">
                                            <h3 class="subTitleDetailForm">@GetName( "TransactionalItemProcessTags", new TransactionalItemProcessStep())</h3>
                                            <svg @onclick='()=>ClosedAdd("TransactionalItemProcessestags")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                            </svg>
                                        </div>

                                        @if (transactionalItemProcessTags == null) transactionalItemProcessTags = new();

                                        <DataGrid TParameter="TransactionalItemTag"
                                                  EventCallbackMenu="OnContextMenuClick"
                                                  parameterList="transactionalItemProcessTags"
                                                  GridColumnsList="gridColumnListProcessTag"
                                                  EventCallbackOnLoad="Onload"
                                                  Width="400">
                                        </DataGrid>

                                    </div>
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </ContentTemplate>
            </TabItem>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "TransactionalItemTypeCharacteristics", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>

                    <div class="flex-horizontal-center   ">
                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">Characteristics</h3>
                            <svg @onclick='()=>ClosedAdd("TransactionalItemTypeCharacteristics")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                            <img class="img-style" src="/images/save-2.png" @onclick='()=>AddItem("TransactionalItemTypeCharacteristics")' />
                        </div>
                        @if (transactionalItemTypeCharacteristics == null) transactionalItemTypeCharacteristics = new();

                        <DataGrid TParameter="TransactionalItemTypeCharacteristic"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="transactionalItemTypeCharacteristics"
                                  GridColumnsList="gridColumnListCharacteristic"
                                  EventCallbackOnLoad="Onload"
                                  Width="400">
                        </DataGrid>

                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "QualityParameters",new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">

                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">General</h3>
                            <svg @onclick='()=>ClosedAdd("QualityParameters")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </div>

                        @if (transactionalItemQualityPairs == null) transactionalItemQualityPairs = new();

                        <DataGrid TParameter="TransactionalItemQualityPairModel"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="transactionalItemQualityPairsModel"
                                  GridColumnsList="gridColumnListQualityPair"
                                  EventCallbackOnLoad="Onload"
                                  Width="970px">
                        </DataGrid>

                    </div>

                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("InRecipeQualityModifiers", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">

                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">@GetName("InRecipeQualityModifiers", new TransactionalItemType())</h3>
                            <svg @onclick='()=>ClosedAdd("InRecipeQualityModifiers")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </div>


                        @if (inRecipeQualityModifiers == null) inRecipeQualityModifiers = new();

                        <DataGrid TParameter="ProductRecipeQualityModifier"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="inRecipeQualityModifiers"
                                  GridColumnsList="gridColumnListModifier"
                                  EventCallbackOnLoad="Onload"
                                  Width="400px">

                        </DataGrid>


                    </div>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>

</div>

@code {
    [Parameter]
    public string Page { get; set; } = "";
    [Parameter]
    public string Mode { get; set; } = "Add";
    [Parameter]
    public string filterItems { get; set; } = "";
    public TransactionalItemType transactionalItemType = new();
    public List<ConceptGroup> childrenGroups = new();
    public ConceptGroup childrenGroup = new();
    public TransactionalItemProcessStep transactionalItemProcessStep = new();
    public List<TransactionalItemProcessStep> transactionalItemProcessSteps = new();
    public TransactionalItemTag transactionalItemProcessTag = new();
    public List<TransactionalItemTag> transactionalItemProcessTags = new();
    public List<TransactionalItemTypeCharacteristic> transactionalItemTypeCharacteristics = new();
    public TransactionalItemTypeCharacteristic transactionalItemTypeCharacteristic = new();
    public List<TransactionalItemQualityPair> transactionalItemQualityPairs = new();
    public List<TransactionalItemQualityPairModel> transactionalItemQualityPairsModel = new();
    public TransactionalItemQualityPair transactionalItemQualityPair = new();
    public TransactionalItemQuality transactionalItemQuality = new();
    public List<ProductRecipeQualityModifier> inRecipeQualityModifiers = new();
    public ProductRecipeQualityModifier inRecipeQualityModifier = new();
    public List<ConceptGroup>? Groups = new();

    public DataGrid<PossibleValues> referGrid;

    public List<GridColumn> gridColumnList = new();
    public List<GridColumn> gridColumnListQualityPair = new();
    public List<GridColumn> gridColumnListConceptGroup = new();
    public List<GridColumn> gridColumnListProcessTag = new();
    public List<GridColumn> gridColumnListCharacteristic = new();
    public List<GridColumn> gridColumnListModifier = new();
    public List<GridColumn> gridColumnListPossibleValues = new();

    public bool isLoading = false, dataGridView = true, modeEdit = true,viewMsg=false;
    public List<PossibleValues> possibleValuesModel = new();
    public List<string> possibleValues = new();
    public string possibleValue = "", msg = "";
    string pageView = "";

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (Mode == "Edit")
        {
            transactionalItemType = transactionalService.ConceptTransactionalItemType;
            transactionalItemProcessSteps = transactionalItemType.TransactionalItemProcesses;
            childrenGroups = transactionalItemType.Groups;
            transactionalItemTypeCharacteristics = transactionalItemType.TransactionalItemTypeCharacteristics;
            transactionalItemQualityPairs = transactionalItemType.QualityParameters;
            inRecipeQualityModifiers = transactionalItemType.InRecipeQualityModifiers;

        }
        if (Mode == "Add")
        {
            transactionalItemType = new();
        }


        gridColumnList = new List<GridColumn>()
        {
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Name), HeaderText = GetName("Name", new TransactionalItemProcessStep())  },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.GeneralInstructions), HeaderText = GetName("GeneralInstructions", new TransactionalItemProcessStep()) },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Cost), HeaderText = GetName("Cost", new TransactionalItemProcessStep()) },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Order), HeaderText = GetName("Order", new TransactionalItemProcessStep()) }

        };

        gridColumnListQualityPair = new List<GridColumn>
        {
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Name), HeaderText = GetName("Name", new AtomConcept())  },
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Code), HeaderText = GetName("Code", new AtomConcept())  },
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Note), HeaderText = GetName("Note", new AtomConcept())  },
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Value), HeaderText = GetName("Value", new TransactionalItemQualityPair())  },
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Code), HeaderText = GetName("DefaultValue", new TransactionalItemQuality())  },
        };

        gridColumnListConceptGroup = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(ConceptGroup.Name), HeaderText = GetName("Name", new ConceptGroup()) , Width="300" },
            new GridColumn() { Field = nameof(ConceptGroup.Code), HeaderText = GetName("Code", new ConceptGroup()) , Width="120" },
            new GridColumn() { Field = nameof(ConceptGroup.GroupClassificationCriteria), HeaderText = GetName("GroupClassificationCriteria", new ConceptGroup()), Width="300" }
        };
        gridColumnListProcessTag = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(TransactionalItemTag.Key), HeaderText = GetName("Name", new TransactionalItemTag())  },
            new GridColumn() { Field = nameof(TransactionalItemTag.Value), HeaderText = GetName("Code", new TransactionalItemTag())  }

        };
        gridColumnListCharacteristic = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(TransactionalItemTypeCharacteristic.Name), HeaderText = GetName("Name", new TransactionalItemTypeCharacteristic()), Width="300" }

        };

        gridColumnListModifier = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(ProductRecipeQualityModifier.Name), HeaderText = GetName("Name", new ProductRecipeQualityModifier())  }

        };
        gridColumnListPossibleValues = new List<GridColumn>
        {
            new GridColumn() { Field=nameof(PossibleValues.Name) ,  HeaderText = @GetName( "Name", new TransactionalItemTypeCharacteristic())  }
            ,new GridColumn() { Field=nameof(PossibleValues.Value) ,  HeaderText = @GetName( "PossibleValues", new TransactionalItemTypeCharacteristic())  }
        };


    }





    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemQualityPairModel> args)
    {
        TransactionalItemQualityPairModel ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        // transactionalItemQualityPair = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = true;
        }
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemProcessStep> args)
    {
        TransactionalItemProcessStep ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        transactionalItemProcessStep = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = false;
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<ConceptGroup> args)
    {
        ConceptGroup ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        childrenGroup = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = false;
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemTag> args)
    {
        TransactionalItemTag ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        transactionalItemProcessTag = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = false;
        }
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemTypeCharacteristic> args)
    {
        TransactionalItemTypeCharacteristic ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        transactionalItemTypeCharacteristic = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = false;
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<ProductRecipeQualityModifier> args)
    {
        ProductRecipeQualityModifier ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        inRecipeQualityModifier = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = false;
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<PossibleValues> args)
    {
        PossibleValues ObjModel = new();
        ObjModel = args.RowInfo.RowData;
        if (args.Item.Id == "Edit")
        {
            dataGridView = false;
        }
    }


    public void AddItem(string value)
    {
        if (value == "TransactionalItemProcesses")
        {
            if (transactionalItemProcessSteps == null) transactionalItemProcessSteps = new();
            transactionalItemProcessStep.TransactionalItemProcessTags = transactionalItemProcessTags;
            transactionalItemProcessSteps.Add(transactionalItemProcessStep);
            transactionalItemProcessStep = new();
            transactionalItemProcessTags = new();
        }
        if (value == "TransactionalItemTypeCharacteristics")
        {
            if (transactionalItemTypeCharacteristics == null) transactionalItemTypeCharacteristics = new();
            transactionalItemTypeCharacteristic.PossibleValues = possibleValues;
            transactionalItemTypeCharacteristics.Add(transactionalItemTypeCharacteristic);
            transactionalItemTypeCharacteristic = new();
            possibleValues = new();
        }
        if (value == "QualityParameters")
        {
            if (transactionalItemQualityPairs == null) transactionalItemQualityPairs = new();
            transactionalItemQualityPair.TransactionalItemQuality = transactionalItemQuality;
            transactionalItemQualityPairs.Add(transactionalItemQualityPair);
            transactionalItemQualityPairsModel.Add(new TransactionalItemQualityPairModel
                {
                    Name = transactionalItemQualityPair.TransactionalItemQuality != null ? transactionalItemQualityPair.TransactionalItemQuality.Name : "",
                    Code = transactionalItemQualityPair.TransactionalItemQuality != null ? transactionalItemQualityPair.TransactionalItemQuality.Code : "",
                    Note = transactionalItemQualityPair.TransactionalItemQuality != null ? transactionalItemQualityPair.TransactionalItemQuality.Notes : "",
                    DefaulValue = transactionalItemQualityPair.TransactionalItemQuality != null ? transactionalItemQualityPair.TransactionalItemQuality.DefaultValue : "",
                    Id = transactionalItemQualityPair.Id,
                    Value = transactionalItemQualityPair.Value
                });
            transactionalItemQualityPair = new();
            transactionalItemQuality = new();
        }
        if (value == "InRecipeQualityModifiers")
        {
            if (inRecipeQualityModifiers == null) inRecipeQualityModifiers = new();
            inRecipeQualityModifiers.Add(inRecipeQualityModifier);
            inRecipeQualityModifier = new();
        }

         Msg("Added");

    }



    public void Onload(object args)
    {
        isLoading = false;
        StateHasChanged();
    }

    public void AddTag()
    {
        if (transactionalItemProcessTag.Key != null)
        {
            if (transactionalItemProcessTag.Value != null)
            {
                transactionalItemProcessTags.Add(transactionalItemProcessTag);
                transactionalItemProcessTag = new();
                 Msg("Added");
            }
        }

    }

    public void DeleteTag(string value)
    {
        var tag = transactionalItemProcessTags.Where(r => r.Key == value).FirstOrDefault();
        transactionalItemProcessTags.Remove(tag);
        Msg("Deleteed");
    }


    public void AddPossibleValue()
    {
        if (possibleValue != null && possibleValue != "")
        {
            possibleValues.Add(possibleValue);
            possibleValuesModel.Add(new PossibleValues { Name = transactionalItemTypeCharacteristic.Name, Value = possibleValue });
            possibleValue = "";
            Msg("Added");
        }
    }

    public void DeletePossibleValue(string value)
    {
        var element = possibleValues.Where(e => e.Trim() == value.Trim()).FirstOrDefault();
        var elemenModel = possibleValuesModel.Where(e => e.Name.Trim() == value.Trim()).FirstOrDefault();
        if (element != null && possibleValue != null && possibleValue != "")
        {
            possibleValues.Remove(element);
            possibleValuesModel.Remove(elemenModel);
            Msg("Deleteed");
        }
    }

    public async void AddGroupchildren()
    {
        if (childrenGroup.Name != null)
        {
            if (childrenGroup.GroupClassificationCriteria != null)
            {
                childrenGroups.Add(childrenGroup);
                childrenGroup = new();
                Msg("Added");
            }

        }

    }

    public void DeleteChildrenGroups(string value)
    {
        if (childrenGroups != null)
        {
            var remove = childrenGroups.Where(r => r.Name.Trim() == value.Trim()).FirstOrDefault();
            if (remove != null)
            {
                childrenGroups.Remove(remove);
                Msg("Deleteed");
            }

        }

    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
         viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }

    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo($"/{Page}/{filterItems}");
    }


    public async void ItemSelected(MenuEventArgs e)
    {


        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {
            transactionalItemType.TransactionalItemProcesses = transactionalItemProcessSteps;
            transactionalItemType.TransactionalItemTypeCharacteristics = transactionalItemTypeCharacteristics;
            transactionalItemType.QualityParameters = transactionalItemQualityPairs;
            transactionalItemType.InRecipeQualityModifiers = inRecipeQualityModifiers;
            transactionalItemType.Groups = childrenGroups;

            var resul = await transactionalService.SaveTransactionalItemType(null, transactionalItemType);
            Msg(resul);
            if (resul)
            {
                
                childrenGroups = new();
                transactionalItemType = new();
                inRecipeQualityModifiers = new();
                transactionalItemQualityPairs = new();
                transactionalItemTypeCharacteristics = new();
                transactionalItemProcessSteps = new();
            }
            
        }
        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }

    private void Msg(bool mode)
    {
        msg = mode?"Saved": "No saved";       
        viewMsg = true;
    }
    private void Msg( string? Msg)
    {      
        msg = Msg;
        viewMsg = true;
    }


    public class PossibleValues
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public class TransactionalItemQualityPairModel
    {
        public string Name { get; set; }
        public string Note { get; set; }
        public string Code { get; set; }
        public string Value { get; set; }
        public string DefaulValue { get; set; }
        public string Id { get; set; }
    }

}
