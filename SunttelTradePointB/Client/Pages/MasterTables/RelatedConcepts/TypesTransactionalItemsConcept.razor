@page "/TypesTransactionalItemsConcept/{Page}/{Mode}/{filterItems}"
@page "/TypesTransactionalItemsConcept/{Page}/{Mode}"
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;


<PageTitleComponent Title=" Transactional Type" IconName="TransactionalTypes.png"
                    Description="Here you can add types of transactional">
</PageTitleComponent>

<div class="flex-verical-center position-relative">
    <SfTab Height="50px">
        <TabAnimationSettings>
            <TabAnimationPrevious Effect=AnimationEffect.None></TabAnimationPrevious>
            <TabAnimationNext Effect=AnimationEffect.None></TabAnimationNext>
        </TabAnimationSettings>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Transactional Type Genaral"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">
                        <div class="grid-columns-2 box-shadow-mode">
                            <div><label>@GetName( "Name", new AtomConcept())</label></div>
                            <div><input type="text" @bind-value="transactionalItemType.Name" class="form-control" placeholder="Edit value" /></div>
                            <div><label>@GetName( "HasProductionSpecs", new TransactionalItemType())</label></div>
                            <div>
                                <SfSwitch @bind-Checked="@transactionalItemType.HasProductionSpecs"></SfSwitch>
                            </div>
                            <div><label>@GetName( "HasPackingRecipe", new TransactionalItemType())</label></div>
                            <div>
                                <SfSwitch @bind-Checked="@transactionalItemType.HasPackingRecipe"></SfSwitch>
                            </div>
                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "ChildrenGroups", new ConceptGroup())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">
                        <div class="grid-columns-2 ">
                            <div></div>
                            <div style="display:@(dataGridView?"block":"none");"> <button @onclick='()=>Closed("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-pen-to-square"></i></button></div>
                            <div style="display:@(!dataGridView?"block":"none");"> <button @onclick='()=>Open("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-list"></i></button></div>
                        </div>
                        <div style="display:@(!dataGridView?"block":"none");">
                            <div class="grid-columns-2 box-shadow-mode">
                                <div>
                                    <label>
                                        @GetName( "ChildrenGroups", new ConceptGroup())
                                    </label>
                                </div>
                                <div></div>
                                <div><label>@GetName( "Name", new AtomConcept())</label></div>
                                <div><input type="text" @bind-value="childrenGroup.Name" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "Code", new AtomConcept())</label></div>
                                <div><input type="text" @bind-value="childrenGroup.Code" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                                <div><input type="text" @bind-value="childrenGroup.Notes" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
                                <div><input type="text" @bind-value="childrenGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
                                <div></div>
                                <div> <button @onclick='AddGroupchildren' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button></div>
                            </div>
                        </div>
                        <div style="display:@(dataGridView?"block":"none");">
                            @if (transactionalItemProcessSteps == null) transactionalItemProcessSteps = new();
                            
                                <DataGrid TParameter="ConceptGroup"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="childrenGroups"
                                      GridColumnsList="gridColumnListConceptGroup"
                                      EventCallbackOnLoad="Onload"
                                      Width="800">
                                </DataGrid>                           
                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "TransactionalItemProcesses", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>

                    <SfTab Height="50px">
                        <TabAnimationSettings>
                            <TabAnimationPrevious Effect=AnimationEffect.None></TabAnimationPrevious>
                            <TabAnimationNext Effect=AnimationEffect.None></TabAnimationNext>
                        </TabAnimationSettings>
                        <TabItems>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="General"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>

                                    <div class="flex-horizontal-center">
                                        <div class="grid-columns-2 ">
                                            <div> </div>
                                            <div style="display:@(dataGridView?"flex":"none");" class="flex-horizontal-end">
                                                <button style="display:@(dataGridView?"block":"none");" @onclick='()=>AddItem("TransactionalItemProcesses")' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                                <button @onclick='()=>Closed("grid")' class="size-btn color-btn "><i class="fa-solid fa-pen-to-square"></i></button>
                                            </div>
                                            <div style="display:@(!dataGridView?"block":"none");"> <button @onclick='()=>Open("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-list"></i></button></div>
                                        </div>
                                        <div class="flex-horizontal-center   " style="display:@(!dataGridView?"flex":"none");">

                                            <div class="grid-columns-2 box-shadow-mode">
                                                <div><label>@GetName( "Name", new TransactionalItemProcessStep())</label></div>
                                                <div><input type="text" @bind-value="transactionalItemProcessStep.Name" class="form-control" placeholder="Edit value" /></div>
                                                <div><label>@GetName( "GeneralInstructions", new TransactionalItemProcessStep())</label></div>
                                                <div> <textarea style="resize:false;" @bind="transactionalItemProcessStep.GeneralInstructions" class="form-control" placeholder="Edit value"></textarea></div>
                                                <div><label>@GetName( "Cost", new TransactionalItemProcessStep())</label></div>
                                                <div><input type="number" @bind-value="transactionalItemProcessStep.Cost" class="form-control" placeholder="Edit value" /></div>
                                                <div><label>@GetName( "Order", new TransactionalItemProcessStep())</label></div>
                                                <div><input type="number" @bind-value="transactionalItemProcessStep.Order" class="form-control" placeholder="Edit value" /></div>
                                            </div>

                                        </div>
                                        <div class="flex-horizontal-center " style="display:@(dataGridView?"block":"none");">

                                            @if (transactionalItemProcessSteps == null) { transactionalItemProcessSteps = new List<TransactionalItemProcessStep>(); }


                                            <DataGrid TParameter="TransactionalItemProcessStep"
                                                      EventCallbackMenu="OnContextMenuClick"
                                                      parameterList="transactionalItemProcessSteps"
                                                      GridColumnsList="gridColumnList"
                                                      EventCallbackOnLoad="Onload">
                                            </DataGrid>



                                        </div>
                                    </div>
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="@GetName( "TransactionalItemProcessTags", new TransactionalItemProcessStep())"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    <div class="flex-horizontal-center">
                                        <div class="grid-columns-2 ">
                                            <div></div>
                                            <div style="display:@(dataGridView?"block":"none");"> <button @onclick='()=>Closed("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-pen-to-square"></i></button></div>
                                            <div style="display:@(!dataGridView?"block":"none");"> <button @onclick='()=>Open("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-list"></i></button></div>
                                        </div>
                                        <div style="display:@(!dataGridView?"block":"none");">
                                            <div class="grid-columns-2 box-shadow-mode">
                                                <div><label>@GetName( "Key", new TransactionalItemTag())</label></div>
                                                <div><input type="text" @bind-value="transactionalItemProcessTag.Key" class="form-control" placeholder="Edit value" /></div>
                                                <div><label>@GetName( "Value", new TransactionalItemTag())</label></div>
                                                <div><input type="text" @bind-value="transactionalItemProcessTag.Value" class="form-control" placeholder="Edit value" /></div>
                                                <div></div>
                                                <div> <button @onclick='AddTag' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button></div>
                                            </div>
                                        </div>
                                        <div style="display:@(dataGridView?"block":"none");">
                                            @if (transactionalItemProcessTags == null) transactionalItemProcessTags= new();
                                           
                                                <DataGrid TParameter="TransactionalItemTag"
                                                      EventCallbackMenu="OnContextMenuClick"
                                                      parameterList="transactionalItemProcessTags"
                                                      GridColumnsList="gridColumnListProcessTag"
                                                      EventCallbackOnLoad="Onload"
                                                      Width="800">
                                                </DataGrid>
                                           
                                        </div>

                                    </div>
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </ContentTemplate>
            </TabItem>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "TransactionalItemTypeCharacteristics", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>

                    <div class="flex-horizontal-center   ">
                        <div class="grid-columns-2 ">
                            <div></div>
                            <div style="display:@(dataGridView?"flex":"none");" class="flex-horizontal-end">
                                <button @onclick='()=>AddItem("TransactionalItemTypeCharacteristics")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                <button @onclick='()=>Closed("grid")' class="size-btn color-btn "><i class="fa-solid fa-pen-to-square"></i></button>
                            </div>
                            <div style="display:@(!dataGridView?"block":"none");"> <button @onclick='()=>Open("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-list"></i></button></div>
                        </div>
                        <div style="display:@(!dataGridView?"block":"none");">

                            <div class="grid-columns-2 box-shadow-mode">
                                <div><label>@GetName( "Name", new TransactionalItemTypeCharacteristic())</label></div>
                                <div><input type="text" @bind-value="transactionalItemTypeCharacteristic.Name" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "PossibleValues", new TransactionalItemTypeCharacteristic())</label></div>
                                <div><input type="text" @bind-value="possibleValue" class="form-control" placeholder="Edit value" /></div>
                                <div></div>
                                <div> <button @onclick='AddPossibleValue' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button></div>
                            </div>
                            <div class="content-item-grid">
                                @{
                                    if (possibleValues != null)
                                    {
                                        foreach (string Elemen in possibleValues)
                                        {
                                            <div class="tagItem">
                                                <p>@Elemen</p>
                                                <input type="button" class="delete color-btn" @onclick="()=>DeletePossibleValue(Elemen)" value="X" />
                                            </div>

                                        }
                                    }

                                }
                            </div>
                        </div>
                        <div style="display:@(dataGridView?"flex":"none");">

                            @if (transactionalItemProcessTags == null) transactionalItemProcessTags = new();
                         
                                <DataGrid TParameter="TransactionalItemTypeCharacteristic"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="transactionalItemTypeCharacteristics"
                                      GridColumnsList="gridColumnListCharacteristic"
                                      EventCallbackOnLoad="Onload"
                                      Width="400">
                                </DataGrid>
                           
                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "QualityParameters",new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">
                        <div class="grid-columns-2 ">
                            <div></div>
                            <div style="display:@(dataGridView?"flex":"none");" class="flex-horizontal-end">
                                <button @onclick='()=>AddItem("QualityParameters")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                <button @onclick='()=>Closed("grid")' class="size-btn color-btn "><i class="fa-solid fa-pen-to-square"></i></button>
                            </div>
                            <div style="display:@(!dataGridView?"block":"none");"> <button @onclick='()=>Open("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-list"></i></button></div>
                        </div>
                        <div style="display:@(!dataGridView?"block":"none");">
                            <div class="grid-columns-2 box-shadow-mode">
                                <div><label>@GetName( "Name", new AtomConcept())</label></div>
                                <div><input type="text" @bind-value="transactionalItemQuality.Name" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "Code", new AtomConcept())</label></div>
                                <div><input type="text" @bind-value="transactionalItemQuality.Code" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                                <div><input type="text" @bind-value="transactionalItemQuality.Notes" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "Value", new TransactionalItemQualityPair())</label></div>
                                <div><input type="text" @bind-value="transactionalItemQualityPair.Value" class="form-control" placeholder="Edit value" /></div>
                                <div><label>@GetName( "DefaultValue", new TransactionalItemQuality())</label></div>
                                <div><input type="text" @bind-value="transactionalItemQuality.DefaultValue" class="form-control" placeholder="Edit value" /></div>
                            </div>
                        </div>

                        <div style="display:@(dataGridView?"block":"none");">

                            @if (transactionalItemQualityPairs == null) transactionalItemQualityPairs = new();

                            <DataGrid TParameter="TransactionalItemQualityPair"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="transactionalItemQualityPairs"
                                      GridColumnsList="gridColumnListQualityPair"
                                      EventCallbackOnLoad="Onload"
                                      Width="400px">

                            </DataGrid>
                           


                        </div>
                    </div>

                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("InRecipeQualityModifiers", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">
                        <div class="grid-columns-2">
                            <div></div>
                            <div style="display:@(dataGridView?"block":"none");">
                                <button @onclick='()=>AddItem("InRecipeQualityModifiers")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                <button @onclick='()=>Closed("grid")' class="size-btn color-btn "><i class="fa-solid fa-pen-to-square"></i></button>
                            </div>
                            <div style="display:@(!dataGridView?"block":"none");"> <button @onclick='()=>Open("grid")' class="size-btn color-btn margin-left"><i class="fa-solid fa-list"></i></button></div>
                        </div>
                        <div class="flex-horizontal-center" style="display:@(!dataGridView?"flex":"none");">
                            <div class="grid-columns-2 box-shadow-mode">
                                <div><label>@GetName( "Name", new ProductRecipeQualityModifier())</label></div>
                                <div><input type="text" @bind-value="inRecipeQualityModifier.Name" class="form-control" placeholder="Edit value" /></div>
                            </div>
                        </div>

                        <div style="display:@(dataGridView?"flex":"none");">

                            @if (inRecipeQualityModifiers == null) inRecipeQualityModifiers= new();                           

                            <DataGrid TParameter="ProductRecipeQualityModifier"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="inRecipeQualityModifiers"
                                      GridColumnsList="gridColumnListModifier"
                                      EventCallbackOnLoad="Onload"
                                      Width="400px">

                            </DataGrid>
                           

                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>



    <div class=" div-btn flex-horizontal-end">
        <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
        <button @onclick='Save' class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
    </div>

</div>

@code {
    [Parameter]
    public string Page { get; set; } = "";
    [Parameter]
    public string Mode { get; set; } = "Add";
    [Parameter]
    public string filterItems { get; set; } = "";
    public TransactionalItemType transactionalItemType = new();
    public List<ConceptGroup> childrenGroups = new();
    public ConceptGroup childrenGroup = new();
    public TransactionalItemProcessStep transactionalItemProcessStep = new();
    public List<TransactionalItemProcessStep> transactionalItemProcessSteps = new();
    public TransactionalItemTag transactionalItemProcessTag = new();
    public List<TransactionalItemTag> transactionalItemProcessTags = new();
    public List<TransactionalItemTypeCharacteristic> transactionalItemTypeCharacteristics = new();
    public TransactionalItemTypeCharacteristic transactionalItemTypeCharacteristic = new();
    public List<TransactionalItemQualityPair> transactionalItemQualityPairs = new();
    public TransactionalItemQualityPair transactionalItemQualityPair = new();
    public TransactionalItemQuality transactionalItemQuality = new();
    public List<ProductRecipeQualityModifier> inRecipeQualityModifiers = new();
    public ProductRecipeQualityModifier inRecipeQualityModifier = new();
    public List<ConceptGroup>? Groups = new();

    public List<GridColumn> gridColumnList = new();
    public List<GridColumn> gridColumnListQualityPair = new();
    public List<GridColumn> gridColumnListConceptGroup = new();
    public List<GridColumn> gridColumnListProcessTag = new();
    public List<GridColumn> gridColumnListCharacteristic = new();
    public List<GridColumn> gridColumnListModifier = new();



    public bool isLoading = false, dataGridView = true;
    public List<string> possibleValues = new();
    public string possibleValue = "";

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (Mode == "Edit")
        {
            transactionalItemType = transactionalService.ConceptTransactionalItemType;
            transactionalItemProcessSteps = transactionalItemType.TransactionalItemProcesses;
            childrenGroups = transactionalItemType.Groups;
            transactionalItemTypeCharacteristics = transactionalItemType.TransactionalItemTypeCharacteristics ;
            transactionalItemQualityPairs = transactionalItemType.QualityParameters;
            inRecipeQualityModifiers = transactionalItemType.InRecipeQualityModifiers;

        }
        if (Mode == "Add")
        {
            transactionalItemType = new();
        }


        gridColumnList = new List<GridColumn>()
        {
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Name), HeaderText = GetName("Name", new TransactionalItemProcessStep())  },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.GeneralInstructions), HeaderText = GetName("GeneralInstructions", new TransactionalItemProcessStep()) },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Cost), HeaderText = GetName("Cost", new TransactionalItemProcessStep()) },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Order), HeaderText = GetName("Order", new TransactionalItemProcessStep()) }

        };

        gridColumnListQualityPair = new List<GridColumn>
        {
             new GridColumn() { Field = nameof(TransactionalItemQualityPair.Value), HeaderText = GetName("Name", new TransactionalItemQualityPair())  }
        };

        gridColumnListConceptGroup = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(ConceptGroup.Name), HeaderText = GetName("Name", new ConceptGroup())  },
            new GridColumn() { Field = nameof(ConceptGroup.Code), HeaderText = GetName("Code", new ConceptGroup()) , Width="120" },
            new GridColumn() { Field = nameof(ConceptGroup.GroupClassificationCriteria), HeaderText = GetName("GroupClassificationCriteria", new ConceptGroup()) }
        };
        gridColumnListProcessTag = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(TransactionalItemTag.Key), HeaderText = GetName("Name", new TransactionalItemTag())  },
            new GridColumn() { Field = nameof(TransactionalItemTag.Value), HeaderText = GetName("Code", new TransactionalItemTag())  },

        };
        gridColumnListCharacteristic = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(TransactionalItemTypeCharacteristic.Name), HeaderText = GetName("Name", new TransactionalItemTypeCharacteristic())  }

        };

        gridColumnListModifier = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(ProductRecipeQualityModifier.Name), HeaderText = GetName("Name", new ProductRecipeQualityModifier())  }

        };





    }


    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo($"/{Page}/{filterItems}");
        if (value == "grid") dataGridView = false;
    }
    public void Open(string value)
    {
        if (value == "grid") dataGridView = true;
    }

    public async void Save()
    {
        transactionalItemType.CreationTime = DateTime.UtcNow;
        transactionalItemType.LastModifiedTime = DateTime.UtcNow;
        transactionalItemType.TransactionalItemProcesses = transactionalItemProcessSteps;
        transactionalItemType.TransactionalItemTypeCharacteristics = transactionalItemTypeCharacteristics;
        transactionalItemType.QualityParameters = transactionalItemQualityPairs;
        transactionalItemType.InRecipeQualityModifiers = inRecipeQualityModifiers;
        transactionalItemType.Groups = childrenGroups;

        var resul = await transactionalService.SaveTransactionalItemType(null, transactionalItemType);
        if (resul)
        {
            childrenGroups = new();
            transactionalItemType = new();
            inRecipeQualityModifiers = new();
            transactionalItemQualityPairs = new();
            transactionalItemTypeCharacteristics = new();
            transactionalItemProcessSteps = new();
        }
    }


    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemQualityPair> args)
    {
        TransactionalItemQualityPair ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        transactionalItemQualityPair = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = true;
        }
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemProcessStep> args)
    {
        TransactionalItemProcessStep ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        transactionalItemProcessStep = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = true;
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<ConceptGroup> args)
    {
        ConceptGroup ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        childrenGroup = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = true;
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemTag> args)
    {
        TransactionalItemTag ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        transactionalItemProcessTag = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = true;
        }
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemTypeCharacteristic> args)
    {
        TransactionalItemTypeCharacteristic ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        transactionalItemTypeCharacteristic = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = true;
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<ProductRecipeQualityModifier> args)
    {
        ProductRecipeQualityModifier ObjModel = null;
        ObjModel = args.RowInfo.RowData;
        inRecipeQualityModifier = ObjModel;
        if (args.Item.Id == "Edit")
        {
            dataGridView = true;
        }
    }



    public void AddItem(string value)
    {
        if (value == "TransactionalItemProcesses")
        {
            if (transactionalItemProcessSteps == null) transactionalItemProcessSteps = new();
            transactionalItemProcessStep.TransactionalItemProcessTags = transactionalItemProcessTags;
            transactionalItemProcessSteps.Add(transactionalItemProcessStep);
            transactionalItemProcessStep = new();
            transactionalItemProcessTags = new();
        }
        if (value == "TransactionalItemTypeCharacteristics")
        {
            if (transactionalItemTypeCharacteristics == null) transactionalItemTypeCharacteristics = new();
            transactionalItemTypeCharacteristic.PossibleValues = possibleValues;
            transactionalItemTypeCharacteristics.Add(transactionalItemTypeCharacteristic);
            transactionalItemTypeCharacteristic = new();
            possibleValues = new();
        }
        if (value == "QualityParameters")
        {
            if (transactionalItemQualityPairs == null) transactionalItemQualityPairs = new();
            transactionalItemQualityPair.TransactionalItemQuality = transactionalItemQuality;
            transactionalItemQualityPairs.Add(transactionalItemQualityPair);
            transactionalItemQualityPair = new();
            transactionalItemQuality = new();
        }
        if (value == "InRecipeQualityModifiers")
        {
            if (inRecipeQualityModifiers == null) inRecipeQualityModifiers = new();
            inRecipeQualityModifiers.Add(inRecipeQualityModifier);
            inRecipeQualityModifier = new();
        }


    }



    public void Onload(object args)
    {
        isLoading = false;
        StateHasChanged();
    }

    public void AddTag()
    {
        if (transactionalItemProcessTag.Key != null)
        {
            if (transactionalItemProcessTag.Value != null)
            {
                transactionalItemProcessTags.Add(transactionalItemProcessTag);
                transactionalItemProcessTag = new();
            }
        }

    }

    public void DeleteTag(string value)
    {
        var tag = transactionalItemProcessTags.Where(r => r.Key == value).FirstOrDefault();
        transactionalItemProcessTags.Remove(tag);
    }


    public void AddPossibleValue()
    {
        if (possibleValue != null && possibleValue != "")
        {
            possibleValues.Add(possibleValue);
            possibleValue = "";
        }
    }

    public void DeletePossibleValue(string value)
    {
        var element = possibleValues.Where(e => e.Trim() == value.Trim()).FirstOrDefault();
        if (element != null && possibleValue != null && possibleValue != "")
        {
            possibleValues.Remove(element);
        }
    }


    public async void AddGroupchildren()
    {
        if (childrenGroup.Name != null)
        {
            if (childrenGroup.GroupClassificationCriteria != null)
            {
                childrenGroups.Add(childrenGroup);
                childrenGroup = new();
            }

        }

    }

    public void DeleteChildrenGroups(string value)
    {
        if (childrenGroups != null)
        {
            var remove = childrenGroups.Where(r => r.Name.Trim() == value.Trim()).FirstOrDefault();
            if (remove != null)
            {
                childrenGroups.Remove(remove);
            }

        }

    }


    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


}
