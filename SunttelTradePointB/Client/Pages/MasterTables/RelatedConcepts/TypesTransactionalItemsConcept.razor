@page "/TypesTransactionalItemsConcept/{Page}/{Mode}/{filterItems}"
@page "/TypesTransactionalItemsConcept/{Page}/{Mode}"
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using SunttelTradePointB.Client.Shared.Menus
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.SplitButtons
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;




<div class="flex-verical-center position-relative" style="display:@(!modeEdit?"flex":"none");">

    @if (@viewMsg)
    {
        <MessageSaveComponent isVisible="viewMsg" message="@msg">
        </MessageSaveComponent>
    }

    @if (pageView == "ChildrenGroups")
    {
        <PageTitleComponent Title=" Children Groups" IconName="group.png"
                        Description="Here you can add types of Children Groups">
        </PageTitleComponent>
        <div class="flex-horizontal-center">
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div>
                    <label>
                        @GetName( "ChildrenGroups", new ConceptGroup())
                    </label>
                </div>
                <div></div>
                <div><label>@GetName( "Name", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="childrenGroup.Name" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Code", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="childrenGroup.Code" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="childrenGroup.Notes" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "GroupClassificationCriteria", new ConceptGroup())</label></div>
                <div><input type="text" @bind-value="childrenGroup.GroupClassificationCriteria" class="form-control" placeholder="Edit value" /></div>
                <div></div>
                <div class="flex-horizontal-end">
                    <button @onclick='()=>OpenAdd("ChildrenGroups")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='AddGroupchildren' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>
    }

    @if (pageView == "TransactionalItemProcessesGeneral")
    {
        <PageTitleComponent Title=" Processes General"
                        Description="Here you can add processes general">
        </PageTitleComponent>

        <div class="container-menu-g">
            <nav>
                <button @onclick='()=>OpenAdd("ProcessTag")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>


                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected_1">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>

            </nav>
        </div>

        <div class="grid-columns-header ">
            <div><label>@GetName( "Name", new TransactionalItemProcessStep())</label></div>
            <div><input type="text" @bind-value="transactionalItemProcessStep.Name" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "GeneralInstructions", new TransactionalItemProcessStep())</label></div>
            <div> <textarea style="resize:false; height:40px;" @bind="transactionalItemProcessStep.GeneralInstructions" class="form-control" placeholder="Edit value"></textarea></div>
            <div><label>@GetName( "Cost", new TransactionalItemProcessStep())</label></div>
            <div><input type="number" @bind-value="transactionalItemProcessStep.Cost" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "Order", new TransactionalItemProcessStep())</label></div>
            <div><input type="number" @bind-value="transactionalItemProcessStep.Order" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "HolidayDayCost", new TransactionalItemProcessStep())</label></div>
            <div><input type="number" @bind-value="transactionalItemProcessStep.HolidayDayCost" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "Name", new ChargeableUnitsType())</label></div>
            <div><input type="text" @bind-value="typeOfComponentsToCharge.Name" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "Name", new BasicConcept())</label></div>
            <div><input type="text" @bind-value="processType.Name" class="form-control" placeholder="Edit value" /></div>
        </div>


        <SfTab Height="300px" HeaderPlacement="HeaderPosition.Left">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "TransactionalItemProcessTags", new TransactionalItemProcessStep())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="flex-horizontal-center ">
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "TransactionalItemProcessTags", new TransactionalItemProcessStep())</h3>
                                <svg @onclick='()=>ClosedAdd("TransactionalItemProcessestags")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>
                            @if (transactionalItemProcessTags == null) transactionalItemProcessTags = new();

                            <DataGrid TParameter="TransactionalItemTag"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="transactionalItemProcessTags"
                                  GridColumnsList="gridColumnListProcessTag"
                                  EventCallbackOnLoad="Onload"
                                  Width="100%">
                            </DataGrid>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "CostExceptionsByQuantity", new TransactionalItemProcessStep())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>

                        <div class="flex-horizontal-center ">

                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "CostExceptionsByQuantity", new TransactionalItemProcessStep())</h3>
                                <svg @onclick='()=>ClosedAdd("CostExceptionsByQuantityProcessStep")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>
                            @if (costExceptionsByQuantitys == null) costExceptionsByQuantitys = new();

                            <DataGrid TParameter="CostExceptionByQuantity"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="costExceptionsByQuantitys"
                                  GridColumnsList="gridColumnListByQuantity"
                                  EventCallbackOnLoad="Onload"
                                  Width="100%">
                            </DataGrid>
                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>


    }

    @if (pageView == "TransactionalItemProcessestags")
    {
        <PageTitleComponent Title="Children Tag "
                        Description="Here you can add children tag">
        </PageTitleComponent>

        <div class="flex-horizontal-center">

            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div><label>@GetName( "Key", new TransactionalItemTag())</label></div>
                <div><input type="text" @bind-value="transactionalItemProcessTag.Key" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Value", new TransactionalItemTag())</label></div>
                <div><input type="text" @bind-value="transactionalItemProcessTag.Value" class="form-control" placeholder="Edit value" /></div>
                <div></div>
                <div class="flex-horizontal-end">
                    <button @onclick='()=>ClosedAdd("TransactionalItemProcessesGeneral")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>AddItem("TransactionalItemProcessesTag")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>

                </div>
            </div>
        </div>

    }

    @if (pageView == "CostExceptionsByQuantityProcessStep")
    {
        <PageTitleComponent Title="@GetName( "CostExceptionsByQuantity", new TransactionalItemProcessStep())"
                        Description="@($"Here you can add {@GetName( "CostExceptionsByQuantity", new TransactionalItemProcessStep())}")">
        </PageTitleComponent>

        <div class="flex-horizontal-center">

            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div><label>@GetName( "MinimumQty", new CostExceptionByQuantity())</label></div>
                <div><input type="number" @bind-value="costExceptionsByQuantity.MinimumQty" class="form-control" placeholder="Edit value" autocomplete="off" autofocus /></div>
                <div><label>@GetName( "MaximumQty", new CostExceptionByQuantity())</label></div>
                <div><input type="number" @bind-value="costExceptionsByQuantity.MaximumQty" class="form-control" placeholder="Edit value" autocomplete="off" /></div>

                <div></div>
                <div class="flex-horizontal-end">
                    <button @onclick='()=>ClosedAdd("TransactionalItemProcessesGeneral")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>AddItem("CostExceptionsByQuantityProcessStep")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>

    }

    @if (pageView == "TransactionalItemTypeCharacteristics")
    {
        <PageTitleComponent Title="@GetName( "TransactionalItemTypeCharacteristics", new TransactionalItemType())"
                        Description="@("Here you can add "+@GetName( "TransactionalItemTypeCharacteristics", new TransactionalItemType()) )">
        </PageTitleComponent>

        <div class="container-menu-g">
            <nav>
                <button @onclick='()=>OpenAdd("TransactionalItemTypeCharacteristics")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected_2">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>
            </nav>
        </div>

        <div class="grid-columns-header ">
            <div><label>@GetName( "Name", new TransactionalItemTypeCharacteristic())</label></div>
            <div><input type="text" @bind-value="transactionalItemTypeCharacteristic.Name" class="form-control" placeholder="Edit value" /></div>
        </div>
        <div class="detailsTitleContainer">
            <h3 class="subTitleDetailForm">@GetName( "PossibleValues", new TransactionalItemTypeCharacteristic())</h3>
            <svg @onclick='()=>ClosedAdd("PossibleValues")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
            </svg>
        </div>

        <div class="flex-horizontal-center ">
            <DataGrid TParameter="TransactionalItemCharacteristic"
                  EventCallbackMenu="OnContextMenuClick"
                  parameterList="possibleValues"
                  GridColumnsList="gridColumnListPossibleValues"
                  Width="100%">
            </DataGrid>
        </div>




    }

    @if (pageView == "PossibleValues")
    {
        <PageTitleComponent Title="@GetName( "PossibleValues", new TransactionalItemTypeCharacteristic())"
                        Description="@("Here you can add "+@GetName( "PossibleValues", new TransactionalItemTypeCharacteristic()) )">
        </PageTitleComponent>
        <div class="flex-horizontal-center ">

            <div class="grid-columns-2 box-shadow-mode">
                <div><span class="c-red">*</span><label>@GetName( "Name", new TransactionalItemCharacteristic())</label></div>
                <div><input type="text" @bind-value="possibleValue.Name" class="form-control" placeholder="Edit value" /></div>
                <div><span class="c-red">*</span><label>@GetName( "IsEnabled", new TransactionalItemCharacteristic())</label></div>
                <div>
                    <SfSwitch @bind-Checked="@possibleValue.IsEnabled"></SfSwitch>
                </div>
                <div><span class="c-red">*</span><label>@GetName( "AdditionalDescription", new TransactionalItemCharacteristic())</label></div>
                <div><input type="text" @bind-value="possibleValue.AdditionalDescription" class="form-control" placeholder="Edit value" /></div>
                <div></div>
                <div>
                    <button @onclick='()=>ClosedAdd("TransactionalItemTypeCharacteristics")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='AddPossibleValue' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
            <br>
        </div>


    }

    @if (pageView == "QualityParameters")
    {
        <PageTitleComponent Title="Quality Parameters "
                        Description="Here you can add quality parameters">
        </PageTitleComponent>
        <div class="flex-horizontal-center ">
            <div class="grid-columns-2 box-shadow-mode">

                <div><label><span class="c-red">*</span> @GetName( "Name", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="transactionalItemQuality.Name" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Code", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="transactionalItemQuality.Code" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "Notes", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="transactionalItemQuality.Notes" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "DefaultValue", new TransactionalItemQuality())</label></div>
                <div><input type="text" @bind-value="transactionalItemQuality.DefaultValue" class="form-control" placeholder="Edit value" /></div>
                <div><label>@GetName( "AdditionalDescription", new TransactionalItemQuality())</label></div>
                <textarea @bind="transactionalItemQuality.AdditionalDescription" class="form-control" placeholder="Edit value"></textarea>
                <div></div>
                <div>
                    <button @onclick='()=>OpenAdd("QualityParameters")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>AddItem("QualityParameters")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>
    }

    @if (pageView == "InRecipeModifiers")
    {
        <PageTitleComponent Title="@GetName("InRecipeModifiers", new TransactionalItemType())"
                        Description="@($"Here you can add {GetName("InRecipeModifiers", new TransactionalItemType()).ToLower()}")">
        </PageTitleComponent>
        <div class="container-menu-g">
            <nav>
                <button @onclick='()=>OpenAdd("InRecipeQualityModifiers")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected_3">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>
            </nav>
        </div>
        <div class="grid-columns-header ">
            <div><label>@GetName( "Name", new RecipeModifier())</label></div>
            <div><input type="text" @bind-value="inRecipeModifier.Name" class="form-control" placeholder="Edit value" /></div>
        </div>
        <div class="flex-horizontal-center">

            <div class="detailsTitleContainer">
                <h3 class="subTitleDetailForm">@GetName("RecipePossibleModifierValues", new RecipeModifier())</h3>
                <svg @onclick='()=>ClosedAdd("RecipePossibleModifierValues")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                </svg>
            </div>


            @if (recipePossibleModifierValues == null) recipePossibleModifierValues = new();

            <DataGrid TParameter="ProductRecipeQualityModifier"
                  EventCallbackMenu="OnContextMenuClick"
                  parameterList="recipePossibleModifierValues"
                  GridColumnsList="gridColumnListPossibleModifierValues"
                  EventCallbackOnLoad="Onload"
                  Width="100%">

            </DataGrid>


        </div>


    }

    @if (pageView == "RecipePossibleModifierValues")
    {
        <PageTitleComponent Title="@GetName("RecipePossibleModifierValues", new RecipeModifier())"
                        Description="Here you can add quality parameters">
        </PageTitleComponent>
        <div class="flex-horizontal-center ">
            <div class="grid-columns-2 box-shadow-mode">

                <div><label><span class="c-red">*</span> @GetName( "Name", new AtomConcept())</label></div>
                <div><input type="text" @bind-value="recipePossibleModifierValue.Name" class="form-control" placeholder="Edit value" /></div>
                <div></div>
                <div>
                    <button @onclick='()=>ClosedAdd("InRecipeModifiers")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>AddItem("RecipePossibleModifierValues")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>
    }

</div>


<div class="flex-verical-center position-relative" style="display:@(modeEdit?"flex":"none");">
    @if (@viewMsg)
    {
        <MessageSaveComponent isVisible="viewMsg" message="@msg">
        </MessageSaveComponent>
    }

    <PageTitleComponent Title=" Transactional Type" IconName="TransactionalTypes.png"
                        Description="Here you can add types of transactional">
    </PageTitleComponent>

    <div class="container-menu-g">
        <nav>
            <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
            <div class="div-alert-save">
                <p style="display:@(requiereSave?"block":"none");" class="msg-save">¡ Require save !</p>
                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>
            </div>
        </nav>
    </div>

    <div class="grid-columns-header ">
        <div><label>@GetName( "Name", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="transactionalItemType.Name" class="form-control" placeholder="Edit value" /></div>
        <div><label>@GetName( "Code", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="transactionalItemType.Code" class="form-control" placeholder="Edit value" /></div>
         <div><label>@GetName( "Notes", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="transactionalItemType.Notes" class="form-control" placeholder="Edit value" /></div>
        <div><label>@GetName( "HasProductionSpecs", new TransactionalItemType())</label></div>
        <div>
            <SfSwitch @bind-Checked="@transactionalItemType.HasProductionSpecs"></SfSwitch>
        </div>
        <div><label>@GetName( "HasPackingRecipe", new TransactionalItemType())</label></div>
        <div>
            <SfSwitch @bind-Checked="@transactionalItemType.HasPackingRecipe"></SfSwitch>
        </div>
    </div>



    <SfTab Height="400px" HeaderPlacement="HeaderPosition.Left">
        <TabAnimationSettings>
            <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
            <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
        </TabAnimationSettings>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "ChildrenGroups", new ConceptGroup())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">

                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">@GetName( "ChildrenGroups", new ConceptGroup())</h3>
                            <svg @onclick='()=>ClosedAdd("ChildrenGroups")' title="Add new tag" style="margin-left:20px;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </div>

                        @if (gridColumnListConceptGroup == null) gridColumnListConceptGroup = new();

                        <DataGrid TParameter="ConceptGroup"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="childrenGroups"
                                  GridColumnsList="gridColumnListConceptGroup"
                                  EventCallbackOnLoad="Onload"
                                  Width="100%">
                        </DataGrid>

                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "TransactionalItemProcesses", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">
                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">@GetName( "TransactionalItemProcesses", new TransactionalItemType())</h3>
                            <svg @onclick='()=>ClosedAdd("TransactionalItemProcessesGeneral")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </div>

                        @if (transactionalItemProcessSteps == null) { transactionalItemProcessSteps = new List<TransactionalItemProcessStep>(); }


                        <DataGrid TParameter="TransactionalItemProcessStep"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="transactionalItemProcessSteps"
                                  GridColumnsList="gridColumnList"
                                  EventCallbackOnLoad="Onload"
                                  Width="100%">
                        </DataGrid>



                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "TransactionalItemTypeCharacteristics", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>

                    <div class="flex-horizontal-center   ">
                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">Characteristics</h3>
                            <svg @onclick='()=>ClosedAdd("TransactionalItemTypeCharacteristics")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </div>
                        @if (transactionalItemTypeCharacteristics == null) transactionalItemTypeCharacteristics = new();

                        <DataGrid TParameter="TransactionalItemTypeCharacteristic"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="transactionalItemTypeCharacteristics"
                                  GridColumnsList="gridColumnListCharacteristic"
                                  EventCallbackOnLoad="Onload"
                                  Width="100%">
                        </DataGrid>

                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName( "QualityParameters",new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">

                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">@GetName( "QualityParameters",new TransactionalItemType())</h3>
                            <svg @onclick='()=>ClosedAdd("QualityParameters")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </div>

                        @if (transactionalItemQualitys == null) transactionalItemQualitys = new();

                        <DataGrid TParameter="TransactionalItemQuality"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="transactionalItemQualitys"
                                  GridColumnsList="gridColumnListQualityPair"
                                  EventCallbackOnLoad="Onload"
                                  Width="970px">
                        </DataGrid>

                    </div>

                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("InRecipeModifiers", new TransactionalItemType())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="flex-horizontal-center">

                        <div class="detailsTitleContainer">
                            <h3 class="subTitleDetailForm">@GetName("InRecipeModifiers", new TransactionalItemType())</h3>
                            <svg @onclick='()=>ClosedAdd("InRecipeModifiers")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                            </svg>
                        </div>


                        @if (inRecipeModifiers == null) inRecipeModifiers = new();

                        <DataGrid TParameter="RecipeModifier"
                                  EventCallbackMenu="OnContextMenuClick"
                                  parameterList="inRecipeModifiers"
                                  GridColumnsList="gridColumnListModifier"
                                  EventCallbackOnLoad="Onload"
                                  Width="100%">

                        </DataGrid>


                    </div>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>

</div>

@code {
    [Parameter]
    public string Page { get; set; } = "";
    [Parameter]
    public string Mode { get; set; } = "Add";
    [Parameter]
    public string filterItems { get; set; } = "";

    bool requiereSave = false;

    public TransactionalItemType transactionalItemType = new();
    public List<ConceptGroup> childrenGroups = new();
    public ConceptGroup childrenGroup = new();
    public TransactionalItemProcessStep transactionalItemProcessStep = new();
    public List<TransactionalItemProcessStep> transactionalItemProcessSteps = new();
    public List<TransactionalItemTag> transactionalItemProcessTags = new();
    public TransactionalItemTag transactionalItemProcessTag = new();
    public List<CostExceptionByQuantity> costExceptionsByQuantitys = new();
    public CostExceptionByQuantity costExceptionsByQuantity = new();
    public ChargeableUnitsType typeOfComponentsToCharge = new();
    public BasicConcept processType = new();
    public List<TransactionalItemTypeCharacteristic> transactionalItemTypeCharacteristics = new();
    public TransactionalItemTypeCharacteristic transactionalItemTypeCharacteristic = new();
    public List<TransactionalItemQuality> transactionalItemQualitys = new();
    public TransactionalItemQuality transactionalItemQuality = new();
    public List<ProductRecipeQualityModifier> recipePossibleModifierValues = new();
    public ProductRecipeQualityModifier recipePossibleModifierValue = new();
    public List<RecipeModifier> inRecipeModifiers = new();
    public RecipeModifier inRecipeModifier = new();

    //public List<ProductRecipeQualityModifier> recipePossibleModifierValues = new();
    //public ProductRecipeQualityModifier recipePossibleModifierValue = new();
    public List<ConceptGroup>? Groups = new();

    public DataGrid<TransactionalItemCharacteristic> referGrid;

    public List<GridColumn> gridColumnList = new();
    public List<GridColumn> gridColumnListQualityPair = new();
    public List<GridColumn> gridColumnListConceptGroup = new();
    public List<GridColumn> gridColumnListProcessTag = new();
    public List<GridColumn> gridColumnListCharacteristic = new();
    public List<GridColumn> gridColumnListModifier = new();
    public List<GridColumn> gridColumnListPossibleValues = new();
    public List<GridColumn> gridColumnListByQuantity = new();
    public List<GridColumn> gridColumnListPossibleModifierValues = new();



    public bool isLoading = false, dataGridView = true, modeEdit = true, viewMsg = false;
    //public List<PossibleValues> possibleValuesModel = new();
    public List<TransactionalItemCharacteristic> possibleValues = new();
    public TransactionalItemCharacteristic possibleValue = new();
    string msg = "";
    string pageView = "";

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (Mode == "Edit")
        {
            if (transactionalService.ConceptTransactionalItemType != null)
            {
                transactionalItemType = transactionalService.ConceptTransactionalItemType;
                transactionalItemProcessSteps = transactionalItemType.TransactionalItemProcesses;
                childrenGroups = transactionalItemType.Groups;
                transactionalItemTypeCharacteristics = transactionalItemType.TransactionalItemTypeCharacteristics;
                transactionalItemQualitys = transactionalItemType.QualityParameters;
                inRecipeModifiers = transactionalItemType.InRecipeModifiers;
            }
            else
            {
                Closed("control");
            }


        }
        if (Mode == "Add")
        {
            transactionalItemType = new();
        }


        #region Column
        gridColumnList = new List<GridColumn>()
        {
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Name), HeaderText = GetName("Name", new TransactionalItemProcessStep())  },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.GeneralInstructions), HeaderText = GetName("GeneralInstructions", new TransactionalItemProcessStep()) },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Cost), HeaderText = GetName("Cost", new TransactionalItemProcessStep()) },
            new GridColumn() { Field = nameof(TransactionalItemProcessStep.Order), HeaderText = GetName("Order", new TransactionalItemProcessStep()) }

        };

        gridColumnListQualityPair = new List<GridColumn>
        {
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Name), HeaderText = GetName("Name", new AtomConcept())  },
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Code), HeaderText = GetName("Code", new AtomConcept())  },
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Note), HeaderText = GetName("Note", new AtomConcept())  },
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Value), HeaderText = GetName("Value", new TransactionalItemQualityPair())  },
             new GridColumn() { Field = nameof(TransactionalItemQualityPairModel.Code), HeaderText = GetName("DefaultValue", new TransactionalItemQuality())  },
        };

        gridColumnListConceptGroup = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(ConceptGroup.Name), HeaderText = GetName("Name", new ConceptGroup()) , Width="300" },
            new GridColumn() { Field = nameof(ConceptGroup.Code), HeaderText = GetName("Code", new ConceptGroup()) , Width="120" },
            new GridColumn() { Field = nameof(ConceptGroup.GroupClassificationCriteria), HeaderText = GetName("GroupClassificationCriteria", new ConceptGroup()), Width="300" }
        };
        gridColumnListProcessTag = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(TransactionalItemTag.Key), HeaderText = GetName("Name", new TransactionalItemTag())  },
            new GridColumn() { Field = nameof(TransactionalItemTag.Value), HeaderText = GetName("Code", new TransactionalItemTag())  }

        };
        gridColumnListCharacteristic = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(TransactionalItemTypeCharacteristic.Name), HeaderText = GetName("Name", new TransactionalItemTypeCharacteristic()), Width="300" }

        };

        gridColumnListModifier = new List<GridColumn>
        {
            new GridColumn() { Field = nameof(RecipeModifier.Name), HeaderText = GetName("Name", new RecipeModifier())  }

        };
        gridColumnListPossibleModifierValues = new List<GridColumn>
        {
         new GridColumn() { Field = nameof(ProductRecipeQualityModifier.Name), HeaderText = GetName("Name", new ProductRecipeQualityModifier())  }
        };
        gridColumnListPossibleValues = new List<GridColumn>
        {
            new GridColumn() { Field=nameof(TransactionalItemCharacteristic.Name) ,  HeaderText = @GetName( "Name", new TransactionalItemTypeCharacteristic())  },
            new GridColumn() { Field=nameof(TransactionalItemCharacteristic.IsEnabled) ,  HeaderText = @GetName( "IsEnabled", new TransactionalItemTypeCharacteristic()) , DisplayAsCheckBox=true },
            new GridColumn() { Field=nameof(TransactionalItemCharacteristic.AdditionalDescription) ,  HeaderText = @GetName( "AdditionalDescription", new TransactionalItemTypeCharacteristic())  },
        };
        gridColumnListByQuantity = new List<GridColumn>
        {
              new GridColumn() { Field=nameof(CostExceptionByQuantity.MinimumQty) ,  HeaderText = @GetName( "MinimumQty", new CostExceptionByQuantity())  },
               new GridColumn() { Field=nameof(CostExceptionByQuantity.MaximumQty) ,  HeaderText = @GetName( "MaximumQty", new CostExceptionByQuantity())  }
        };
        #endregion Column

    }

    #region Event
    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemQuality> args)
    {

        transactionalItemQuality = args.RowInfo.RowData;
        if (args.Item.Text == "Edit" && transactionalItemQuality != null)
        {
            ClosedAdd("QualityParameters");
        }
        if (args.Item.Text == "Reload")
        {
            StateHasChanged();
        }
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<CostExceptionByQuantity> args)
    {
        costExceptionsByQuantity = args.RowInfo.RowData;
        if (args.Item.Text == "Edit" && costExceptionsByQuantity != null)
        {
            ClosedAdd("CostExceptionsByQuantityProcessStep");
        }
        if (args.Item.Text == "Reload")
        {
            StateHasChanged();
        }
    }




    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemProcessStep> args)
    {

        transactionalItemProcessStep = args.RowInfo.RowData;
        if (args.Item.Text == "Edit" && transactionalItemProcessStep != null)
        {
            transactionalItemProcessTags = transactionalItemProcessStep.TransactionalItemProcessTags;
            costExceptionsByQuantitys = transactionalItemProcessStep.CostExceptionsByQuantity;
            processType = transactionalItemProcessStep.ProcessType;
            typeOfComponentsToCharge = transactionalItemProcessStep.TypeOfComponentsToCharge;
            ClosedAdd("TransactionalItemProcessesGeneral");
        }
        if (args.Item.Text == "Reload")
        {
            StateHasChanged();
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<ConceptGroup> args)
    {
        childrenGroup = args.RowInfo.RowData;
        if (args.Item.Text == "Edit" && childrenGroup != null)
        {
            ClosedAdd("ChildrenGroups");
        }
        if (args.Item.Text == "Reload")
        {
            StateHasChanged();
        }
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemTag> args)
    {

        transactionalItemProcessTag = args.RowInfo.RowData;
        if (args.Item.Text == "Edit" && transactionalItemProcessTag != null)
        {
            ClosedAdd("TransactionalItemProcessestags");
        }
        if (args.Item.Text == "Reload")
        {
            StateHasChanged();
        }
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemTypeCharacteristic> args)
    {
        transactionalItemTypeCharacteristic = args.RowInfo.RowData;

        if (args.Item.Text == "Edit" && transactionalItemTypeCharacteristic != null)
        {
            possibleValues = transactionalItemTypeCharacteristic.PossibleValues != null ? transactionalItemTypeCharacteristic.PossibleValues : new();
            ClosedAdd("TransactionalItemTypeCharacteristics");
        }
        if (args.Item.Text == "Reload")
        {
            StateHasChanged();
        }

    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<RecipeModifier> args)
    {

        inRecipeModifier = args.RowInfo.RowData;

        if (args.Item.Text == "Edit" && inRecipeModifier != null)
        {
            recipePossibleModifierValues = inRecipeModifier.RecipePossibleModifierValues;
            ClosedAdd("InRecipeModifiers");
        }
        if (args.Item.Text == "Reload")
        {
            StateHasChanged();
        }
    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<ProductRecipeQualityModifier> args)
    {
        recipePossibleModifierValue = args.RowInfo.RowData;

        if (args.Item.Text == "Edit" && recipePossibleModifierValue != null)
        {
            ClosedAdd("RecipePossibleModifierValues");
        }
        if (args.Item.Text == "Reload")
        {
            StateHasChanged();
        }

    }
    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItemCharacteristic> args)
    {
        possibleValue = args.RowInfo.RowData;
        if (args.Item.Text == "Edit" && possibleValue != null)
        {
            ClosedAdd("PossibleValues");
        }
        if (args.Item.Text == "Disable")
        {
            StateHasChanged();
        }
    }


    #endregion Event



    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";

        if (tile == "Save")
        {

            transactionalItemType.TransactionalItemProcesses = transactionalItemProcessSteps;
            transactionalItemType.TransactionalItemTypeCharacteristics = transactionalItemTypeCharacteristics;
            transactionalItemType.QualityParameters = transactionalItemQualitys;
            transactionalItemType.Groups = childrenGroups;
            transactionalItemType.InRecipeModifiers = inRecipeModifiers;

            var resul = await transactionalService.SaveTransactionalItemType(transactionalItemType);

            if (resul)
            {
                requiereSave = false;
                Msg(resul);

                if (Mode == "Add")
                {
                    inRecipeModifiers = new();
                    childrenGroups = new();
                    transactionalItemQualitys = new();
                    transactionalItemTypeCharacteristics = new();
                    transactionalItemProcessSteps = new();
                    transactionalItemType = new();


                }
            }
            StateHasChanged();

        }
        if (tile == "Save as...")
        {

        }
        StateHasChanged();
    }

    public async void ItemSelected_1(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";

        if (tile == "Save")
        {

            AddItem("TransactionalItemProcesses");

        }

        StateHasChanged();
    }

    public async void ItemSelected_2(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";

        if (tile == "Save")
        {

            AddItem("TransactionalItemTypeCharacteristics");

        }

        StateHasChanged();
    }
    public async void ItemSelected_3(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";

        if (tile == "Save")
        {

            AddItem("InRecipeQualityModifiers");

        }

        StateHasChanged();
    }


    public void AddItem(string value)
    {
        requiereSave = true;
        if (value == "TransactionalItemProcesses")
        {
            if (transactionalItemProcessSteps == null) transactionalItemProcessSteps = new();
            if (Mode == "Edit")
            {
                if (transactionalItemProcessStep.Id != null)
                {
                    transactionalItemProcessStep.TransactionalItemProcessTags = transactionalItemProcessTags != null ? transactionalItemProcessTags : new();
                    transactionalItemProcessStep.CostExceptionsByQuantity = costExceptionsByQuantitys != null ? costExceptionsByQuantitys : new();
                    transactionalItemProcessStep.TypeOfComponentsToCharge = typeOfComponentsToCharge != null ? typeOfComponentsToCharge : new();
                    transactionalItemProcessStep.ProcessType = processType != null ? processType : new();

                    Msg("Updated");


                }
                else
                {
                    Msg("Does not exist");
                }

            }

            if (Mode == "Add")
            {

                transactionalItemProcessStep.TransactionalItemProcessTags = transactionalItemProcessTags != null ? transactionalItemProcessTags : new();
                transactionalItemProcessStep.CostExceptionsByQuantity = costExceptionsByQuantitys != null ? costExceptionsByQuantitys : new();
                transactionalItemProcessStep.TypeOfComponentsToCharge = typeOfComponentsToCharge != null ? typeOfComponentsToCharge : new();
                transactionalItemProcessStep.ProcessType = processType != null ? processType : new();
                transactionalItemProcessSteps.Add(transactionalItemProcessStep);
                transactionalItemProcessStep = new();
                transactionalItemProcessTags = new();

            }

        }

        if (value == "TransactionalItemProcessesTag")
        {
            if (Mode == "Add")
            {
                if (transactionalItemProcessTag.Key != null)
                {
                    if (transactionalItemProcessTag.Value != null)
                    {
                        transactionalItemProcessTags.Add(transactionalItemProcessTag);
                        transactionalItemProcessTag = new();
                        Msg("Added");
                    }
                }
            }

            if (Mode == "Edit")
            {
                if (transactionalItemProcessTag.Id != null)
                {
                    Msg("Updated");
                }
                else
                {
                    Msg("Does not exist");
                }

            }
        }

        if (value == "CostExceptionsByQuantityProcessStep")
        {

            if (Mode == "Add")
            {
                costExceptionsByQuantitys.Add(costExceptionsByQuantity);
                costExceptionsByQuantity = new();
                Msg("Added");


            }
            if (Mode == "Edit")
            {

                if (costExceptionsByQuantity.Id != null)
                {
                    Msg("Updated");

                }
                else
                {
                    Msg("Does not exist");
                }

            }
        }

        if (value == "TransactionalItemTypeCharacteristics")
        {
            if (Mode == "Add")
            {
                if (transactionalItemTypeCharacteristics == null) transactionalItemTypeCharacteristics = new();
                transactionalItemTypeCharacteristic.PossibleValues = possibleValues != null ? possibleValues : new();
                transactionalItemTypeCharacteristics.Add(transactionalItemTypeCharacteristic);
                transactionalItemTypeCharacteristic = new();
                possibleValues = new();
                Msg("Added");

            }
            if (Mode == "Edit")
            {

                if (transactionalItemTypeCharacteristic.Id != null)
                {

                    Msg("Updated");

                }
                else
                {
                    Msg("Does not exist");
                }

            }



        }

        if (value == "QualityParameters")
        {
            if (Mode == "Add")
            {
                if (transactionalItemQualitys == null) transactionalItemQualitys = new();
                transactionalItemQualitys.Add(transactionalItemQuality);
                transactionalItemQuality = new();
                Msg("Added");
            }
            if (Mode == "Edit")
            {

                Msg("Updated");

            }



        }

        if (value == "InRecipeQualityModifiers")
        {

            if (Mode == "Add")
            {
                if (inRecipeModifiers == null) inRecipeModifiers = new();
                inRecipeModifier.RecipePossibleModifierValues = recipePossibleModifierValues;
                inRecipeModifiers.Add(inRecipeModifier);
                inRecipeModifier = new();
                Msg("Added");
            }
            if (Mode == "Edit")
            {

                Msg("Updated");

            }

        }
        if (value == "RecipePossibleModifierValues")
        {

            if (Mode == "Add")
            {
                if (recipePossibleModifierValues == null) recipePossibleModifierValues = new();
                recipePossibleModifierValues.Add(recipePossibleModifierValue);
                recipePossibleModifierValue = new();
                Msg("Added");
            }
            if (Mode == "Edit")
            {

                Msg("Updated");


            }

        }



    }



    public void DeleteTag(string value)
    {
        requiereSave = true;
        var tag = transactionalItemProcessTags.Where(r => r.Key == value).FirstOrDefault();
        transactionalItemProcessTags.Remove(tag);
        Msg("Deleteed");
    }


    public void AddPossibleValue()
    {
        if (possibleValue != null)
        {
            requiereSave = true;
            possibleValues.Add(possibleValue);
            //possibleValuesModel.Add(new PossibleValues {
            //    Name = transactionalItemTypeCharacteristic.Name,
            //    IsEnabled = possibleValue.IsEnabled,
            //    AdditionalDescription = possibleValue.AdditionalDescription,
            //    Id = possibleValue.Id });
            possibleValue = new();
            Msg("Added");
        }
    }

    public void DeletePossibleValue(string value)
    {
        var element = possibleValues.Where(e => e.Id == value.Trim()).FirstOrDefault();
        //var elemenModel = possibleValuesModel.Where(e => e.Name.Trim() == value.Trim()).FirstOrDefault();
        if (element != null && possibleValue != null)
        {
            requiereSave = true;
            possibleValues.Remove(element);
            //possibleValuesModel.Remove(elemenModel);
            Msg("Deleteed");
        }
    }

    public async void AddGroupchildren()
    {
        if (childrenGroup.Name != null)
        {
            if (childrenGroup.GroupClassificationCriteria != null)
            {
                if (childrenGroup.Id == null && Mode == "Add")
                {
                    childrenGroups.Add(childrenGroup);
                    childrenGroup = new();
                    requiereSave = true;
                    Msg("Added");
                }

                if (Mode == "Edit")
                {
                    requiereSave = true;
                    Msg("Update");
                }


            }

        }

    }

    public void DeleteChildrenGroups(string value)
    {
        if (childrenGroups != null)
        {
            var remove = childrenGroups.Where(r => r.Name.Trim() == value.Trim()).FirstOrDefault();
            if (remove != null)
            {
                childrenGroups.Remove(remove);
                requiereSave = true;
                Msg("Deleteed");
            }

        }

    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void Onload(object args)
    {
        isLoading = false;
        StateHasChanged();
    }

    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }

    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo($"/{Page}/{filterItems}");
    }




    private void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
    }
    private void Msg(string? Msg)
    {
        msg = Msg;
        viewMsg = true;
    }


    //public class PossibleValues
    //{
    //    public string Id { get; set; }
    //    public string Name { get; set; }
    //    public bool IsEnabled { get; set; }
    //    public string AdditionalDescription { get; set; }
    //}

    public class TransactionalItemQualityPairModel
    {
        public string Name { get; set; }
        public string Note { get; set; }
        public string Code { get; set; }
        public string Value { get; set; }
        public string DefaulValue { get; set; }
        public string Id { get; set; }
    }

}
