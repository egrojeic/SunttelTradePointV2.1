@page "/LabelStylesConcept/{Page}/{filterItems}/{labelStylesId}"
@page "/LabelStylesConcept/{Page}"
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;
@inject ContextMenuService ContextMenuService


@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<div class="flex-verical-center position-relative" style="display:@(!modeEdit?"flex":"none");">
    @if (pageView == "labelStyleDataMaxUserFor")
    {
        <PageTitleComponent Title="@GetName("UsedFor", new LabelField())" IconName="palette.png"
                        Description='@($"Here you can add {GetName("DataMaxLabelSettings", new LabelStyle()).ToLower()}")'>
        </PageTitleComponent>

        <div class="flex-verical-start">
            <div class="container-menu-g">
                <nav>
                    <button @onclick='()=>ClosedAdd("DataMaxLabelLineSpec")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                    <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                        <SplitButtonEvents ItemSelected="ItemSelected">
                        </SplitButtonEvents>
                        <DropDownMenuItems>
                            <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Save" Id="dataMaxUsedFors" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                            <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                        </DropDownMenuItems>
                    </SfSplitButton>
                </nav>
            </div>
            <div class="grid-columns-header">
                <div>
                    <label>
                        @GetName( "UsedFor", new LabelField())
                    </label>
                </div>
                <div style="position:relative;">
                    <select class="form-control info-text-size" @bind="dataMaxUsedFor" placeholder="Edit value">
                        <option value="@LabelPurpose.Provider">@LabelPurpose.Provider.ToString()</option>
                        <option value="@LabelPurpose.Customer">@LabelPurpose.Customer.ToString()</option>
                        <option value="@LabelPurpose.Inventory">@LabelPurpose.Inventory.ToString()</option>
                        <option value="@LabelPurpose.UPC">@LabelPurpose.UPC.ToString()</option>
                    </select>
                </div>
            </div>

            <div class="detailsTitleContainer">
                <h3 class="subTitleDetailForm ">@GetName( "UsedFor", new LabelField())</h3>
            </div>
            <div class="flex-horizontal-center ">

                <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="true"
                            FilterMode="FilterMode.Advanced"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowSorting="true"
                            AllowPaging="true"
                            PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            Data="@usedForList"
                            TItem="LabelPurposeView"
                            ColumnWidth=" 300px"
                            SelectionMode="DataGridSelectionMode.Single"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            CellContextMenu="@ShowContextMenuWithContentUsedFor"
                            PageNumbersCount="100"
                            PageSize="2">

                    <Columns>
                        <RadzenDataGridColumn TItem="LabelField" Property="@nameof(LabelField.Name)" Title="@GetName( "Name", new LabelField())" Width="80px" />

                    </Columns>
                </RadzenDataGrid>


            </div>
        </div>
    }

    @if (pageView == "DataMaxLabelLineSpec")
    {
        <PageTitleComponent Title="@GetName("DataMaxFieldsSpecs",new DataMaxLabelSpecs())" IconName="palette.png"
                        Description="@($"Here you can add types of {GetName("DataMaxFieldsSpecs",new DataMaxLabelSpecs()).ToLower()}")">
        </PageTitleComponent>
        <div class="flex-horizontal-center">
            <div class="grid-columns-2 box-shadow-mode width-page1">

                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "Rotation", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Rotation" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "Font", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Font" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "Width", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Width" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "Height", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Height" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "FontSize", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.FontSize" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "Row", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Row" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "GGColumn", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.GGColumn" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "IIIColumn", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.IIIColumn" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "JColumn", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.JColumn" class="form-control info-text-size" placeholder="Edit value" /></div>

            </div>
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div><label class="info-text-size"><strong class="c-red">*</strong> @GetName( "Name", new LabelField())</label> </div>
                <div><input @bind-value="dataMaxFieldInLabel.Name" class="form-control info-text-size" placeholder="Edit value" /></div>
                <div>
                    <label class="info-text-size">
                        @GetName( "UsedFor", new LabelField())
                    </label>
                </div>
                <button @onclick='()=>ClosedAdd("labelStyleDataMaxUserFor")' class="size-btn color-btn btn-add"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>

            </div>
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div></div>
                <div class="flex-horizontal-end">
                    <button @onclick='()=>OpenAdd("DataMaxLabelSettings")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>Add("DataMaxLabelLineSpec")' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>

            </div>
        </div>
    }

    @if (pageView == "labelStylezebraUserFor")
    {
        <PageTitleComponent Title="@GetName("ZebraLabelSettings", new LabelStyle())" IconName="palette.png"
                        Description='@($"Here you can add {GetName("ZebraLabelSettings", new LabelStyle()).ToLower()}")'>
        </PageTitleComponent>
        <div class="flex-verical-start">
            <div class="container-menu-g">
                <nav>
                    <button @onclick='()=>ClosedAdd("ZebraLabelSpecs")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                    <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                        <SplitButtonEvents ItemSelected="ItemSelected">
                        </SplitButtonEvents>
                        <DropDownMenuItems>
                            <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Save" Id="zebraUsedFors" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                            <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                        </DropDownMenuItems>
                    </SfSplitButton>
                </nav>
            </div>
            <div class="grid-columns-header">
                <div>
                    <label>
                        @GetName( "UsedFor", new LabelField())
                    </label>
                </div>
                <div style="position:relative;">
                    <select class="form-control" @bind="zebraUsedFor" placeholder="Edit value">
                        <option value="@LabelPurpose.Provider">@LabelPurpose.Provider.ToString()</option>
                        <option value="@LabelPurpose.Customer">@LabelPurpose.Customer.ToString()</option>
                        <option value="@LabelPurpose.Inventory">@LabelPurpose.Inventory.ToString()</option>
                        <option value="@LabelPurpose.UPC">@LabelPurpose.UPC.ToString()</option>
                    </select>
                </div>
            </div>

            <div class="detailsTitleContainer">
                <h3 class="subTitleDetailForm">@GetName( "ZebraFieldsSpecs", new ZebraLabelSpecs())</h3>
            </div>
            <div class="flex-horizontal-center ">

                <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="true"
                            FilterMode="FilterMode.Advanced"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowSorting="true"
                            AllowPaging="true"
                            PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            Data="@zebraUsedForsView"
                            TItem="LabelPurposeView"
                            ColumnWidth="300px"
                            SelectionMode="DataGridSelectionMode.Single"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            CellContextMenu="@ShowContextMenuWithContent"
                            PageNumbersCount="100"
                            PageSize="2">

                    <Columns>
                        <RadzenDataGridColumn TItem="LabelPurposeView" Property="@nameof(LabelPurposeView.value)" Title="@GetName( "LabelPurpose", new LabelStylesConcept())" Width="80px" />

                    </Columns>
                </RadzenDataGrid>


            </div>
        </div>
    }

    @if (pageView == "ZebraLabelSpecs")
    {
        <PageTitleComponent Title="@GetName("ZebraLabelSettings",new LabelStyle())" IconName="palette.png"
                        Description="@($"Here you can add types of {GetName("ZebraLabelSettings",new LabelStyle()).ToLower()}")">
        </PageTitleComponent>

        <div class="flex-horizontal-center">
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div><label><strong class="c-red">*</strong> @GetName( "CampoA", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoA" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoB", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoB" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoC", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoC" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoD", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoD" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoEEE", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoEEE" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoFFFF", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoFFFF" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoGGGG", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoGGGG" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoHHHH", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoHHHH" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoIIII", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoIIII" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoJ", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoJ" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoK", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoK" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "Orden", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.Orden" class="form-control" placeholder="Edit value" /></div>

            </div>

            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div><label><strong class="c-red">*</strong> @GetName( "Name", new LabelField())</label> </div>
                <div><input @bind-value="zebraFieldInLabel.Name" class="form-control" placeholder="Edit value" /></div>
                <div>
                    <label>
                        @GetName( "UsedFor", new LabelField())
                    </label>
                </div>
                <button @onclick='()=>ClosedAdd("labelStylezebraUserFor")' class="size-btn color-btn btn-add"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>

            </div>
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div></div>
                <div class="flex-horizontal-end">
                    <button @onclick='()=>OpenAdd("ZebraLabelSettings")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>Add("ZebraLabelSpecs")' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>

        </div>
    }
</div>


<div class="flex-verical-center position-relative" style="display:@(modeEdit?"flex":"none");">


    <PageTitleComponent Title=" Label Style" IconName="palette.png"
                        Description="Here you can add label style">
    </PageTitleComponent>

    <div class="container-menu-g">
        <nav>
            <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" Id="general" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>
        </nav>
    </div>

    <div class="flex-horizontal-center">
        <div class="grid-columns-header">
            <div><label>@GetName( "Name", new AtomConcept())</label></div>
            <div><input @bind-value="labelStyle.Name" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "Code", new LabelStyle())</label></div>
            <div><input @bind-value="labelStyle.Code" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "Notes", new LabelStyle())</label></div>
            <div><input @bind-value="labelStyle.Notes" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "PDFReportName", new LabelStyle())</label></div>
            <div><input @bind-value="labelStyle.PDFReportName" class="form-control" placeholder="Edit value" /></div>
            <div>
                <label>
                    @GetName( "Purpose", new LabelStyle())
                </label>
            </div>
            <div style="position:relative;">
                <select class="form-control" @bind="labelStyle.Purpose" placeholder="Edit value">
                    <option value="@LabelPurpose.Provider">@LabelPurpose.Provider.ToString()</option>
                    <option value="@LabelPurpose.Customer">@LabelPurpose.Customer.ToString()</option>
                    <option value="@LabelPurpose.Inventory">@LabelPurpose.Inventory.ToString()</option>
                    <option value="@LabelPurpose.UPC">@LabelPurpose.UPC.ToString()</option>
                </select>
            </div>
            <div>
                <label>@GetName( "Paper", new LabelStyle())</label>
            </div>
            <InputTextSelector3 TItem="LabelPaper"
                                Id="Paper"
                                caption="@(labelPaper.Name != null ? labelPaper.Name : "")"
                                Items="labelPapers"
                                EventSearcherValueAndId="EventSearcherValueAndId"
                                EventIdSelectionAndId="EventIdSelection">

            </InputTextSelector3>
        </div>

        <SfTab Height="400px" HeaderPlacement="HeaderPosition.Left">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "DataMaxLabelSettings", new LabelStyle())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="flex-verical-start">
                            <div class="grid-columns-header ">
                                <div><label><strong class="c-red">*</strong> @GetName( "ColumnSeparatorSpace", new DataMaxLabelSpecs())</label> </div>
                                <div><input @bind-value="dataMaxLabelSettings.ColumnSeparatorSpace" class="form-control" placeholder="Edit value" /></div>
                            </div>
                            <br />
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "DataMaxFieldsSpecs", new DataMaxLabelSpecs())</h3>
                                <svg @onclick='()=>ClosedAdd("DataMaxLabelLineSpec")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>
                            <div class="flex-horizontal-center ">
                                <RadzenDataGrid AllowFiltering="true"
                                                AllowColumnResize="true"
                                                AllowAlternatingRows="true"
                                                FilterMode="FilterMode.Advanced"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowSorting="true"
                                                AllowPaging="true"
                                                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                                ShowPagingSummary="true"
                                                Data="@dataMaxLabelLineSpecsView"
                                                TItem="DataMaxLabelLineSpecView"
                                                ColumnWidth="300px"
                                                SelectionMode="DataGridSelectionMode.Single"
                                                LogicalFilterOperator="LogicalFilterOperator.Or"
                                                CellContextMenu="@ShowContextMenuWithContent"
                                                PageNumbersCount="100"
                                                PageSize="2">

                                    <Columns>
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="FieldInLabel" Title="@GetName( "Name", new DataMaxLabelLineSpec())" Width="80px" />
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="Rotation" Title="@GetName( "Rotation", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="Font" Title="@GetName( "Font", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="Width" Title="@GetName( "Width", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="Height" Title="@GetName( "Height", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />

                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="FontSize" Title="@GetName( "FontSize", new DataMaxLabelLineSpec())" Width="80px" />
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="Row" Title="@GetName( "Row", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="GGColumn" Title="@GetName( "GGColumn", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="IIIColumn" Title="@GetName( "IIIColumn", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="DataMaxLabelLineSpecView" Property="JColumn" Title="@GetName( "JColumn", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                    </Columns>
                                </RadzenDataGrid>

                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "ZebraLabelSettings", new LabelStyle())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>

                        <div class="flex-verical-start">
                            <div class="grid-columns-header ">
                                <div><label><strong class="c-red">*</strong> @GetName( "ColumnSeparatorSpace", new DataMaxLabelSpecs())</label> </div>
                                <div><input @bind-value="zebraLabelSettings.ColumnSeparatorSpace" class="form-control" placeholder="Edit value" /></div>
                            </div>
                            <br />
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "ZebraFieldsSpecs", new ZebraLabelSpecs())</h3>
                                <svg @onclick='()=>ClosedAdd("ZebraLabelSpecs")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>
                            <div class="flex-horizontal-center ">
                                <RadzenDataGrid AllowFiltering="true"
                                                AllowColumnResize="true"
                                                AllowAlternatingRows="true"
                                                FilterMode="FilterMode.Advanced"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowSorting="true"
                                                AllowPaging="true"
                                                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                                ShowPagingSummary="true"
                                                Data="@zebraLabelLineSpecsView"
                                                TItem="ZebraLabelLineSpecView"
                                                ColumnWidth="300px"
                                                SelectionMode="DataGridSelectionMode.Single"
                                                LogicalFilterOperator="LogicalFilterOperator.Or"
                                                CellContextMenu="@ShowContextMenuWithContent"
                                                PageNumbersCount="100"
                                                PageSize="2">

                                    <Columns>
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.NameLabelField)" Title="@GetName( "Name", new DataMaxLabelLineSpec())" Width="80px" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoA)" Title="@GetName( "Rotation", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoB)" Title="@GetName( "Font", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoC)" Title="@GetName( "Width", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoD)" Title="@GetName( "Height", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoEEE)" Title="@GetName( "Height", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoFFFF)" Title="@GetName( "Height", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoGGGG)" Title="@GetName( "Height", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoHHHH)" Title="@GetName( "Height", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="ZebraLabelLineSpecView" Property="@nameof(ZebraLabelLineSpecView.CampoIIII)" Title="@GetName( "Height", new DataMaxLabelLineSpec())" Width="180px" TextAlign="Radzen.TextAlign.Center" />

                                    </Columns>
                                </RadzenDataGrid>

                            </div>

                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    </div>
</div>

@code {
    [Parameter]
    public string Page { get; set; } = "";
    [Parameter]
    public string labelStylesId { get; set; }
    [Parameter]
    public string filterItems { get; set; } = "";

    public bool ststus = false, ViewPopupCount = false, ViewSelect = false;
    public int ParamCountResul = 0;
    public string ModeSearcher = "";
    int status = 0;
    string nameString = "";
    string SearcherValue = "";
    bool inputPaperView = false;

    InputTextSelector? ReferInputTextSelector;

    #region Tag 1
    LabelStyle labelStyle = new();
    List<LabelPaper> labelPapers = new();
    LabelPaper labelPaper = new();
    List<GridColumn> gridColumnListDataMaxLabelLineSpec = new();

    #endregion Tag 1

    #region Tag 2
    List<DataMaxLabelSpecs> dataMaxLabelSettingss = new();
    DataMaxLabelSpecs dataMaxLabelSettings = new();
    DataMaxLabelLineSpec dataMaxLabelLineSpec = new();
    List<DataMaxLabelLineSpec> dataMaxLabelLineSpecs = new();
    List<DataMaxLabelLineSpecView> dataMaxLabelLineSpecsView = new();
    List<LabelPurposeView> dataMaxUsedForsView = new();
    List<LabelPurpose> dataMaxUsedFors = new();
    LabelPurpose dataMaxUsedFor = new();
    List<GridColumn> gridColumnListDataMaxSettings = new();
    LabelField dataMaxFieldInLabel = new();
    #endregion Tag 2

    #region Tag 3
    List<ZebraLabelSpecs> zebraLabelSettingss = new();
    ZebraLabelSpecs zebraLabelSettings = new();
    List<ZebraLabelLineSpecView> zebraLabelLineSpecsView = new();
    List<ZebraLabelLineSpec> zebraLabelLineSpecs = new();
    ZebraLabelLineSpec zebraLabelLineSpec = new();
    LabelField zebraFieldInLabel = new();
    LabelStyle labelStylezebra = new();
    List<LabelPurposeView> zebraUsedForsView = new();
    List<LabelPurposeView> usedForList = new();
    List<LabelPurpose> zebraUsedFors = new();
    LabelPurpose zebraUsedFor = new();
    List<GridColumn> gridColumnListZebraLabelSettings = new();


    #endregion Tag 3



    public bool modeEdit = true, viewMsg = false;
    public string msg = "", pageView = "";

    protected async override void OnInitialized()
    {
        if (labelStylesId != null)
        {

            labelStyle = await transactionalService.GetLabelStyle(labelStylesId);
            if (labelStyle != null)
            {

                labelPaper = labelStyle.Paper != null ? labelStyle.Paper : new();
                zebraLabelSettings = labelStyle.ZebraLabelSettings != null ? labelStyle.ZebraLabelSettings : new();
                zebraLabelLineSpecs = zebraLabelSettings.ZebraFieldsSpecs != null ? zebraLabelSettings.ZebraFieldsSpecs : new();
                dataMaxLabelSettings = labelStyle.DataMaxLabelSettings != null ? labelStyle.DataMaxLabelSettings : new();
                dataMaxLabelLineSpecs = dataMaxLabelSettings.DataMaxFieldsSpecs != null ? dataMaxLabelSettings.DataMaxFieldsSpecs : new();
                dataMaxLabelLineSpecsView = new();
                foreach (var item in dataMaxLabelLineSpecs)
                {
                    dataMaxLabelLineSpecsView.Add(ConverToDataMax(item));
                }
                zebraLabelLineSpecsView = new();
                foreach (var item in zebraLabelLineSpecs)
                {
                    zebraLabelLineSpecsView.Add(ConverToZebraLabel(item));
                }
                StateHasChanged();

            }
            else
            {
                Closed("control");
            }



        }
        if (labelStylesId == null)
        {
            labelStyle = new();
        }

        gridColumnListDataMaxSettings = new List<GridColumn>
                    {

              new GridColumn() { Field=nameof(DataMaxLabelSpecs.ColumnSeparatorSpace) ,  HeaderText = @GetName( "ColumnSeparatorSpace", new DataMaxLabelSpecs())  },

                    };




        gridColumnListZebraLabelSettings = new List<GridColumn>
                    {

              new GridColumn() { Field=nameof(zebraLabelSettings.ColumnSeparatorSpace) ,  HeaderText = @GetName( "ColumnSeparatorSpace", new ZebraLabelSpecs())  },

                    };




    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }


    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        string id = e.Item != null ? e.Item.Id : "";

        if (tile == "Save")
        {
            if (id == "general")
            {
                labelStyle.Paper = labelPaper;
                if (zebraLabelSettings.ZebraFieldsSpecs == null) zebraLabelSettings.ZebraFieldsSpecs = new();
                zebraLabelSettings.ZebraFieldsSpecs = zebraLabelLineSpecs;
                zebraLabelSettingss.Add(zebraLabelSettings);
                labelStyle.ZebraLabelSettings = zebraLabelSettings;
                if (dataMaxLabelSettings.DataMaxFieldsSpecs == null) dataMaxLabelSettings.DataMaxFieldsSpecs = new();

                dataMaxLabelSettings.DataMaxFieldsSpecs = dataMaxLabelLineSpecs;
                dataMaxLabelSettingss.Add(dataMaxLabelSettings);
                labelStyle.DataMaxLabelSettings = dataMaxLabelSettings;
                zebraLabelSettings = new();
                dataMaxLabelLineSpec = new();

                if (labelStyle.Paper == null) labelStyle.Paper = new();
                if (labelStyle.DataMaxLabelSettings == null) labelStyle.DataMaxLabelSettings = new();
                if (labelStyle.DataMaxLabelSettings == null) labelStyle.DataMaxLabelSettings = new();
                if (labelStyle.ZebraLabelSettings == null) labelStyle.ZebraLabelSettings = new();

                var resul = await transactionalService.SaveLabelStyle(labelStyle);
                if (resul)
                {
                    Msg("Saved", 1);
                }
                else
                {
                    Msg("No saved", 1);
                }

            }


            if (id == "zebraUsedFors")
            {
                Add("zebraUsedFors");
            }

            if (id == "dataMaxUsedFors")
            {
                Add("dataMaxUserFors");
            }
        }

        if (tile == "Save as...")
        {
            Msg("Disable", 1);
        }
        StateHasChanged();
    }


    public void Add(string value)
    {

        if (value == "DataMaxLabelLineSpec")
        {
            if (dataMaxLabelLineSpecs == null) dataMaxLabelLineSpecs = new();
            dataMaxLabelLineSpec.FieldInLabel = dataMaxFieldInLabel != null ? dataMaxFieldInLabel : new();
            dataMaxLabelLineSpec.FieldInLabel.UsedFor = dataMaxUsedFors;
            dataMaxLabelLineSpecs.Add(dataMaxLabelLineSpec);
            dataMaxLabelLineSpecsView.Add(ConverToDataMax(dataMaxLabelLineSpec));
            dataMaxFieldInLabel = new();
            dataMaxLabelLineSpec = new();
            dataMaxFieldInLabel = new();
            dataMaxUsedFor = new();
        }

        if (value == "ZebraLabelSpecs")
        {
            if (zebraLabelLineSpecs == null) zebraLabelLineSpecs = new();
            zebraLabelLineSpec.FieldInLabel = zebraFieldInLabel != null ? zebraFieldInLabel : new();
            zebraLabelLineSpec.FieldInLabel.UsedFor = zebraUsedFors;
            zebraLabelLineSpecs.Add(zebraLabelLineSpec);
            zebraLabelLineSpecsView.Add(ConverToZebraLabel(zebraLabelLineSpec));
            zebraLabelLineSpec = new();
            zebraFieldInLabel = new();
            zebraUsedFor = new();

        }

        if (value == "dataMaxUserFors")
        {
            dataMaxUsedFors.Add(dataMaxUsedFor);
            dataMaxUsedForsView.Add(new LabelPurposeView { value = dataMaxUsedFor.ToString() });
        }
        if (value == "zebraUsedFors")
        {
            zebraUsedFors.Add(zebraUsedFor);
            zebraUsedForsView.Add(new LabelPurposeView { value = zebraUsedFor.ToString() });

        }

        Msg("Added", 1);
        StateHasChanged();
    }



    public async void OnContextMenuClick(ContextMenuClickEventArgs<DataMaxLabelSpecs> args)
    {
        DataMaxLabelSpecs dataMaxLabelSpecs = args.RowInfo.RowData;
        if (args.Item.Text == "Edit")
        {
            ClosedAdd("PossibleValues");
        }

    }


    public async void OnContextMenuClick(ContextMenuClickEventArgs<ZebraLabelSpecs> args)
    {
        ZebraLabelSpecs dataMaxLabelSpecs = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            ClosedAdd("PossibleValues");
        }

    }








    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<DataMaxLabelLineSpecView> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
      );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        DataMaxLabelLineSpecView argObj = (DataMaxLabelLineSpecView)args.Value;
        dataMaxLabelLineSpec = dataMaxLabelLineSpecs.Where(s => s.Id != null && s.Id == argObj.Id).FirstOrDefault();
        dataMaxFieldInLabel = dataMaxLabelLineSpec.FieldInLabel != null ? dataMaxLabelLineSpec.FieldInLabel : new();
        ClosedAdd("DataMaxLabelLineSpec");
    }

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<ZebraLabelLineSpecView> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClickZebraLabelLineSpecView">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
           );

    void OnMenuItemClickZebraLabelLineSpecView(MenuItemEventArgs args)
    {
        ZebraLabelLineSpecView zebraLabelLineSpec = (ZebraLabelLineSpecView)args.Value;
        ClosedAdd("ZebraLabelSpecs");
    }

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<LabelPurposeView> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClickLabelPurpose">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
        );

    void OnMenuItemClickLabelPurpose(MenuItemEventArgs args)
    {
        LabelPurposeView zebraLabelLineSpec = (LabelPurposeView)args.Value;
        ClosedAdd("ZebraLabelSpecs");
    }
    void ShowContextMenuWithContentUsedFor(DataGridCellMouseEventArgs<LabelPurposeView> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClickUsedFor">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClickUsedFor(MenuItemEventArgs args)
    {
       var userFor = (LabelPurposeView)args.Value;
      
        ClosedAdd("ZebraLabelSpecs");
    }

    #endregion Grid



    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo($"/{Page}/{filterItems}");
    }

    public void ClosedInput()
    {
        ViewPopupCount = false;

        inputPaperView = false;
    }

    protected async void EventIdSelection(LabelPaper paper)
    {
        if (paper != null)
        {
            if (SearcherValue == "Paper")
            {
                labelPaper = paper;
            }
        }


        StateHasChanged();

    }

    protected async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();
        if (SearcherValue == "Paper")
        {
            labelPapers = await transactionalService.GetSelectorListLabelPaper(arg.value.ToString());
            ParamCountResul = labelPapers.Count();
        }

        StateHasChanged();
    }

    public void SetViewElemnt(string Element)
    {
        SearcherValue = Element;
        if (Element == "Paper") { inputPaperView = true; }


    }

    public void EventClosedInput()
    {
        ParamCountResul = 0;
        ViewSelect = false;


        StateHasChanged();
    }

    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }

    public void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
    }

    public void Msg(string? Msg, int _status)
    {
        msg = Msg;
        viewMsg = true;
        status = _status;
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    DataMaxLabelLineSpecView ConverToDataMax(DataMaxLabelLineSpec _dataMaxLabelLineSpec)
    {
        DataMaxLabelLineSpecView item = new();
        var ObjFieldInLabel = _dataMaxLabelLineSpec.FieldInLabel != null ? _dataMaxLabelLineSpec.FieldInLabel : null;
        var ObjDataMax = _dataMaxLabelLineSpec != null ? _dataMaxLabelLineSpec : null;


        item = new DataMaxLabelLineSpecView()
            {
                NameLabelField = ObjFieldInLabel != null ? ObjFieldInLabel.Name : "",
                Rotation = ObjDataMax.Rotation != null ? ObjDataMax.Rotation : "",
                Font = ObjDataMax.Font != null ? ObjDataMax.Font : "",
                Width = ObjDataMax.Width != null ? ObjDataMax.Width : "",
                Height = ObjDataMax.Height != null ? ObjDataMax.Height : "",
                FontSize = ObjDataMax.FontSize != null ? ObjDataMax.FontSize : "",
                Row = ObjDataMax.Row != null ? ObjDataMax.Row : "",
                GGColumn = ObjDataMax.GGColumn != null ? ObjDataMax.GGColumn : "",
                IIIColumn = ObjDataMax.IIIColumn != null ? ObjDataMax.IIIColumn : "",
                JColumn = ObjDataMax.JColumn != null ? ObjDataMax.JColumn : "",
            };
        return item;
    }

    ZebraLabelLineSpecView ConverToZebraLabel(ZebraLabelLineSpec _zebraLabelLineSpec)
    {
        ZebraLabelLineSpecView item = new();
        var ObjFieldInLabel = _zebraLabelLineSpec.FieldInLabel != null ? _zebraLabelLineSpec.FieldInLabel : null;
        var Obj = _zebraLabelLineSpec != null ? _zebraLabelLineSpec : null;


        item = new ZebraLabelLineSpecView()
            {
                NameLabelField = ObjFieldInLabel != null ? ObjFieldInLabel.Name : "",
                Id = Obj.Id,
                CampoA = Obj.CampoA,
                CampoB = Obj.CampoB,
                CampoC = Obj.CampoC,
                CampoD = Obj.CampoD,
                CampoEEE = Obj.CampoEEE,
                CampoFFFF = Obj.CampoFFFF,
                CampoGGGG = Obj.CampoGGGG,
                CampoHHHH = Obj.CampoHHHH,
                CampoIIII = Obj.CampoIIII,
                CampoJ = Obj.CampoJ,
                CampoK = Obj.CampoK,
                Orden = Obj.Orden


            };
        return item;
    }




    public class DataMaxLabelLineSpecView : DataMaxLabelLineSpec
    {
        public int ColumnSeparatorSpace { get; set; }
        public string IdLabelField { get; set; }
        public string NameLabelField { get; set; }
    }


    public class ZebraLabelLineSpecView : ZebraLabelLineSpec
    {
        public int ColumnSeparatorSpace { get; set; }
        public string IdLabelField { get; set; }
        public string NameLabelField { get; set; }
    }

    class LabelPurposeView
    {
        public string value { get; set; }
    }




}
