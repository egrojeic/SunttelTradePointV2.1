@page "/DocumentTypeConcept/add/{DocumentTypeId}"
@page "/DocumentTypeConcept/add"

@using SunttelTradePointB.Client.Services.SalesServices;
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Shared.Sales;
@using Syncfusion.Blazor.Buttons
@inject NavigationManager Navigation
@inject SalesDocuments SaleDocumentService

@if (@viewMsg)
{
        <MessageSaveComponent isVisible="viewMsg" message="@msg">
        </MessageSaveComponent>
}

<PageTitleComponent Title="Commercial Document Type" IconName="signal.png"
                    Description="Here you can add or edit one commercial document type">
</PageTitleComponent>

<div class="flex-horizontal-center">
    <div class="grid-columns-2 box-shadow-mode">
        <div><label>@GetName( "Name", new AtomConcept())</label></div>
        <div><input type="text" @bind-value="commercialDocumentType.Name" class="form-control" placeholder="Edit value" /></div>

        <div><label>@GetName( "AffectInventory", new ShippingStatus())</label></div>
        <div>
            <SfSwitch @bind-Checked="@commercialDocumentType.AffectInventory"></SfSwitch>
        </div>
        <div><label>@GetName( "AffectFinance", new CommercialDocumentType())</label></div>
        <div>
            <SfSwitch @bind-Checked="@commercialDocumentType.AffectFinance"></SfSwitch>
        </div>
        <div><label>@GetName( "NeedsCheckPrices", new CommercialDocumentType())</label></div>
        <div>
            <SfSwitch @bind-Checked="@commercialDocumentType.NeedsCheckPrices"></SfSwitch>
        </div>
        <br />
        <div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>Closed()' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick='Save' class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter]
    public string? DocumentTypeId { get; set; }

    public CommercialDocumentType commercialDocumentType = new CommercialDocumentType();

    public bool modeEdit = true, viewMsg = false;
    public string msg = "", pageView = "";


    protected override async Task OnInitializedAsync()
    {
        if (DocumentTypeId is null) return;
        commercialDocumentType = await SaleDocumentService.GetCommercialDocumentTypeById(DocumentTypeId);
        base.OnInitialized();
    }


    public void Closed()
    {
        Navigation.NavigateTo($"/DocumentType");
    }

    public async void Save()
    {
        var resul = await SaleDocumentService.SaveCommercialDocumentType(commercialDocumentType);
        if (resul !=null) commercialDocumentType = new();
        Msg(resul !=null);
    }

    private void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
        StateHasChanged();
    }
    private void Msg(string? Msg)
    {
        msg = Msg;
        viewMsg = true;
        StateHasChanged();
    }
    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
}
