@page "/LabelStylesConcept/{Page}/{Mode}/{filterItems}"
@page "/LabelStylesConcept/{Page}/{Mode}"
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;


<div class="flex-verical-center position-relative" style="display:@(!modeEdit?"flex":"none");">
    @if (pageView == "DataMaxLabelLineSpec")
    {
        <PageTitleComponent Title="@GetName("DataMaxFieldsSpecs",new DataMaxLabelSpecs())" IconName="palette.png"
                        Description="@($"Here you can add types of {GetName("DataMaxFieldsSpecs",new DataMaxLabelSpecs()).ToLower()}")">
        </PageTitleComponent>
        <div class="flex-horizontal-center">
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div><label><strong class="c-red">*</strong> @GetName( "ColumnSeparatorSpace", new DataMaxLabelSpecs())</label> </div>
                <div><input @bind-value="dataMaxLabelSettings.ColumnSeparatorSpace" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "Rotation", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Rotation" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "Font", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Font" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "Width", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Width" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "Height", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Height" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "FontSize", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.FontSize" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "Row", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.Row" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "GGColumn", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.GGColumn" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "IIIColumn", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.IIIColumn" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "JColumn", new DataMaxLabelLineSpec())</label> </div>
                <div><input @bind-value="dataMaxLabelLineSpec.JColumn" class="form-control" placeholder="Edit value" /></div>

                <div></div>
                <div class="flex-horizontal-end">
                    <button @onclick='()=>OpenAdd("DataMaxLabelLineSpec")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>Add("DataMaxLabelLineSpec")' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>
    }


    @if (pageView == "ZebraLabelSpecs")
    {
        <PageTitleComponent Title="@GetName("ZebraLabelSettings",new LabelStyle())" IconName="palette.png"
                        Description="@($"Here you can add types of {GetName("ZebraLabelSettings",new LabelStyle()).ToLower()}")">
        </PageTitleComponent>

        <div class="flex-horizontal-center">
            <div class="grid-columns-2 box-shadow-mode width-page1">
                <div><label><strong class="c-red">*</strong> @GetName( "CampoA", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoA" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoB", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoB" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoC", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoC" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoD", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoD" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoEEE", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoEEE" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoGGGG", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoGGGG" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoHHHH", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoHHHH" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoIIII", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoIIII" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoJ", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoJ" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "CampoK", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.CampoK" class="form-control" placeholder="Edit value" /></div>
                <div><label><strong class="c-red">*</strong> @GetName( "Orden", new ZebraLabelLineSpec())</label> </div>
                <div><input @bind-value="zebraLabelLineSpec.Orden" class="form-control" placeholder="Edit value" /></div>
                <div></div>
                <div class="flex-horizontal-end">
                    <button @onclick='()=>OpenAdd("ZebraLabelSpecs")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='()=>Add("ZebraLabelSpecs")' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>
        </div>
    }
</div>


<div class="flex-verical-center position-relative" style="display:@(modeEdit?"flex":"none");">
    @if (@viewMsg)
    {
        <MessageSaveComponent isVisible="viewMsg" message="@msg">
        </MessageSaveComponent>
    }

    <PageTitleComponent Title=" Label Style" IconName="palette.png"
                        Description="Here you can add label style">
    </PageTitleComponent>

    <div class="container-menu-g">
        <nav>
            <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>
        </nav>
    </div>

    <div class="flex-horizontal-center">
        <div class="grid-columns-header">
            <div><label>@GetName( "Name", new AtomConcept())</label></div>
            <div><input @bind-value="labelStyle.Name" class="form-control" placeholder="Edit value" /></div>
            <div><label>@GetName( "PDFReportName", new LabelStyle())</label></div>
            <div><input @bind-value="labelStyle.PDFReportName" class="form-control" placeholder="Edit value" /></div>

            <div>
                <label>
                    @GetName( "Purpose", new LabelStyle())
                </label>
            </div>
            <div style="position:relative;">
                <select class="form-control" @bind="labelStyle.Purpose" placeholder="Edit value">
                    <option value="@LabelPurpose.Provider">@LabelPurpose.Provider.ToString()</option>
                    <option value="@LabelPurpose.Customer">@LabelPurpose.Customer.ToString()</option>
                    <option value="@LabelPurpose.Inventory">@LabelPurpose.Inventory.ToString()</option>
                    <option value="@LabelPurpose.UPC">@LabelPurpose.UPC.ToString()</option>
                </select>
            </div>

        </div>

        <SfTab Height="400px" HeaderPlacement="HeaderPosition.Left">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "Paper", new LabelStyle())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="flex-horizontal-center">
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "Paper", new LabelStyle())</h3>
                            </div>
                            <div class="grid-columns-2 box-shadow-mode">
                                <div><label><strong class="c-red">*</strong>@GetName( "Name", new AtomConcept())</label></div>
                                <div><input @bind-value="labelPaper.Name" class="form-control" placeholder="Edit value" /></div>
                                <div><label><strong class="c-red">*</strong>@GetName( "Code", new AtomConcept())</label></div>
                                <div><input @bind-value="labelPaper.Code" class="form-control" placeholder="Edit value" /></div>
                                <div><label><strong class="c-red">*</strong>@GetName( "Notes", new AtomConcept())</label></div>
                                <div><input @bind-value="labelPaper.Notes" class="form-control" placeholder="Edit value" /></div>
                                <div><label><strong class="c-red">*</strong>@GetName( "Width", new LabelPaper())</label></div>
                                <div><input @bind-value="labelPaper.Width" class="form-control" placeholder="Edit value" /></div>
                                <div><label><strong class="c-red">*</strong>@GetName( "Height", new LabelPaper())</label></div>
                                <div><input @bind-value="labelPaper.Height" class="form-control" placeholder="Edit value" /></div>
                                @*  <div>
                                </div>
                                <div class="flex-horizontal-end">
                                <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                                <button @onclick='()=>Save("Paper")' class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
                                </div>*@
                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "DataMaxLabelSettings", new LabelStyle())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="flex-horizontal-center">
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "DataMaxLabelSettings", new LabelStyle())</h3>
                                <svg @onclick='()=>ClosedAdd("DataMaxLabelLineSpec")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                            <div class="flex-horizontal-center ">
                                <DataGrid TParameter="DataMaxLabelSpecsView"
                                          EventCallbackMenu="OnContextMenuClick"
                                          parameterList="dataMaxLabelSettingssView"
                                          GridColumnsList="gridColumnListDataMaxSettings"
                                          Width="100%">
                                </DataGrid>
                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "ZebraLabelSettings", new LabelStyle())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="flex-horizontal-center">
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "ZebraLabelSettings", new LabelStyle())</h3>
                                <svg @onclick='()=>ClosedAdd("ZebraLabelSpecs")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                            <div class="flex-horizontal-center ">
                                <DataGrid TParameter="ZebraLabelSpecsView"
                                          EventCallbackMenu="OnContextMenuClick"
                                          parameterList="zebraLabelSettingssView"
                                          GridColumnsList="gridColumnListZebra"
                                          Width="100%">
                                </DataGrid>
                            </div>
                        </div>



                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    </div>
</div>

@code {
    [Parameter]
    public string Page { get; set; } = "";
    [Parameter]
    public string Mode { get; set; } = "Add";
    [Parameter]
    public string filterItems { get; set; } = "";

    public bool ststus = false, ViewPopupCount = false, ViewSelect = false;
    public int ParamCountResul = 0;
    public string ModeSearcher = "";
   

    InputTextSelector? ReferInputTextSelector;

    #region Tag 1
    LabelStyle labelStyle = new();
    LabelPaper labelPaper = new();

    #endregion Tag 1

    #region Tag 2
    List<DataMaxLabelSpecsView> dataMaxLabelSettingssView = new();
    List<DataMaxLabelSpecs> dataMaxLabelSettingss = new();
    DataMaxLabelSpecs dataMaxLabelSettings = new();
    DataMaxLabelLineSpec dataMaxLabelLineSpec = new();
    List<GridColumn> gridColumnListDataMaxSettings = new();
    #endregion Tag 2

    #region Tag 3
    List<ZebraLabelSpecsView> zebraLabelSettingssView = new();
    List<ZebraLabelSpecs> zebraLabelSettingss = new();
    ZebraLabelSpecs zebraLabelSettings = new();
    ZebraLabelLineSpec zebraLabelLineSpec = new();
    List<GridColumn> gridColumnListZebra = new();
    #endregion Tag 3



    public bool modeEdit = true, viewMsg = false;
    public string msg = "", pageView = "";

    protected override void OnInitialized()
    {
        if (Mode == "Edit")
        {
            if (transactionalService?.BoxSelectedItems != null)
            {

                // transactionalItem  = transactionalService.BoxSelectedItems.LinkedTransactionalItem;
            }
            else
            {
                Closed("control");
            }


        }
        if (Mode == "Add")
        {

        }

        gridColumnListDataMaxSettings = new List<GridColumn>
        {
            new GridColumn() { Field=nameof(DataMaxLabelSpecsView.NameLabelField) ,  HeaderText = @GetName( "Name", new DataMaxLabelLineSpec())  },
              new GridColumn() { Field=nameof(DataMaxLabelSpecsView.ColumnSeparatorSpace) ,  HeaderText = @GetName( "ColumnSeparatorSpace", new DataMaxLabelSpecs())  },
                new GridColumn() { Field=nameof(DataMaxLabelSpecsView.Rotation) ,  HeaderText = @GetName( "Rotation", new DataMaxLabelLineSpec())  },
                 new GridColumn() { Field=nameof(DataMaxLabelSpecsView.Font) ,  HeaderText = @GetName( "Font", new DataMaxLabelLineSpec())  },
                  new GridColumn() { Field=nameof(DataMaxLabelSpecsView.Width) ,  HeaderText = @GetName( "Width", new DataMaxLabelLineSpec())  },
                   new GridColumn() { Field=nameof(DataMaxLabelSpecsView.Height) ,  HeaderText = @GetName( "Height", new DataMaxLabelLineSpec())  },
                     new GridColumn() { Field=nameof(DataMaxLabelSpecsView.FontSize) ,  HeaderText = @GetName( "FontSize", new DataMaxLabelLineSpec())  },
                      new GridColumn() { Field=nameof(DataMaxLabelSpecsView.Row) ,  HeaderText = @GetName( "Row", new DataMaxLabelLineSpec())  },
                       new GridColumn() { Field=nameof(DataMaxLabelSpecsView.GGColumn) ,  HeaderText = @GetName( "GGColumn", new DataMaxLabelLineSpec())  },
                        new GridColumn() { Field=nameof(DataMaxLabelSpecsView.IIIColumn) ,  HeaderText = @GetName( "IIIColumn", new DataMaxLabelLineSpec())  },
                         new GridColumn() { Field=nameof(DataMaxLabelSpecsView.JColumn) ,  HeaderText = @GetName( "JColumn", new DataMaxLabelLineSpec())  }
        };

        gridColumnListZebra = new List<GridColumn>
        {
               new GridColumn() { Field=nameof(ZebraLabelSpecsView.NameLabelField) ,  HeaderText = @GetName( "Name", new ZebraLabelLineSpec())  },
              new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoA) ,  HeaderText = @GetName( "CampoA", new ZebraLabelLineSpec())  },
                new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoB) ,  HeaderText = @GetName( "CampoB", new ZebraLabelLineSpec())  },
                 new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoC) ,  HeaderText = @GetName( "CampoC", new ZebraLabelLineSpec())  },
                  new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoD) ,  HeaderText = @GetName( "CampoD", new ZebraLabelLineSpec())  },
                   new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoEEE) ,  HeaderText = @GetName( "CampoEEE", new ZebraLabelLineSpec())  },
                     new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoFFFF) ,  HeaderText = @GetName( "CampoFFFF", new ZebraLabelLineSpec())  },
                      new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoGGGG) ,  HeaderText = @GetName( "CampoGGGG", new ZebraLabelLineSpec())  },
                       new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoHHHH) ,  HeaderText = @GetName( "CampoHHHH", new ZebraLabelLineSpec())  },
                        new GridColumn() { Field=nameof(ZebraLabelSpecsView.CampoIIII) ,  HeaderText = @GetName( "CampoIIII", new ZebraLabelLineSpec())  },



        };

    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }



    public void Add(string value)
    {
        if (value == "Paper")
        {

        }
    }



    public async void OnContextMenuClick(ContextMenuClickEventArgs<DataMaxLabelSpecsView> args)
    {
        DataMaxLabelSpecsView dataMaxLabelSpecs = args.RowInfo.RowData;
        if (args.Item.Text == "Edit")
        {
            ClosedAdd("PossibleValues");
        }

    }


    public async void OnContextMenuClick(ContextMenuClickEventArgs<ZebraLabelSpecsView> args)
    {
        ZebraLabelSpecsView dataMaxLabelSpecs = args.RowInfo.RowData;
        if (args.Item.Text == "Edit")
        {
            ClosedAdd("PossibleValues");
        }

    }





    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo($"/{Page}/{filterItems}");
    }


    protected async void EventIdSelection(string SelectionId)
    {

        ReferInputTextSelector.Refresh();
        StateHasChanged();

    }
    protected async void EventSearcherValue(string value)
    {
        ViewPopupCount = true;

        StateHasChanged();
    }
    public void SetViewElemnt(string Element)
    {
        ModeSearcher = Element;
        if (Element == "LinkedTransactionalItem") { }


    }

    public void EventClosedInput()
    {
        ParamCountResul = 0;
        ViewSelect = false;


        StateHasChanged();
    }


    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {


        }
        if (tile == "Save as...")
        {

        }
        StateHasChanged();
    }


    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }

    public void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
    }

    public void Msg(string? Msg)
    {
        msg = Msg;
        viewMsg = true;
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    public class DataMaxLabelSpecsView : DataMaxLabelLineSpec
    {
        public int ColumnSeparatorSpace { get; set; }
        public string IdLabelField { get; set; }
        public string NameLabelField { get; set; }
    }

    public class ZebraLabelSpecsView : ZebraLabelLineSpec
    {
        public int ColumnSeparatorSpace { get; set; }
        public string IdLabelField { get; set; }
        public string NameLabelField { get; set; }
    }

}
