@page "/BusinessLineDoc/{_filterItems}"
@page "/BusinessLineDoc"

@using SunttelTradePointB.Client.Interfaces.SalesInterfaces;
@using SunttelTradePointB.Client.Services.SalesServices;
@using SunttelTradePointB.Shared.Sales;
@inject HttpClient Http
@inject ISalesDocuments SalesDocumentsService
@inject ContextMenuService ContextMenuService
@inject ITransactionalItemsService transactItemsService
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>

<PageTitleComponent Title="Business line documents" IconName="businessLineDocConcept.png"
                    Description="Describe the Business line documents">
</PageTitleComponent>

<div class="panelMenuContainer">
    <MenuConcet OriginPage="SalesDocuments"></MenuConcet>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>


@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{
    <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@businessLines"
                TItem="BusinessLine"
                ColumnWidth="100%"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="50">

        <Columns>
            <RadzenDataGridColumn TItem="BusinessLine" Property="Name" Title="@GetName("Name", new BasicConcept())" Width="80px" />
            <RadzenDataGridColumn TItem="BusinessLine" Title="@GetName("Action",new BasicConcept())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                <Template Context="data">

                    <Confirm Id="@data.Id" TextValue="@($"¿Confirm delete?")"
                         IdSelect="@IdDelete"
                         ConfirmIdAction='ConfirmDelete'
                         CancelAction="CancelDelete"
                         SelectIdAction="SelectDelete"></Confirm>

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="BusinessLine" Property="@nameof(BusinessLine.Id)" Title="@GetName("Name", new BasicConcept())" Width="50px" />
        
        </Columns>
    </RadzenDataGrid>
    <div class="container-total">
        <div class="item">
            <label>
                @(
                    $"Records: {businessLines.Count}"
                    )
            </label>
        </div>
    </div>

}


@code {
    [Parameter]
    public string _filterItems { get; set; } = "";

    public List<BusinessLine> businessLines = new List<BusinessLine>();


    protected override void OnInitialized()
    {
        transactItemsService.Page = "BusinessLineDoc";
        _filterItems = "all";
        LoadData();
    }


    string IdDelete = "";
    string msg = "";
    bool viewMsg = false;
    bool isLoading = false;

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        businessLines = await SalesDocumentsService.GetCommercialBusinessLines(_filterItems);
        isLoading = false;
        StateHasChanged();
    }


    public void Onload(object args)
    {
        isLoading = false;
        StateHasChanged();
    }

    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<BusinessLine> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        BusinessLine argObj = (BusinessLine)args.Value;

        Navigation.NavigateTo($"/BusinessLineDocConcept/add/{argObj.Id}");
    }

    #endregion Grid

    #region Confirm
    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await SalesDocumentsService.DeleteBusinessLineById(Id);
        if (result) { LoadData(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }
    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }



    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}