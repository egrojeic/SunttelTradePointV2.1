@page "/ShippingStatusDocument/{_filterItems}"
@page "/ShippingStatusDocument"

@using SunttelTradePointB.Client.Interfaces.SalesInterfaces;
@using SunttelTradePointB.Client.Services.SalesServices;
@using SunttelTradePointB.Shared.Sales;
@inject HttpClient Http
@inject ISalesDocuments SalesDocumentsService
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactItemsService
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>

<PageTitleComponent Title="Status of Shipping Document" IconName="Signal.png"
                    Description="Describe the Status of the Shipping Document">
</PageTitleComponent>

<div class="panelMenuContainer">
    <MenuConcet OriginPage="SalesDocuments"></MenuConcet>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>


@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{
    if (ShippingStatuses != null)
    {
        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@ShippingStatuses"
                TItem="ShippingStatus"
                ColumnWidth="100%"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="50">

            <Columns>
                <RadzenDataGridColumn TItem="ShippingStatus" Property="ShippingStatuses.Name" Title="@GetName("Name", new ShippingStatus())" Width="80px" />
                <RadzenDataGridColumn TItem="ShippingStatus" Property="AffectInventory" Title="@GetName("AffectInventory", new ShippingStatus())" Width="120px" Filterable="false" TextAlign="Radzen.TextAlign.Center">
                    <Template>
                        @{
                            bool AffectInventory = (bool)context.GetType().GetProperty(nameof(ShippingStatus.AffectInventory)).GetValue(context);
                            <input type="checkbox" checked="@AffectInventory" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ShippingStatus" Property="EditingAllowed" Title="@GetName("EditingAllowed", new ShippingStatus())" Width="120px" Filterable="false" TextAlign="Radzen.TextAlign.Center">
                    <Template>
                        @{
                            bool EditingAllowed = (bool)context.GetType().GetProperty(nameof(ShippingStatus.EditingAllowed)).GetValue(context);
                            <input type="checkbox" checked="@EditingAllowed" />
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="ShippingStatus" Title="@GetName("Action",new BasicConcept())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                    <Template Context="data">

                        <Confirm Id="@data.Id" TextValue="@($"¿Confirm delete?")"
                         IdSelect="@IdDelete"
                         ConfirmIdAction='ConfirmDelete'
                         CancelAction="CancelDelete"
                         SelectIdAction="SelectDelete"></Confirm>

                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ShippingStatus" Property="Id" Title="@GetName("Id", new ShippingStatus())" Width="50px" />
            </Columns>
        </RadzenDataGrid>
        <div class="container-total">
            <div class="item">
                <label>
                    @(
                        $"Records: {ShippingStatuses.Count}"
                        )
                </label>
            </div>
        </div>

    }
}


@code {
    [Parameter]
    public string _filterItems { get; set; } = "";

    public List<ShippingStatus> ShippingStatuses = new List<ShippingStatus>();


    protected override void OnInitialized()
    {
        transactItemsService.Page = "ShippingStatus";
        _filterItems = "all";
        LoadData();
    }

    string IdDelete = "";
    string msg = "";
    bool viewMsg = false;
    bool isLoading = false;

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        ShippingStatuses = await SalesDocumentsService.GetShippingStatuses(_filterItems);
        isLoading = false;
        StateHasChanged();
    }


    public void Onload(object args)
    {
        isLoading = false;
        StateHasChanged();
    }

    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<ShippingStatus> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        ShippingStatus argObj = (ShippingStatus)args.Value;

        Navigation.NavigateTo($"/ShippingStatusDocumentConcept/add/{argObj.Id}");
    }

    #endregion Grid

    #region Confirm
    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await SalesDocumentsService.DeleteShippingStatusById(Id);
        if (result) { LoadData(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }
    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}