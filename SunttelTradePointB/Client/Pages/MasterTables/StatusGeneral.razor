@page "/Status/{Page}"
@page "/Status/{Page}/{_filterItems}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject HttpClient Http
@inject TransactionalItemsService transactItemsService;
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>
<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>

<PageTitleComponent Title="Status of Transactional Items" IconName="signal.png"
                    Description="Describe how the commercial items could be classified">
</PageTitleComponent>

<div class="panelMenuContainer">
    <MenuConcet OriginPage="Products"></MenuConcet>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>
</div>


@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{

    <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@transactionalItemStatuss"
                TItem="TransactionalItemStatus"
                ColumnWidth="300px"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="50">

        <Columns>
            <RadzenDataGridColumn TItem="TransactionalItemStatus" Property="TransactionalItemStatus.Name" Title="@GetName("Name", new TransactionalItemStatus())" Width="80px" />
            <RadzenDataGridColumn TItem="TransactionalItemStatus" Property="TransactionalItemStatus.Code" Title="@GetName("Code", new AtomConcept())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
            <RadzenDataGridColumn TItem="TransactionalItemStatus" Property="TransactionalItemStatus.Notes" Title="@GetName("Notes", new AtomConcept())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
            <RadzenDataGridColumn TItem="TransactionalItemStatus" Title="@GetName("Action",new TransactionalItemStatus())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                <Template Context="data">
                    <Confirm Id="@data.Id" TextValue="@($"¿ Confirm delete ?")"
                         IdSelect="@IdDelete"
                         ConfirmIdAction='ConfirmDelete'
                         CancelAction="CancelDelete"
                         SelectIdAction="SelectDelete"></Confirm>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TransactionalItemStatus" Property="Id" Title="@GetName("Id", new TransactionalItemStatus())" Width="50px"></RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <div class="container-total">
        <div class="item">
            <label>
                @(
                    $"Records: {transactionalItemStatuss.Count}"
                    )
            </label>
        </div>
    </div>
}


@code {
    [Parameter]
    public string _filterItems { get; set; } = "";

    [Parameter]
    public string Page { get; set; } = "";

    public List<TransactionalItemStatus> transactionalItemStatuss { get; set; }

    bool viewMsg = false;
    string msg = "";
    string IdDelete = "";

    protected override void OnInitialized()
    {
        _filterItems = "all";
        LoadData();
        transactItemsService.Page = "Status";
    }

    bool isLoading = false;

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        transactionalItemStatuss = await transactItemsService.GetTransactionalStatusesTable((_filterItems!=null? _filterItems:"all"));
        isLoading = false;
        StateHasChanged();

    }


    public void Onload(object args)
    {
        isLoading = false;
        StateHasChanged();
    }

    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItemStatus> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItemStatus argObj = (TransactionalItemStatus)args.Value;

        Navigation.NavigateTo($"/StatusConcept/Status/{Page}/{_filterItems}/{argObj.Id}");
    }

    #endregion Grid

    #region Confirm

    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await transactItemsService.DeleteTransactionalItemStatusById(Id);
        if (result) { LoadData(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }

    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }


    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}