@page "/Products"
@page "/Products/{_filterItems}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Grids
@inject HttpClient Http
@inject TransactionalItemsService transactItemsService;
@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject NavigationManager Navigation



<PageTitleComponent Title="Products, Services & Materials" IconName="goods.png"
                    Description="Here you'll find every product or service">
</PageTitleComponent>

<div class="panelMenuContainer">
    <ProductsGeneralMenu></ProductsGeneralMenu>
    <SearchComponent @bind-FilterTextSet="@productsFilter"></SearchComponent>
</div>


<div class="tableBodyContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

    }
    else
    {
        if (itemList != null)
        {
            <SfGrid  DataSource="@itemList"
            AllowFiltering="true"
            AllowTextWrap="false"
            AllowPaging="true"             
            AllowResizing="true"
            ContextMenuItems="@(contextMenuItemModel)">

            <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
            <GridColumns>
                <GridColumn Field="@nameof(TransactionalItem.Code)" HeaderText="@GetName("Code", new AtomConcept())" Width="300x"></GridColumn>
                <GridColumn Field="@nameof(TransactionalItem.Name)" HeaderText="@GetName("Name", new AtomConcept())" Width="90px"></GridColumn>
                <GridColumn Field="@nameof(TransactionalItem.FullClassName)" HeaderText="@GetName("FullClassName", new TransactionalItem())" Width="120px"></GridColumn>
                <GridColumn Field="@nameof(TransactionalItem.IsGeneric)" HeaderText="@GetName("IsGeneric", new TransactionalItem())" Width="120px" DisplayAsCheckBox="true"></GridColumn>
                <GridColumn Field="@nameof(TransactionalItem.ReferenceCost)" HeaderText="@GetName("ReferenceCost", new TransactionalItem())" Width="120px" ></GridColumn>
            </GridColumns>
            <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="TransactionalItem"></GridEvents>
        </SfGrid>
        }

    
    }

</div>

<div id="contextMenu" style="display:none; position:absolute;">
    <div class="contextMenuItem">Show Card</div>
    <div class="contextMenuItem">Print</div>
</div>



@code {
    bool isLoading = false;
    [Parameter]
    public string _filterItems { get; set; }

    List<ContextMenuItemModel> contextMenuItemModel = new List<ContextMenuItemModel>()
        {
        new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" }
        };


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public string? productsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    List<ConceptGroup> groups = new List<ConceptGroup>();
    private int currentPage = 1;
    private int itemsPerPage = 25;

    List<TransactionalItem>? itemList;
    IList<TransactionalItem>? selectedItems;

    private async Task UpdatePage(ChangeEventArgs args)
    {
        currentPage = int.Parse(args.Value.ToString());
        await LoadData();
    }

    private async void UpdateItemsPerPage(ChangeEventArgs args)
    {
        itemsPerPage = int.Parse(args.Value.ToString());
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        var data = await transactItemsService.GetTransactionalItemsList(currentPage, 50, _filterItems);
        itemList = data;
        isLoading = false;
        StateHasChanged();

    }

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItem> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>

    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItem argObj = (TransactionalItem)args.Value;
      
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactionalItem> argObj)
    {
        TransactionalItem itemSeasonBusiness = argObj.RowInfo.RowData;
        OpenOrder(itemSeasonBusiness);
        transactItemsService.transactionalItemId = itemSeasonBusiness.Id;
        Console.WriteLine($"Menu item with Value={argObj.Name} clicked");
        if ( transactItemsService.transactionalItemId != null)
        {
            ContextMenuService.Close();
        }
    }



    public async Task OpenOrder(TransactionalItem itemCard)
    {
        transactItemsService.transactionalItemId = itemCard.Id;
        transactItemsService.TransactionalItems = itemCard;
        transactItemsService.Page = "TransactionalItemCard";
        Navigation.NavigateTo("/TransactionalItemCard/0/Edit");
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name != null ? Name : Name;
    }

}
