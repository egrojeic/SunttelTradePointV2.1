@page "/Products"
@page "/Products/{_filterItems}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Grids
@inject HttpClient Http
@inject ITransactionalItemsService transactItemsService;
@inject IJSRuntime JSRuntime
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<SpeechRecognition SetFilter="SetFilter"></SpeechRecognition>

<PageTitleComponent Title="Products, Services & Materials" IconName="goods.png"
                    Description="Here you'll find every product or service">
</PageTitleComponent>

<div class="panelMenuContainer">
    <ProductsGeneralMenu filter="@_filterItems"></ProductsGeneralMenu>
    <SearchComponent @bind-FilterTextSet="@productsFilter"></SearchComponent>
</div>


<div>


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

    }
    else
    {
        if (itemList != null)
        {
            <RadzenDataGrid @ref=@dataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"                   
                    AllowPaging="false"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@itemList"
                    TItem="TransactionalItem"
                    ColumnWidth="100%"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value=@selectedItems Class="m-4"
                    CellContextMenu="@ShowContextMenuWithContent"
                    >
                <Columns>
                    <RadzenDataGridColumn TItem="TransactionalItem" Property="Code" Title="Code" Frozen="false" Width="80px" />
                    <RadzenDataGridColumn TItem="TransactionalItem" Property="Name" Filterable="true" Title="Name" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                    <RadzenDataGridColumn TItem="TransactionalItem" Property="FullClassName" Title="Group" Width="160px" />
                    <RadzenDataGridColumn TItem="TransactionalItem" Property="Status.Name" Title="Status" Width="200px" />
                    <RadzenDataGridColumn TItem="TransactionalItem" Property="IsGeneric" Title="Is Generic" Width="120px">
                        <Template>
                            @{
                                bool IsGeneric = (bool)context.GetType().GetProperty(nameof(TransactionalItem.IsGeneric)).GetValue(context);

                                <input type="checkbox" checked="@IsGeneric" />

                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="TransactionalItem" Property="ReferenceCost" Title="Reference Cost" Width="120px" TextAlign="Radzen.TextAlign.Right" />

                </Columns>
            </RadzenDataGrid>
            <RadzenPager @ref=pager
                Count="@TotalItems"
                         PageNumbersCount="@PageNumbersCount" 
                         PageChanged=@OnPage
                         PageSize="@itemsPerPage"
                         PageSizeOptions="@pageSizeOptions" 
                         PagingSummaryFormat="@pagingSummaryFormat" />

            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {itemList.Count}"
                            )
                    </label>
                </div>
            </div>
        }


    }

</div>

<div id="contextMenu" style="display:none; position:absolute;">
    <div class="contextMenuItem">Show Card</div>
    <div class="contextMenuItem">Print</div>
</div>



@code {
    bool isLoading = false;
    [Parameter]
    public string _filterItems { get; set; }

    RadzenDataGrid<TransactionalItem> dataGrid;
    RadzenPager pager;

    public int TotalItems { get; set; } = 50;
    public int PageNumbersCount { get; set; } = 1;
    private int currentPage = 1;
    private int itemsPerPage = 10;

    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };

    protected override void OnInitialized()
    {
        // _filterItems = "Prueba 23";
        if (_filterItems != "" && _filterItems != null)
        {
            LoadData();
        }
        base.OnInitialized();
    }



    public string? productsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    List<ConceptGroup> groups = new List<ConceptGroup>();
    List<TransactionalItem>? itemList;
    IList<TransactionalItem>? selectedItems;

    public async void OnPage(PagerEventArgs args)
    {
        currentPage = args.PageIndex + 1;
        itemsPerPage = args.Top;
        await LoadData(false);
    }

    private async void UpdateItemsPerPage(ChangeEventArgs args)
    {
        itemsPerPage = int.Parse(args.Value.ToString());
        await LoadData();
    }

    private async Task LoadData(bool showLoading = true)
    {
        isLoading = showLoading;
        try
        {
            var data = await transactItemsService.GetTransactionalItemsList(currentPage, itemsPerPage, _filterItems);
            itemList = data;
            TotalItems = 50;
            PageNumbersCount = TotalItems / itemsPerPage;
            await pager.Reload();
        }
        catch (Exception ex)
        {

        }
        isLoading = false;
        StateHasChanged();
    }
        
       void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItem> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItem argObj = (TransactionalItem)args.Value;
        Navigate(argObj.Id);
        Console.WriteLine($"Menu item with Value={argObj.Name} clicked");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    private async Task Navigate(string productId)
    {
        Navigation.NavigateTo($"/TransactionalItemCard/{_filterItems}/{productId}");
    }


    public async Task OpenOrder(TransactionalItem itemCard)
    {
        transactItemsService.Page = "TransactionalItemCard";
        Navigation.NavigateTo($"/TransactionalItemCard/{_filterItems}/{itemCard.Id}");
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name != null ? Name : Name;
    }
    public void SetFilter(string value)
    {
        _filterItems = value;
        LoadData();

    }
}
