@page "/WarehousesGeneral"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.EntityShareComponents
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Services.MasterTablesServices

@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject WarehouseService warehouseService
@inject NavigationManager navigationManager

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }
</style>

<PageTitleComponent Title="Warehouses" IconName="Warehouses.png"
                    Description="Warehouses">
</PageTitleComponent>

<div class="panelMenuContainer">
    <WaarehousesMenu></WaarehousesMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>

<div class="tableBodyContainer">
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Warehouses"></WaitingProcessIndicator>
    }
    else
    {
        @if (warehouseList != null)
        {





            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@warehouseList"
                    TItem="Warehouse"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuWithContent"
                    PageNumbersCount="100"
                    PageSize="20">

                <Columns>
                     <RadzenDataGridColumn TItem="Warehouse" Property="Warehouse.Name" Title="@lblWareHouseParent" Width="200px" />
                      <RadzenDataGridColumn TItem="Warehouse" Property="Warehouse.Code" Title="@lblWareHouseParent" Width="200px" />
                    <RadzenDataGridColumn TItem="Warehouse" Property="WareHouseParent.AssociatedEntity.Name" Title="@lblWareHouseParent" Width="200px" />
                    <RadzenDataGridColumn TItem="Warehouse" Property="AssociatedEntity.Name" Title="@lblAssociatedEntity" Width="200px" TextAlign="Radzen.TextAlign.Center" />
                    <RadzenDataGridColumn TItem="Warehouse" Property="IsExternal" Title="@lblIsExternal" Width="80px" TextAlign="Radzen.TextAlign.Center">
                        <Template>
                            @{
                                var isExternal = (bool)context.GetType().GetProperty(nameof(Warehouse.IsExternal)).GetValue(context);
                                if (isExternal)
                                {
                                    <input type="checkbox" checked="isExternal" disabled/>
                                }
                                else
                                {
                                    <input type="checkbox" />
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Warehouse" Property="ScanSimulated" Title="@lblScanSimulated" Width="200px" TextAlign="Radzen.TextAlign.Center">
                        <Template>
                               @{
                                var ScanSimulated = (bool)context.GetType().GetProperty(nameof(Warehouse.ScanSimulated)).GetValue(context);
                                if (ScanSimulated)
                                {
                                                                                    <input type="checkbox" checked="ScanSimulated" />
                                }
                                else
                                {
                                                                                    <input type="checkbox" />
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Warehouse" Property="IsInventoryControlled" Title="@lblIsInventoryControlled" Width="200px" TextAlign="Radzen.TextAlign.Center">
                        <Template>
                            @{
                                var isInventoryControlled = (bool)context.GetType().GetProperty(nameof(Warehouse.IsInventoryControlled)).GetValue(context);
                                if (isInventoryControlled)
                                {
                                    <input type="checkbox" checked="isInventoryControlled" />
                                }
                                else
                                {
                                    <input type="checkbox" />
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Warehouse" Property="InventoryTransactionalItemType.Name" Title="@lblInventoryTransactionalItemType" Width="80px" />
                    <RadzenDataGridColumn TItem="Warehouse" Property="WarehouseAddress.AddressLine1" Title="@lblWarehouseAddress" Width="200px" />
                    <RadzenDataGridColumn TItem="Warehouse" Property="ContactPerson.Name" Title="@lblContactPerson" Width="200px" />
                    <RadzenDataGridColumn TItem="Warehouse" Property="IsActive" Title="@lblIsActive" Width="200px" />
                   
                </Columns>
            </RadzenDataGrid>



        }
    }

</div>


@code {
    string filterText = "";
    List<Warehouse>? warehouseList;
    IList<Warehouse> warehouseSelectList;

    bool isLoading = false;
    string _filterItems = "";

    private string lblWareHouseParent = "";
    private string lblAssociatedEntity = "";
    private string lblIsExternal = "";
    private string lblIsTransformationFacility = "";
    private string lblScanSimulated = "";
    private string lblIsInventoryControlled = "";
    private string lblInventoryTransactionalItemType = "";
    private string lblWarehouseAddress = "";
    private string lblContactPerson = "";
    private string lblIsActive = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetFilterWarehouse(_filterItems);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        lblWareHouseParent = UICommonFunctions.GetDisplayName(new Warehouse(), "WareHouseParent");
        lblAssociatedEntity = UICommonFunctions.GetDisplayName(new Warehouse(), "AssociatedEntity");
        lblIsExternal = UICommonFunctions.GetDisplayName(new Warehouse(), "IsExternal");
        lblIsTransformationFacility = UICommonFunctions.GetDisplayName(new Warehouse(), "IsTransformationFacility");
        lblScanSimulated = UICommonFunctions.GetDisplayName(new Warehouse(), "ScanSimulated");
        lblIsInventoryControlled = UICommonFunctions.GetDisplayName(new Warehouse(), "IsInventoryControlled");
        lblInventoryTransactionalItemType = UICommonFunctions.GetDisplayName(new Warehouse(), "InventoryTransactionalItemType");
        lblWarehouseAddress = UICommonFunctions.GetDisplayName(new Warehouse(), "WarehouseAddress");
        lblContactPerson = UICommonFunctions.GetDisplayName(new Warehouse(), "ContactPerson");
        lblIsActive = UICommonFunctions.GetDisplayName(new Warehouse(), "IsActive");
        await GetFilterWarehouse();
    }

    public async Task GetFilterWarehouse(string filter = "")
    {
        if (filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

            var response = await warehouseService.GetWarehouseList(filter);

            if (response != null)
                warehouseList = response;

            isLoading = false;
            StateHasChanged();
        }
    }



    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<Warehouse> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        Warehouse argObj = (Warehouse)args.Value;

        navigationManager.NavigateTo($"/WarehousesGeneral/{argObj.Id}/Edit");
    }

    #endregion Grid


}
