@page "/WarehousesGeneral"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.EntityShareComponents
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Services.MasterTablesServices

@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject WarehouseService warehouseService


<PageTitleComponent Title="Warehouses" IconName="Warehouses.png"
                    Description="Warehouses">
</PageTitleComponent>

<div class="panelMenuContainer">
    <WaarehousesMenu></WaarehousesMenu>
    <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

</div>

<div class="tableBodyContainer">
    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Warehouses"></WaitingProcessIndicator>
    }else{
        @if(warehouseList != null)
        {
            <SfGrid DataSource="warehouseList"
            Height="auto"
            Width="auto"
            TValue="Warehouse"
            AllowFiltering="true"
            AllowTextWrap="false"
            AllowPaging="true"
            AllowResizing="true"
            ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
                <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(Warehouse.WareHouseParent.AssociatedEntity.Name)" HeaderText="WareHouse Parent" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(Warehouse.AssociatedEntity.Name)" HeaderText="Associated Entity" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(Warehouse.IsExternal)" HeaderText="Is External" Width="110">
                        <Template>
                            @{
                                var isExternal = (bool)context.GetType().GetProperty(nameof(Warehouse.IsExternal)).GetValue(context);
                                if (isExternal)
                                {
                                    <input type="checkbox" checked="isExternal" />
                                }
                                else
                                {
                                    <input type="checkbox"  />
                                }
                             }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(Warehouse.ScanSimulated)" HeaderText="Scan Simulated" Width="110">
                        <Template>
                            @{
                                var ScanSimulated = (bool)context.GetType().GetProperty(nameof(Warehouse.ScanSimulated)).GetValue(context);
                                if (ScanSimulated)
                                {
                                    <input type="checkbox" checked="ScanSimulated" />
                                }
                                else
                                {
                                    <input type="checkbox" />
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(Warehouse.IsInventoryControlled)" HeaderText="Inventory Controlled" Width="110">
                        <Template>
                            @{
                                var isInventoryControlled = (bool)context.GetType().GetProperty(nameof(Warehouse.IsInventoryControlled)).GetValue(context);
                                if (isInventoryControlled)
                                {
                                    <input type="checkbox" checked="isInventoryControlled" />
                                }
                                else
                                {
                                    <input type="checkbox" />
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="InventoryTransactionalItemType.Name" HeaderText="Inventory Transactional" Width="110"></GridColumn>
                    <GridColumn Field="WarehouseAddress.AddressLine1" HeaderText="Address" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(Warehouse.ContactPerson.Name)" HeaderText="Contact Person" Width="110"></GridColumn>
                    <GridColumn Field="@nameof(Warehouse.IsActive)" HeaderText="Is Active" Width="110">
                        <Template>
                            @{
                                var isActive = (bool)context.GetType().GetProperty(nameof(Warehouse.IsActive)).GetValue(context);
                                if (isActive)
                                {
                                    <input type="checkbox" checked="isActive" />
                                }
                                else
                                {
                                    <input type="checkbox" />
                                }
                            }
                        </Template>
                    </GridColumn>
                </GridColumns>
                <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="Warehouse"></GridEvents>
            </SfGrid>



        }
    }

</div>


@code {
    string filterText = "";
    List<Warehouse>? warehouseList;
    IList<Warehouse> warehouseSelectList;

    bool isLoading = false;
    string _filterItems = "";

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            GetFilterWarehouse(_filterItems);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFilterWarehouse();
    }

    public async Task GetFilterWarehouse(string filter = "")
    {
        if(filter.Length > 0)
        {
            isLoading = true;
            StateHasChanged();

            var response = await warehouseService.GetWarehouseList(filter);

            if (response != null)
                warehouseList = response;

            isLoading = false;
            StateHasChanged();
        }
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<Warehouse> args)
    {
        Warehouse _Warehouse = new();
        _Warehouse = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            //navigationManager.NavigateTo($"/Actors/{_EntityActor.Id}");
        }
    }


}
