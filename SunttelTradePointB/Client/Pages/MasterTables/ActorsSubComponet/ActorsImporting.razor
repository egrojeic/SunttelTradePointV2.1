@page "/ActorsImporting"


@using SunttelTradePointB.Shared.Common

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ActorsNodeService actorsNodeServive;



<PageTitleComponent Title="Actors Importing" IconName="upload.png"
                    Description="you can import actors">
</PageTitleComponent>



<div class="panelMenuContainer">
    <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
</div>

<div class="iport-file">
    <UploadFile EventMultipartFormDataContent="FileUpload"
                isLoading="isLoading">
    </UploadFile>
</div>

@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Entities"></WaitingProcessIndicator>


}
else
{
    @if (entityNodesList != null && statusSaved)
    {


        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                PageSize="50"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@entityNodesList"
                TItem="EntityActor"
                ColumnWidth="300px"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                        Class="m-4">

            <Columns>
                <RadzenDataGridColumn TItem="EntityActor" Title="Status" Frozen="true" Sortable="false" Filterable="false" Width="60px">
                    <Template Context="data">
                        <RadzenImage Path="@(GetFullPathPhoto())" style="width: 40px; height: 40px; border-radius: 8px;" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="EntityActor" Property="Code" Title="Code" Frozen="true" Width="80px" />
                <RadzenDataGridColumn TItem="EntityActor" Property="Name" Filterable="true" Title="Name" Frozen="true" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="EntityActor" Property="EMailAddress" Title="EMailAddress" Width="160px" />
                <RadzenDataGridColumn TItem="EntityActor" Title="Status comment" Frozen="true" Sortable="false" Filterable="false" Width="60px">
                    <Template Context="data">
                        <p>...</p>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>


    }
}






@code {
    [Parameter]
    public string filter { get; set; }
    bool isLoading = false;

    public bool statusSaved { get; set; } = false;

    List<EntityActor>? entityNodesList;

    private ElementReference fileInput;

    private async Task HandleFileUpload()
    {
        //var file = await fileInput.[0].Text();
        // Hacer algo con el archivo
    }

    public async void FileUpload(MultipartFormDataContent file)
    {
        statusSaved = false;
        isLoading = true;
        StateHasChanged();
        var list = await actorsNodeServive.EntityImport(file);
        isLoading = false;
        statusSaved = true;
        StateHasChanged();
    }

    public string GetFullPathPhoto(){
        return "ok_ico.png";
    }


    public void Home()
    {
        Navigation.NavigateTo($"/ActorsImporting/{filter}");
    }


}