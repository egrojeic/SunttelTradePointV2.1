@page "/QualityTrafficLightGeneral"
@page "/QualityTrafficLightGeneral/{_filterItems}"



@using SunttelTradePointB.Shared.Quality;
@using SunttelTradePointB.Client.Shared.Menus.QualityEvaluation;
@inject TransactionalItemsService transactItemsService;
@inject SunttelTradePointB.Client.Services.QualityEvaluationServices.QualityEvaluationServices QualityEvaluationServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>

<PageTitleComponent Title="Quality Traffic Light" IconName="Traffic.png"
                    Description="With this tool you can add edit quality traffic light">
</PageTitleComponent>




<div class="panelMenuContainer">
    <QualityTrafficLightGeneralMenu>
    </QualityTrafficLightGeneralMenu>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
    @*<RangeDatesInput StartDate="@startingDate"
    StartDateName="Date"
    EventSearchAll="EventSearchAll"></RangeDatesInput>*@

</div>





<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Quality traffic light"></WaitingProcessIndicator>

    }
    else
    {
        @if (qualityTrafficLightList != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="20"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@qualityTrafficLightList"
                    TItem="QualityTrafficLight"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value="@selectedcommercialdocuments"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
                <Columns>

                    <RadzenDataGridColumn TItem="QualityTrafficLight" Property="@nameof(QualityTrafficLight.Name)" Title="@GetName("Name", new QualityTrafficLight() )" Width="208px" />
                    <RadzenDataGridColumn TItem="QualityTrafficLight" Property="@nameof(QualityTrafficLight)" Title="Color" Width="208px">
                        <Template Context="data">
                            <div class="color-item" style="background-color:rgb(@(GetColor(data)));">
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="QualityTrafficLight" Title="@GetName("Action",new BasicConcept())" Sortable="false" Width="120px" TextAlign="Radzen.TextAlign.Center">
                        <Template Context="data">
                            <Confirm Id="@data.Id" TextValue="@($"¿Are you sure to permanently delete Name: {@data.Name} ?")"
                             IdSelect="@IdDelete"
                             ConfirmIdAction='ConfirmDelete'
                             CancelAction="CancelDelete"
                             SelectIdAction="SelectDelete"></Confirm>
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {qualityTrafficLightList.Count}"
                            )
                    </label>
                </div>
            </div>

        }
    }
</div>


@code {

    [Parameter]
    public string _filterItems { get; set; }
    List<QualityTrafficLight>? qualityTrafficLightList { get; set; }

    public QualityTrafficLight qualityTrafficLight { get; set; }
    IList<QualityTrafficLight>? selectedcommercialdocuments;


    bool viewMsg = false;
    string IdDelete = "";
    string msg = "";
    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {
        _filterItems = "all"; LoadData();
        base.OnInitialized();
    }

    public async void LoadData()
    {
        isLoading = true;

        qualityTrafficLightList = await QualityEvaluationServices.GetQualityTrafficLightList((_filterItems != null ? _filterItems : "all"), 1, 20);

        if (qualityTrafficLight != null)
        { }
        isLoading = false;
        StateHasChanged();
    }

    public void EventSearchAll(string value)
    {
        docsFilter = value;
    }

    public async void SetType(QualityTrafficLight item)
    {
        if (item != null)
        {
            qualityTrafficLight = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<QualityTrafficLight> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        QualityTrafficLight argObj = (QualityTrafficLight)args.Value;
        EventIdSelectionMenuItem($"QualityTrafficLightItem/{argObj.Id}/{docsFilter}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void SetdocsFilter(string value)
    {
        docsFilter = value;
        StateHasChanged();
    }

    #region Confirm
    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await QualityEvaluationServices.DeleteQualityTrafficLightById(Id);
        if (result) { LoadData(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }
    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }


    public string GetColor(QualityTrafficLight item)
    {
        string Color = "0,0,0";
        if (item != null)
        {
            Color = $"{item.R},{item.G},{item.B}";
        }
        return Color;
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void EventIdSelectionMenuItem(string name)
    {
        Navigation.NavigateTo(name);
        //Js.InvokeAsync<object>("open", name, "_blank");
    }

}
