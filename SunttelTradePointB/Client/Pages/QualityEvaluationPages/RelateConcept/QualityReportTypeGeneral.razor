@page "/QualityReportTypeGeneral"
@page "/QualityReportTypeGeneral/{_filterItems}"



@using SunttelTradePointB.Shared.Quality;
@using SunttelTradePointB.Client.Shared.Menus.QualityEvaluation;
@inject TransactionalItemsService transactItemsService;
@inject SunttelTradePointB.Client.Services.QualityEvaluationServices.QualityEvaluationServices QualityEvaluationServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<PageTitleComponent Title="Quality Report Types" IconName="QualityParameters.png"
                    Description="With this tool you can add edit quality report types">
</PageTitleComponent>


<div class="panelMenuContainer">
    <QualityReportTypeGeneralMenu>
    </QualityReportTypeGeneralMenu>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
   @* <RangeDatesInput StartDate="@startingDate"
                     StartDateName="Date"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>*@

</div>



<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Quality report type item"></WaitingProcessIndicator>

    }
    else
    {
        @if (qualityReportTypeList != null)
        {

            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@qualityReportTypeList"
                    TItem="QualityReportType"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value="@selectedcommercialdocuments"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn TItem="QualityReportType" Property="@nameof(QualityReportType.Name)" Title="@GetName("Name", new QualityReportType() )" Width="208px" />

            </Columns>
        </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {qualityReportTypeList.Count}"
                            )
                    </label>
                </div>
            </div>

        }
    }
</div>


@code {

    [Parameter]
    public string _filterItems { get; set; }
    List<QualityReportType>? qualityReportTypeList { get; set; }

    public QualityReportType qualityReportType { get; set; }
    IList<QualityReportType>? selectedcommercialdocuments;

    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {
        _filterItems = "all"; 
        LoadData();
        base.OnInitialized();
    }

    public async void LoadData()
    {
        isLoading = true;       
            qualityReportTypeList = await QualityEvaluationServices.GetQualityReportTypeList((_filterItems != null ? _filterItems : "all"), 1, 20);
        if (qualityReportType != null)
        {
        }
        isLoading = false;
        StateHasChanged();
    }

    public void EventSearchAll(string value)
    {
        docsFilter = value;
    }

    public async void SetType(QualityReportType item)
    {

        if (item != null)
        {
            qualityReportType = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<QualityReportType> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        QualityReportType argObj = (QualityReportType)args.Value;
        EventIdSelectionMenuItem($"QualityReportTypeItem/{argObj.Id}/{docsFilter}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void SetdocsFilter(string value)
    {
        docsFilter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void EventIdSelectionMenuItem(string name)
    {
         Navigation.NavigateTo(name);
        //Js.InvokeAsync<object>("open", name, "_blank");
    }

}
