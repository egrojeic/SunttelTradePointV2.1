@page "/QualityControlPanel"
@page "/QualityControlPanel/{_filterItems}"


@using SunttelTradePointB.Shared.Quality;
@using SunttelTradePointB.Client.Shared.Menus.QualityEvaluation;
@using SunttelTradePointB.Client.Shared.QualityEvaluation;
@using SunttelTradePointB.Client.Interfaces.MasterTablesInterfaces;


@inject ITransactionalItemsService transactItemsService;
@inject SunttelTradePointB.Client.Services.QualityEvaluationServices.QualityEvaluationServices QualityEvaluationServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>


@if (_page == "item")
{
    <QualityEvaluationItem PageHome="@PageHome" qualityEvaluationId="@qualityEvaluationId">
    </QualityEvaluationItem>
}

@if (_page == "grid")
{
    <PageTitleComponent Title="Quality Control Panel" IconName="QualityParameters.png"
                        Description="With this tool you can add and edit quality control panel">
    </PageTitleComponent>
    <div class="panelMenuContainer">
        <QualityEvaluationMenu PageView="@_page" PageHome="@Page">
        </QualityEvaluationMenu>
        <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
    </div>

    <div class="panelMenuContainer">
        <QualityEvaluationMenu2 SetType="SetType"></QualityEvaluationMenu2>
        <RangeDatesInput @bind-StartDate="@startingDate"
                         StartDateName="Form"
                         EndDateName="To"
        @bind-EndDate="endDate"
                         EventSearchAll="EventSearchAll"></RangeDatesInput>
    </div>

    <div class="tableContainer">
        @if (isLoading)
        {
            <WaitingProcessIndicator loadingTopic="Quality Evaluation Items"></WaitingProcessIndicator>
        }
        else
        {
            @if (qualityEvaluationList != null)
            {
                <RadzenDataGrid AllowFiltering="true"
                                AllowColumnResize="true"
                                AllowAlternatingRows="true"
                                FilterMode="FilterMode.Advanced"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowSorting="true"
                                PageSize="20"
                                AllowPaging="true"
                                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                ShowPagingSummary="true"
                                Data="@qualityEvaluationList"
                                TItem="QualityEvaluation"
                                ColumnWidth="300px"
                                SelectionMode="DataGridSelectionMode.Single"
                                LogicalFilterOperator="LogicalFilterOperator.Or"
                                @bind-Value="@selectedcommercialdocuments"
                                CellContextMenu="@ShowContextMenuCommercialDocument">
                    <Columns>
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="QualityReportType.Name" Title="@GetName("QualityReportType", new QualityEvaluation() )" Width="108px" />
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="InspectionDate" Title="@GetName("InspectionDate", new QualityEvaluation() )" Filterable="false" Sortable="false" FormatString="{0:MM/dd/yyyy}" Width="88px" />
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="QuantityToInspect" Title="@GetName("QuantityToInspect", new QualityEvaluation() )" TextAlign="Radzen.TextAlign.Right" Filterable="false" Width="88px" />
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="QuantityInspected" Title="@GetName("QuantityInspected", new QualityEvaluation() )" TextAlign="Radzen.TextAlign.Right" Filterable="false" Width="88px" />
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="QuantityWithIssues" Title="@GetName("QuantityWithIssues", new QualityEvaluation() )" TextAlign="Radzen.TextAlign.Right" Filterable="false" Width="88px" />
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="Pack" Title="@GetName("Pack", new QualityEvaluation() )" Filterable="false" Width="88px" TextAlign="Radzen.TextAlign.Right" />
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="@nameof(QualityEvaluation.TrafficLightStatus)" Title="@GetName("TrafficLightStatus", new QualityEvaluation() )" TextAlign="Radzen.TextAlign.Center" Width="88px">
                            <Template Context="data">
                                <div class="color-item" style="background-color:rgb(@(GetColor(data.TrafficLightStatus)));">
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="ActionToTake.Name" Title="@GetName("ActionToTake", new QualityEvaluation() )" Filterable="false" Width="108px" />
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="OverKill" Title="@GetName("OverKill", new QualityEvaluation() )" TextAlign="Radzen.TextAlign.Center" Filterable="false" Sortable="false" Width="88px">
                            <Template>
                                @{
                                    var OverKill = (bool)context.GetType().GetProperty(nameof(QualityEvaluation.OverKill)).GetValue(context);
                                    <input type="checkbox" checked="@OverKill" disabled />
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="QualityEvaluation" Property="Id" Title="@GetName("Id", new QualityEvaluation() )" Filterable="false" Width="38px" />

                    </Columns>
                </RadzenDataGrid>
                <div class="container-total">
                    <div class="item">
                        <label>
                            @(
                                $"Records: {qualityEvaluationList.Count}"
                                )
                        </label>
                    </div>
                </div>

            }
        }
    </div>
}

@if (_page == "view")
{
    <PageTitleComponent Title="Quality Control Panel Dynamic View" IconName="QualityParameters.png"
                        Description="With this tool you can add and edit quality control panel">
    </PageTitleComponent>
    <div class="panelMenuContainer">
        <QualityEvaluationMenu PageView="@_page" PageHome="@Page">
        </QualityEvaluationMenu>
        <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
    </div>

    <div class="panelMenuContainer">
        <QualityEvaluationMenu2 SetType="SetType"></QualityEvaluationMenu2>
        <RangeDatesInput @bind-StartDate="@startingDate"
                         StartDateName="Form"
                         EndDateName="To"
        @bind-EndDate="endDate"
                         EventSearchAll="EventSearchAll"></RangeDatesInput>
    </div>

    <QualityEvaluationPageVIew QualityEvaluationList="@qualityEvaluationList"></QualityEvaluationPageVIew>

}

@code {

    [Parameter]
    public string _filterItems { get; set; }
    List<QualityEvaluation>? qualityEvaluationList { get; set; }

    public QualityReportType qualityReportType { get; set; }
    IList<QualityEvaluation>? selectedcommercialdocuments;

    bool isLoading = false;
    string _page = "grid";
    string qualityEvaluationId = "";

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {
        if (_filterItems != null) LoadData();
        base.OnInitialized();
    }

    public async void LoadData()
    {
        isLoading = true;

        qualityEvaluationList = await QualityEvaluationServices.GetQualityEvaluationServicesList((_filterItems != null ? _filterItems : "all"), startingDate, endDate,qualityReportType?.Name, 1, 100);

        if (qualityReportType != null)
        { }
        isLoading = false;
        StateHasChanged();
    }

    public void EventSearchAll(string value)
    {
        docsFilter = value;
    }

    public void SetType(QualityReportType item)
    {
        qualityReportType = item;
        StateHasChanged();
    }

    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<QualityEvaluation> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        QualityEvaluation argObj = (QualityEvaluation)args.Value;
        qualityEvaluationId = argObj.Id;
        Page("item");
        StateHasChanged();
        // Navigation.NavigateTo($"QualityEvaluationItem/{argObj.Id}/{docsFilter}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void SetdocsFilter(string value)
    {
        docsFilter = value;
        StateHasChanged();
    }

    public string GetColor(QualityTrafficLight item)
    {
        string Color = "0,0,0";
        if (item != null)
        {
            Color = $"{item.R},{item.G},{item.B}";
        }
        return Color;
    }

    public void Page(string name)
    {
        _page = name;
        StateHasChanged();
    }

    public void PageHome()
    {
        _page = "grid";
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
}
