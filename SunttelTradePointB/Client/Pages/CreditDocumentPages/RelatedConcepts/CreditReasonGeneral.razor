@page "/CreditReasonGeneral"
@page "/CreditReasonGeneral/{_page}"
@page "/CreditReasonGeneral/{_page}/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.CreditDocumentServices.CreditDocumentServices CreditDocumentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }


    .e-tab .e-tab-header.e-vertical .e-toolbar-item .e-tab-text {
        font-size: 12px;
        width: 150px;
    }

</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>

<PageTitleComponent Title="Credit Reason" IconName="creditReason.png"
                    Description="With this tool you can create and edit Credit Reason ">
</PageTitleComponent>

<div class="panelMenuContainer">
    <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
    <CreditReasonMenu page="@_page"></CreditReasonMenu>
    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>
</div>

<div class="tableContainer">

    @if (isLoading)
    {
        <WaitingProcessIndicator loadingTopic="Credit Reason"></WaitingProcessIndicator>
    }
    else
    {
        @if (creditReasonList != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="creditReasonList"
                    TItem="CreditReason"
                    ColumnWidth="100%"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
                <Columns>
                    <RadzenDataGridColumn TItem="CreditReason" Property="Name" Title="@GetName("Name",new BasicConcept())" Width="308px" />
                    <RadzenDataGridColumn TItem="CreditReason" Title="@GetName("Action",new BasicConcept())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                        <Template Context="data">

                            <Confirm Id="@data.Id" TextValue="@($"¿ Confirm delete ?")"
                             IdSelect="@IdDelete"
                             ConfirmIdAction='ConfirmDelete'
                             CancelAction="CancelDelete"
                             SelectIdAction="SelectDelete"></Confirm>

                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {creditReasonList.Count}"
                            )
                    </label>
                </div>
            </div>
        }

    }
</div>

@code {
    [Parameter]
    public string _filterItems { get; set; }
    [Parameter]
    public string _page { get; set; }
    public List<CreditReason> creditReasonList { get; set; }

    bool viewMsg = false;
    bool isLoading = false;
    string IdDelete = "";
    string msg = "";

    DateTime startingDate = DateTime.Now;

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        _filterItems = "all"; LoadData();
        base.OnInitialized();

    }

    public async void LoadData()
    {
        isLoading = true;
        creditReasonList = await CreditDocumentServices.GetCreditReasonList((filter != null ? filter : "all"), 1, 20);
        isLoading = false;
        StateHasChanged();
    }

    #region Confirm
    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await CreditDocumentServices.DeleteCreditReasonsById(Id);
        if (result) { creditReasonList = await CreditDocumentServices.GetCreditReasonList((filter != null ? filter : "all"), 1, 20); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }
    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<CreditReason> args) => ContextMenuService.Open(args, ds =>
        @<RadzenMenu Click="OnMenuItemClick">
            <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
            <RadzenMenuItem Text="Delete" Value=args.Data Icon="delete"></RadzenMenuItem>
        </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        CreditReason argObj = (CreditReason)args.Value;
        if (args.Text == "Edit") Navigation.NavigateTo($"CreditReason/{_page}/{argObj.Id}/{_filterItems}");
        if (args.Text == "Delete")
        {
            IdDelete = argObj.Id;
        }
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void Setfilter(string value)
    {
        filter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void Add()
    {

    }

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }

    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/Credits/{paramFilter}");
        Navigation.NavigateTo($"/{_page}/1");
    }

    //public void EventIdSelectionMenuItem(string name)
    //{
    //    Js.InvokeAsync<object>("open", name, "_blank");

    //}

    }
