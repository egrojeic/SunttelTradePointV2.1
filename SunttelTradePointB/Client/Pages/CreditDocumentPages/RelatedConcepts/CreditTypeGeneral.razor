@page "/CreditTypeGeneral"
@page "/CreditTypeGeneral/{_page}"
@page "/CreditTypeGeneral/{_page}/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting

@inject SunttelTradePointB.Client.Services.CreditDocumentServices.CreditDocumentServices CreditDocumentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<PageTitleComponent Title="Credit Type" IconName="creditType.png"
                    Description="With this tool you can create and edit credit type ">
</PageTitleComponent>

<div class="panelMenuContainer">
    <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
    <CreditTypeMenu page="@_page"></CreditTypeMenu>
    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>   
</div>



<div class="tableContainer">

   
    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Payments"></WaitingProcessIndicator>

    }
    else
    {

        @if(creditTypeList!=null){
        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="creditTypeList"
                    TItem="CreditType"
                    ColumnWidth="100%"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"                   
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn TItem="CreditType" Property="Name" Title="@GetName("Name",new BasicConcept())" Width="208px" />
                <RadzenDataGridColumn TItem="CreditType"  Title="@GetName("IsASale",new BasicConcept())" Width="88px" >
                        <Template Context="data">
                      <RadzenCheckBox  @bind-Value="@data.IsASale" ></RadzenCheckBox>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CreditType" Property="Id" Title="@GetName("Id",new BasicConcept())" Width="58px" />
            </Columns>
        </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @(
                            $"Records: {creditTypeList.Count}"
                            )
                    </label>
                </div>
            </div>

        }
    }
</div>



@code {
    [Parameter]
    public string _filterItems { get; set; }
    [Parameter]
    public string _page { get; set; }
    public List<CreditType> creditTypeList { get; set; }
   

    bool isLoading = false;

    DateTime startingDate = DateTime.Now;

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        _filterItems ="all"; LoadData();
        base.OnInitialized();

    }

    public async void LoadData()
    {
        isLoading = true;       
        creditTypeList = await CreditDocumentServices.GetCreditTypes((filter != null ? filter : "all"), 1, 20);
        isLoading = false;
        StateHasChanged();
    }

   
    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<CreditType> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
      
        </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        CreditType argObj = (CreditType)args.Value;
        Navigation.NavigateTo($"CreditType/{_page}/{argObj.Id}/{_filterItems}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void Setfilter( string value)
    {
        filter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void Add()
    {
        
    }

     public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/Credits/{paramFilter}");
        Navigation.NavigateTo($"/{_page}/1");
    }


    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");

    }

}
