@page "/Credits"
@page "/CustomerCredits"
@page "/Credits/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.CreditDocumentServices.CreditDocumentServices CreditDocumentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation


@inject IJSRuntime Js

<PageTitleComponent Title="Credit Document" IconName="Payments.png"
                    Description="With this tool you can create and edit creditDocument ">
</PageTitleComponent>

<div class="panelMenuContainer">
    <CreditDocumentsMenu></CreditDocumentsMenu>
    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>
</div>
<div class="panelMenuContainer">
    @* <CreditDocumentMenu2 SetDocumentTypeId="SetDocumentTypeId"></CreditDocumentMenu2>*@
    <RangeDatesInput StartDate="@startingDate"
        EndDate="endDate"
                     StartDateName="From"
                     EndDateName="To"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
</div>


<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="CreditDocuments"></WaitingProcessIndicator>

    }
    else
    {
        if (CreditDocumentList != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="CreditDocumentList"
                    TItem="CreditDocument"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
                <Columns>

                    <RadzenDataGridColumn TItem="CreditDocument" Property="CreditDocumentType.Name" Title="@GetName("CreditDocumentType",new CreditDocument())" Filterable="false" Width="18px" />
                    <RadzenDataGridColumn TItem="CreditDocument" Property="Code" Title="@GetName("Code",new CreditDocument())" Filterable="false"  Sortable="false"  Width="208px" />
                    <RadzenDataGridColumn TItem="CreditDocument" Property="Vendor.Name" Title="@GetName("Vendor",new CreditDocument())"  Width="208px" />
                    <RadzenDataGridColumn TItem="CreditDocument" Property="Vendor.Buyer" Title="@GetName("Buyer",new CreditDocument())" Width="208px" />
                    <RadzenDataGridColumn TItem="CreditDocument" Property="CreditDocumentStatus.Name" Title="@GetName("CreditDocumentStatus",new CreditDocument())" Sortable="false" Width="108px" />
                    <RadzenDataGridColumn TItem="CreditDocument" Property="CreditDocumentReason.Name" Title="@GetName("CreditDocumentReason",new CreditDocument())"  Width="208px" />                   
                   <RadzenDataGridColumn TItem="CreditDocument" Property="CreditValue" Title="@GetName("CreditValue",new CreditDocument())" Filterable="false" Width="108px" />
                    <RadzenDataGridColumn TItem="CreditDocument" Property="IsDirect" Title="@GetName("IsDirect",new CreditDocument())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                        <Template>
                            @{
                                var IsDirect = (bool)context.GetType().GetProperty(nameof(CreditDocument.IsDirect)).GetValue(context);
                                <input type="checkbox" checked="@IsDirect" />
                            }
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        }
    }
</div>



@code {
    [Parameter]
    public string _filterItems { get; set; }
    public List<CreditDocument> CreditDocumentList { get; set; }
    public CommercialDocumentType documentType { get; set; }

    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        if (_filterItems != null) LoadData();
        base.OnInitialized();


    }

    public async void LoadData()
    {
        isLoading = true;
        if (documentType != null || true)
        {
            CreditDocumentList = await CreditDocumentServices.GetCreditDocumentList(startingDate, endDate, (filter != null ? filter : "all"), 1, 10);
        }
        isLoading = false;
        StateHasChanged();
    }

    public async void SetDocumentTypeId(CommercialDocumentType item)
    {
        if (item != null)
        {
            documentType = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<CreditDocument> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
            CreditDocument argObj = (CreditDocument)args.Value;
        Navigation.NavigateTo($"CreditDocumentsItem/{argObj.Id}/{_filterItems}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }





    public void Setfilter(string value)
    {
        filter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void EventSearchAll(string value)
    {
        filter = value;
    }

}
