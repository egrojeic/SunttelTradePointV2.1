@page "/CustomerCredits/{page}"
@page "/CustomerCredits"
@page "/CustomerCredits/{page}/{_filterItems}"
@page "/PurchasesCredits/{page}"
@page "/PurchasesCredits/{page}/{_filterItems}"

@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.CreditDocumentServices.CreditDocumentServices CreditDocumentServices
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject ActorsNodeService actorsNodeServive;
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>




<PageTitleComponent Title="@namePage" IconName="@icoLogo"
                    Description="@($"With this tool you can create and edit {@namePage}")">
</PageTitleComponent>

<div class="panelMenuContainer">
    <CreditDocumentsMenu actualPage="@actualPage" page="@backPage"></CreditDocumentsMenu>
    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>
</div>
<div class="panelMenuContainer">
    <div><label class="label-style color-white">@GetName(isASale?"Vendor":"Buyer",new CommercialDocument())</label></div>
    <div class="Vendor">
        <InputTextSelector3 styleCaption="width:200px;" TItem="Concept"
                            Id="Vendor"
                            caption="@(vendor !=null ? vendor?.Name:"" )"
                            Items="vendorList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">

        </InputTextSelector3>
    </div>


    <RangeDatesInput @bind-StartDate="@startingDate"
                     @bind-EndDate="endDate"
                     StartDateName="From"
                     EndDateName="To"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
</div>


<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="CreditDocuments"></WaitingProcessIndicator>

    }
    else
    {
        if (CreditDocumentList != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    ColumnWidth="100%"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value="@selectedcommercialdocuments"
                    CellContextMenu="@ShowContextMenuCommercialDocument"
                    Data="CreditDocumentList"
                    TItem="CreditDocument">
                <Columns>
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="CreditDocumentType.Name" Title="@GetName("CreditDocumentType",new CreditDocument())" Filterable="false" Width="150px" />
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="Code" Title="@GetName("Code",new CreditDocument())" Filterable="false" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="Vendor.Name" Title="@GetName("Vendor",new CreditDocument())" Width="208px" />
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="Vendor.Buyer" Title="@GetName("Buyer",new CreditDocument())" Width="208px" />
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="CreditDocumentStatus.Name" Title="@GetName("CreditDocumentStatus",new CreditDocument())" Sortable="false" Width="80px" />
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="CreditValue" Title="@GetName("CreditValue",new CreditDocument())" TextAlign="TextAlign.Right" FormatString="{0:N2}" Filterable="false" Width="90px" />
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="CommercialDocumentRef.DocumentCode" Title="@GetName("DocumentCode",new CommercialDocumentSummaryInfo())" Filterable="false" Width="108px" />
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="CommercialDocumentRef.DocumentDate" Title="@GetName("DocumentDate",new CommercialDocumentSummaryInfo())" FormatString="{0:MM/dd/yyyy}" Filterable="false" Width="108px" />
                    <RadzenDataGridColumn TItem="CreditDocument" Property="CreditDocumentReason.Name" Title="@GetName("CreditDocumentReason",new CommercialDocumentSummaryInfo())"  Filterable="false" Width="108px" />
                    <RadzenDataGridColumn  TItem="CreditDocument" Property="IsDirect" Title="@GetName("IsDirect",new CreditDocument())" Sortable="false" Width="100px" TextAlign="Radzen.TextAlign.Center">
                        <Template>
                            @{
                                var IsDirect = (bool)context.GetType().GetProperty(nameof(CreditDocument.IsDirect)).GetValue(context);
                                <input type="checkbox" checked="@IsDirect" />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                   
                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item"><label>@($"Records: {CreditDocumentList.Count}")</label> </div>
                <div class="item"><label>@SumTotal()</label> </div>
            </div>
        }
    }
</div>



@code {
    [Parameter]
    public string _filterItems { get; set; }
    [Parameter]
    public string page { get; set; }

    public List<CreditDocument> CreditDocumentList { get; set; }
    public CommercialDocumentType documentType { get; set; }
    IList<CreditDocument>? selectedcommercialdocuments;
    public List<Concept> vendorList = new();
    public Concept vendor = new();

    bool deleteVisible = false;
    string nameDelete = "";
    string IdDelete = "";

    string namePage = "";
    string backPage = "";
    string actualPage = "";
    string icoLogo = "";
    string SearcherValue = "";

    bool isASale = false;
    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {
        if (_filterItems != null) LoadData();
        ValidateUri();
        StateHasChanged();
        base.OnInitialized();

    }


    protected override void OnParametersSet()
    {
        ValidateUri();
        StateHasChanged();
    }


    public async void LoadData()
    {
        isLoading = true;
        if (vendor != null || true)
        {
            CreditDocumentList = await CreditDocumentServices.GetCreditDocumentList(startingDate, endDate, (filter != null ? filter : "all"), 1, 10);
        }
        isLoading = false;
        StateHasChanged();
    }

    public async void SetDocumentTypeId(CommercialDocumentType item)
    {
        if (item != null)
        {
            documentType = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<CreditDocument> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
        <RadzenMenuItem Text="Delete" Value=args.Data Icon="delete"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        CreditDocument argObj = (CreditDocument)args.Value;
        if (args.Text == "Edit") Navigation.NavigateTo($"{backPage}/{argObj.Id}/{_filterItems}");
        if (args.Text == "Delete")
        {
            deleteVisible = true;
            nameDelete =("Code :" +argObj.Code); IdDelete = argObj.Id;
        }
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }


    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();
        if (SearcherValue == "Vendor")
        {
            var list = await DocumentServices.GetCommercialVendorList(arg.value.ToString(), isASale, 1, 50);
            vendorList = new();
            foreach (var item in list)
            {
                vendorList.Add(item);
            }
        }

        StateHasChanged();
    }



    public async void EventIdSelectionAndId(Concept item)
    {
        if (SearcherValue == "Vendor")
        {
            vendor = item;
        }

        StateHasChanged();
    }


    public string SumTotal()
    {

        double value = 0;
        string result = "";
        if (CreditDocumentList != null)
        {
            var statusList = CreditDocumentList.GroupBy(s => s.CreditDocumentStatus).ToList();
            var CreditValueTotal = CreditDocumentList.Sum(s => s.CreditValue);
            result = GetName("CreditValue", new CreditDocument()) + " : " + CreditValueTotal + "   ,";
            foreach (var item in statusList)
            {
                if (!result.ToLower().Contains(item.FirstOrDefault().CreditDocumentStatus.Name.ToLower()))
                {
                    int counStatus = CreditDocumentList.Where(s => s.CreditDocumentStatus.Id == item.FirstOrDefault().CreditDocumentStatus.Id).Count();
                    result += item.FirstOrDefault().CreditDocumentStatus.Name + " : " + counStatus + "  ,  ";
                };
            }
        }

        return result; //value.ToString("N2", format);
    }

    public void Delete()
    {
        deleteVisible = false;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        nameDelete = "";
        IdDelete = "";
        deleteVisible = false;
        StateHasChanged();
    }


    public void Setfilter(string value)
    {
        filter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void EventSearchAll(string value)
    {
        filter = value;
    }

    public void ValidateUri()
    {
        string Name = Navigation.Uri;
        if (Name.Contains("ProviderCredits"))
        {
            isASale = false;
            actualPage = "";
            namePage = " Provider Credit";
            backPage = $"ProviderCreditsItem/{page}";
            icoLogo = "ProviderCredits.png";
        }
        else
        if (Name.Contains("PurchasesCredits"))
        {
            isASale = false;
            actualPage = "PurchasesCredits";
            namePage = " Purchases Credits";
            backPage = $"PurchasesCreditsItem/{page}";
            icoLogo = "ProviderCredits.png";
        }
        else
        if (Name.Contains("Credits"))
        {
            isASale = true;
            actualPage = "CustomerCredits";
            backPage = $"CreditDocumentsItem/{page}";
            namePage = " Credits";
            icoLogo = "creditTypeDocument.png";

        }
        CreditDocumentList = new();
        StateHasChanged();
    }


}
