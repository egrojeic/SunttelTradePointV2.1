@page "/Procurement"
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Client.Shared.Sales.Procurement;
@using System.Globalization;
@using System.Reflection;

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation


<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>


<MessageSaveComponent isVisible="@visibleMsg" message="@msg">
</MessageSaveComponent>





<PageTitleComponent Title="Procurement" IconName="purchaseSpec.png"
                    Description="Procurement">
</PageTitleComponent>

<div class="panelMenuContainer">
    @* <ProcurementMenu namePage="@backPage"></ProcurementMenu>*@
    <RangeDatesInput EndDateName="To" @bind-StartDate="@startingDate" @bind-EndDate="@endDate"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
</div>

@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Items"></WaitingProcessIndicator>
}

else
{

    <SfTab @oncontextmenu:preventDefault="true" Height="250px" CssClass="tab-adaptive " HeaderPlacement="HeaderPosition.Top">
        <TabAnimationSettings>
            <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
            <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
        </TabAnimationSettings>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("Pending Procurement",new SalesDocumentItemsDetails())"></TabHeader>
                </ChildContent>
                <ContentTemplate>

                    <div name="PendingProcurement">

                        <div class="tableContainer">
                            <SunttelTradePointB.Client.Pages.SalesPages.SaleOrders.PendingProcurement salesList="@salesList">
                            </SunttelTradePointB.Client.Pages.SalesPages.SaleOrders.PendingProcurement>
                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("Pednding Provider",new SalesDocumentItemsDetails())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <PedndingProvider salesList="salesList"></PedndingProvider>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>
}

@code {
    public string docsFilter { get; set; }
    public List<CommercialDocument> salesList { get; set; }
    List<SalesDocumentItemsDetails>? procurementDetailList { get; set; }
    DateTime startingDate { get; set; } = DateTime.Now;
    DateTime endDate { get; set; } = DateTime.Now;
    public bool visibleMsg { get; set; }
    public string msg { get; set; }
    public bool isLoading { get; set; } = true;


    protected override void OnInitialized()
    {
        LoadData();
        base.OnInitialized();
    }

    public async void LoadData()
    {

        salesList = await DocumentServices.GetProcurementList();
        isLoading = false;
        StateHasChanged();
    }

    public void EventSearchAll()
    {
        LoadData();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);

        return Name;
    }

    public void alert(bool visible, string _msg)
    {
        visibleMsg = visible;
        this.msg = _msg;
        StateHasChanged();
    }


}
