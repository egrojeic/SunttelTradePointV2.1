@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager
@inject ISalesDocuments DocumentServices
@inject IJSRuntime js;

@using SunttelTradePointB.Client.Interfaces.SalesInterfaces;
@using SunttelTradePointB.Client.Services.SalesServices;
@using SunttelTradePointB.Shared.Sales;

@using SunttelTradePointB.Shared.Sales.SalesDTO;
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using System.Dynamic
@using System.Globalization


<div class="panelMenuContainer">

    <RangeDatesInput @bind-StartDate="@startingDate" @bind-EndDate="@endDate"
                     disableBtn="true"></RangeDatesInput>

    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>
</div>

@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="DataGrid" TValue="CommercialDocumentDetailsDTO" Toolbar="@(new List<string>() {  "Edit", "Update", "Cancel" })" AllowPaging="true" Query="@Query"> 
                <SfDataManager Adaptor="Adaptors.CustomAdaptor" AdaptorInstance="@typeof(CommercialDocumentDetailsAdaptor)"></SfDataManager>
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                <GridEvents OnActionBegin="ActionBegin" OnActionComplete="ActionComplete" TValue="CommercialDocumentDetailsDTO"></GridEvents>
                <GridPageSettings PageSize="@PageSize" PageSizes="@pagerDropdown"></GridPageSettings>
                <GridColumns>
                    <GridColumn HeaderText="Options" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="40">
                        <Template>
                            @{
                                var purchase = (context as CommercialDocumentDetailsDTO);
                                <button class="btn btn-danger btn-sm" @onclick="() => CancelRequest(purchase)" title="Cancel Request">
                                    <i class="oi oi-circle-x"></i>
                                </button>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Visible="false" Field=@nameof(CommercialDocumentDetailsDTO._id) HeaderText="@GetName("Id",new CommercialDocumentDetailsDTO())" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true})" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="Header.Buyer.Name" HeaderText="Buyer" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="Header.PO" HeaderText="PO" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="@nameof(CommercialDocumentDetailsDTO.TransactionalItem)" HeaderText="@GetName("TransactionalItem",new CommercialDocumentDetailsDTO())" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="PurchaseSpecs.AssignedQty" HeaderText="@GetName("AssignedQty",new CommercialDocument())" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn Field="PurchaseSpecs.ConfirmedQty" HeaderText="@GetName("ConfirmedQty",new PurchaseItemDetails())" ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{0, 10000}})" EditType="EditType.NumericEdit" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="PurchaseSpecs.ExpectedCost" HeaderText="@GetName("ExpectedCost",new PurchaseItemDetails())" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" Format="C2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn Field="PurchaseSpecs.ConfirmedCost" HeaderText="@GetName("ConfirmedCost",new PurchaseItemDetails())" ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{0, 10000}})" EditType="EditType.NumericEdit" Format="C2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn Field="PurchaseSpecs.ProviderShipDate" HeaderText="@GetName("ProviderShipDate",new PurchaseItemDetails())" AllowEditing="false" Width="50" Format="yyyy/MM/dd"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>


@code {
    public string[] pagerDropdown { get; set; } = new string[] { "5", "10", "15", "20", "50", "All" };

    public Syncfusion.Blazor.Data.Query Query = new Syncfusion.Blazor.Data.Query().AddParams("EntityId", UIClientGlobalVariables.EntityUserId);
    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);
    SfGrid<CommercialDocumentDetailsDTO> DataGrid;
    public string EntityId { get; set; } = string.Empty;
    public string _filterItems { get; set; }
    public bool isLoading = false;
    public int GridHeight;
    public int PageSize { get; set; } = 2;
    public List<CommercialDocumentDetailsDTO> sales = new List<CommercialDocumentDetailsDTO>();
    string filter
    {
        get
        {
            return _filterItems;
        }
        set
        {
            _filterItems = value;
            GetDocumentDetails();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        CultureInfo.CurrentCulture = new CultureInfo("en-US");
        CultureInfo.CurrentUICulture = new CultureInfo("en-US");
        await base.OnInitializedAsync();
        //await GetDocumentDetails();
    }

    private async Task GetDocumentDetails()
    {
        isLoading = true;
        EntityId = UIClientGlobalVariables.EntityUserId;
        //var sale = await DocumentServices.GetSalesOrders(EntityId);
        isLoading = false;
        await DataGrid.Refresh();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void ActionBegin(ActionEventArgs<CommercialDocumentDetailsDTO> args)
    {

    }

    public async Task ActionComplete(ActionEventArgs<CommercialDocumentDetailsDTO> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                // Triggers once editing operation completes
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                // Triggers once add operation completes
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {
                // Triggers once cancel operation completes
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                await EditPurchase(args.Data);

            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                // Triggers once delete operation completes
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    public async void CancelRequest(CommercialDocumentDetailsDTO e)
    {
        e.PurchaseSpecs.ConfirmedCost = 0;
        e.PurchaseSpecs.ConfirmedQty= 0;
        e.PurchaseSpecs.ISRejectedByProvider = true;
        string saleId = await EditPurchase(e);
        if(saleId != null){
            sales.Remove(e);
            await DataGrid.Refresh();
        } else
        {
            await js.InvokeVoidAsync("alert", "Error updating item");
        }
    }

    private async Task<string> EditPurchase(CommercialDocumentDetailsDTO sale)
    {
        var resp = await DocumentServices.UpdateSalesDocumentItemsDetails(sale);
        return resp.Id;
    }
}
