@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices

@using SunttelTradePointB.Shared.Sales;

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns


<div class="panelMenuContainer">

    <RangeDatesInput @bind-StartDate="@startingDate" @bind-EndDate="@endDate"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
</div>

@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="DataGrid" DataSource="@purchaseItemDetails" Toolbar="@(new List<string>() {  "Edit", "Update", "Cancel" })" AllowPaging="true">
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                <GridEvents OnActionBegin="ActionBegin" OnActionComplete="ActionComplete" TValue="PurchaseItemDetails"></GridEvents>
                <GridColumns>
                    <GridColumn HeaderText="Options" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="40">
                        <Template>
                            @{
                                var purchase = (context as PurchaseItemDetails);
                                <button class="btn btn-danger btn-sm" @onclick="() => CancelRequest(purchase)" title="Cancel Request">
                                    <i class="oi oi-circle-x"></i>
                                </button>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(PurchaseItemDetails.Id) HeaderText="@GetName("Id",new PurchaseItemDetails())" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true})" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field=@nameof(PurchaseItemDetails.AssignedQty) HeaderText="@GetName("AssignedQty",new PurchaseItemDetails())" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(PurchaseItemDetails.ConfirmedQty) HeaderText="@GetName("ConfirmedQty",new PurchaseItemDetails())" ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{0, 1000}})" EditType="EditType.NumericEdit" Format="C2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field=@nameof(PurchaseItemDetails.ExpectedCost) HeaderText="@GetName("ExpectedCost",new PurchaseItemDetails())" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(PurchaseItemDetails.ConfirmedCost) HeaderText="@GetName("ConfirmedCost",new PurchaseItemDetails())" ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{0, 1000}})" EditType="EditType.NumericEdit" Format="C2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(PurchaseItemDetails.ProviderShipDate) HeaderText="@GetName("ProviderShipDate",new PurchaseItemDetails())" AllowEditing="false" Width="50"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>


@code {
    public List<PurchaseItemDetails> purchaseItemDetails = new List<PurchaseItemDetails>();
    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);
    SfGrid<PurchaseItemDetails> DataGrid;
    public bool isLoading = false;

    public void EventSearchAll(string value)
    {

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetDocumentDetails();
    }

    private async Task GetDocumentDetails()
    {
        isLoading = true;
        List<SalesDocumentItemsDetails> sales = await DocumentServices.GetProcurementDetails();

        foreach (var sale in sales)
        {
            if (sale.PurchaseSpecs != null && sale.PurchaseSpecs.Any())
            {
                var userid = UIClientGlobalVariables.UserId;
                //var purchases = sale.PurchaseSpecs.Where(x => x.Id == UIClientGlobalVariables.UserId).ToList();
                var purchases = sale.PurchaseSpecs;
                purchaseItemDetails.AddRange(purchases);
            }
        }

        isLoading = false;
        await DataGrid.Refresh();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void ActionBegin(ActionEventArgs<PurchaseItemDetails> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            // Triggers before editing operation starts
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            // Triggers before add operation starts
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers before cancel operation starts
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            // Triggers before save operation starts
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            // Triggers before delete operation starts
        }
    }

    public void ActionComplete(ActionEventArgs<PurchaseItemDetails> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            // Triggers once editing operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            // Triggers once add operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers once cancel operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            // Triggers once save operation completes

            // This is the action that I need
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            // Triggers once delete operation completes
        }
    }

    public void CancelRequest(PurchaseItemDetails e)
    {
        Console.WriteLine(e.ToString());
    }
}
