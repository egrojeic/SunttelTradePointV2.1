@page "/SalesBI"
@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor
@*@using ThemeHelper*@
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using SunttelTradePointB.Shared.Sales;

@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;
<PageTitleComponent Title="Sales Business Intelligence View" IconName="BIIcon.png"
                    Description="Sales Dynamic View">
</PageTitleComponent>

<div class="panelMenuContainer">
    <CommercialDocsGrlMenu></CommercialDocsGrlMenu>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>

</div>
<div class="panelMenuContainer aling">
    <CommercialDocsGrlMenu2 SetDocumentTypeId="SetDocumentTypeId"></CommercialDocsGrlMenu2>
    <RangeDatesInput StartDate="@startingDate" EndDate="@endDate"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
</div>




<SfPivotView @ref="refSfPivotView" TValue="CommercialDocument" Width="550" Height="315px">
    <PivotViewDataSourceSettings DataSource="@commercialdocumentList" ExpandAll=false EnableSorting=true>
        <PivotViewColumns>
            <PivotViewColumn Name="DocumentType"></PivotViewColumn>          
        </PivotViewColumns>      
        <PivotViewValues>
            <PivotViewValue Name="DocumentType.Name" Caption="Units Sold"></PivotViewValue>
            <PivotViewValue Name="DocumentNumber"  Caption="number"></PivotViewValue>
        </PivotViewValues>      
    </PivotViewDataSourceSettings>
    <PivotViewGridSettings ColumnWidth="120"></PivotViewGridSettings>
</SfPivotView>




@code {
    [Parameter]
    public string _filterItems { get; set; }

    SfPivotView<CommercialDocument> refSfPivotView { get; set; }

    public CommercialDocumentType commercialDocumentType { get; set; }
    public List<CommercialDocument> commercialdocumentList { get; set; }

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);
    bool isLoading = false;

    protected async override void OnInitialized()
    {
        commercialdocumentList = new();
        for (int i = 0; i < 20; i++)
        {
            commercialdocumentList.Add(new CommercialDocument
                {
                    DocumentType = new CommercialDocumentType { Name = "prueba" },
                    DocumentNumber = 1,
                    DeliveryDate = DateTime.Today
                });
        }
        if (refSfPivotView != null) await refSfPivotView.LayoutRefreshAsync();
        base.OnInitialized();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           
            StateHasChanged();
        }


    }


    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    public void EventSearchAll(string value)
    {



        docsFilter = value;


    }

    public async void LoadData()
    {
        isLoading = true;
        if (commercialDocumentType != null)
        {
            commercialdocumentList = await DocumentServices.GetCommercialDocumentList(startingDate, endDate, commercialDocumentType.Id, (_filterItems != null ? _filterItems : "all"));

        }



        isLoading = false;

        StateHasChanged();
    }

    public async void SetDocumentTypeId(CommercialDocumentType item)
    {

        if (item != null)
        {
            commercialDocumentType = item;
        }
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


   



}
