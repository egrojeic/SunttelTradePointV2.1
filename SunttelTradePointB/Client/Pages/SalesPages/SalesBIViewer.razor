@page "/SalesBI"
@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.DataViews.BI
@using SunttelTradePointB.Client.Shared.Menus.SalesBI

@inject SunttelTradePointB.Client.Services.SalesServices.SalesBIViewerServices _SalesBIViewerServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;

<style>
    .e-pivotview .e-grouping-bar .e-pivot-button, .e-pivotview .e-group-rows .e-pivot-button {
        background-color: #0d223f;
    }

        .e-pivotview .e-grouping-bar .e-pivot-button, .e-pivotview .e-group-rows .e-pivot-button:hover {
            background-color: #0d223f;
            box-shadow: 0px 0px 5px gray;
            color: black;
        }

    .e-pivotview {
        min-height: 200px;
        width: 900px;
    }
</style>


<PageTitleComponent Title="Sales Business Intelligence View" IconName="BIIcon.png"
                    Description="Sales Dynamic View">
</PageTitleComponent>

<div class="panelMenuContainer">
    <SalesBIlMenu></SalesBIlMenu>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>

</div>
<div class="panelMenuContainer aling">
    <SalesBIlMenu2 SetDocumentTypeId="SetDocumentTypeId"></SalesBIlMenu2>
    <RangeDatesInput StartDateName="From" @bind-StartDate="@startingDate" EndDateName="To" @bind-EndDate="@endDate"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
</div>

@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Sales item"></WaitingProcessIndicator>

}
else
{

    //ShowFieldList = true
    @* ShowGroupingBar = "true"
             AllowDeferLayoutUpdate = "true"
             EnableVirtualization = "true"
             AllowDrillThrough = "true"
             ShowToolbar = true
             AllowConditionalFormatting = true
             AllowCalculatedField = true
             AllowPdfExport = true
             AllowExcelExport = true
             ShowTooltip = true*@
    @if (commercialdocumentList != null)
    {
        <SfPivotView TValue="BISalesConsolidated" Height="500" Width="100%"
             @ref="@Pivot"
             Toolbar="@Olap"
             ShowGroupingBar="true"
             ShowFieldList=true
             ShowToolbar=true
             AllowConditionalFormatting=true
             AllowCalculatedField=true
             AllowPdfExport=true
             AllowExcelExport=true
             ShowTooltip=true>
            <PivotViewDisplayOption Primary="Primary.Table" View="View.Both"></PivotViewDisplayOption>
            <PivotViewDataSourceSettings DataSource="@commercialdocumentList">
                <PivotViewColumns>
                </PivotViewColumns>
                <PivotViewRows>
                </PivotViewRows>
                <PivotViewValues>
                </PivotViewValues>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="FinanceSummaryTotalAmount" Format="N2" UseGrouping=true></PivotViewFormatSetting>
                    <PivotViewFormatSetting Name="FinanceSummaryTotalCosts" Format="N2" UseGrouping=true></PivotViewFormatSetting>
                    <PivotViewFormatSetting Name="FinanceSummaryTotalTaxes" Format="N2" UseGrouping=true></PivotViewFormatSetting>
                    <PivotViewFormatSetting Name="FinanceSummaryTotalDiscounts" Format="N2" UseGrouping=true></PivotViewFormatSetting>
                    <PivotViewFormatSetting Name="FinanceSummaryTotalPaid" Format="N2" UseGrouping=true></PivotViewFormatSetting>
                </PivotViewFormatSettings>
            </PivotViewDataSourceSettings>
            <PivotViewEvents TValue="BISalesConsolidated" RenameReport="RenameReport" RemoveReport="RemoveReport" SaveReport="SaveReport" LoadReport="LoadReport" FetchReport="FetchReport"></PivotViewEvents>
        </SfPivotView>
        <div class="container-total">
            <div class="item"><label>@($"Count item : {commercialdocumentList.Count}")</label> </div>
        </div>
    }


}




@code {
    [Parameter]
    public string _filterItems { get; set; }



    public CommercialDocumentType commercialDocumentType { get; set; }
    public List<BISalesConsolidated> commercialdocumentList { get; set; }

    #region Pivot

    SfPivotView<BISalesConsolidated> Pivot;
    public List<ToolbarItems> Olap = new List<ToolbarItems> {
        ToolbarItems.New,
        ToolbarItems.Save,
        ToolbarItems.SaveAs,
        ToolbarItems.Rename,
        ToolbarItems.Remove,
        ToolbarItems.Load,
        ToolbarItems.Grid,
        ToolbarItems.Chart,
        ToolbarItems.MDX,
        ToolbarItems.Export,
        ToolbarItems.SubTotal,
        ToolbarItems.GrandTotal,
        ToolbarItems.ConditionalFormatting,
        ToolbarItems.FieldList,

    };
    public List<string> Report = new List<string>();
    public List<string> ReportName = new List<string>();

    #endregion End Pivot

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);
    bool isLoading = false;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            StateHasChanged();
        }
    }

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    public void EventSearchAll(string value)
    {
        docsFilter = value;


    }

    public async void LoadData()
    {
        isLoading = true;
        commercialdocumentList = new();
        if (commercialDocumentType != null)
        {
            commercialdocumentList = await _SalesBIViewerServices.GetSalesBIList(startingDate, endDate, commercialDocumentType.Id, (_filterItems != null ? _filterItems : "all"), 1, 4000);
            commercialdocumentList = commercialdocumentList.Where(s => s.Id != null).ToList();
        }


        isLoading = false;

        StateHasChanged();
    }

    public async void SetDocumentTypeId(CommercialDocumentType item)
    {

        if (item != null)
        {
            commercialDocumentType = item;
        }
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    #region EventPivot

    public void SaveReport(SaveReportArgs args)
    {
        int i = 0;
        bool IsSaved = false;
        for (i = 0; i < this.ReportName.Count; i++)
        {
            if (this.ReportName[i] == args.ReportName)
            {
                this.Report[i] = args.Report;
                IsSaved = true;
            }
        }
        if (args.Report != null && !(IsSaved))
        {
            this.Report.Add(args.Report);
            this.ReportName.Add(args.ReportName);
        }

    }
    public void FetchReport(FetchReportArgs args)
    {
        args.ReportName = ReportName.ToArray();
    }
    public async Task LoadReport(LoadReportArgs args)
    {
        int i = 0;
        int j = 0;


        for (i = 0; i < ReportName.Count; i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                j = i;
            }
        }
        if (Pivot != null) await this.Pivot.LoadPersistDataAsync(Report[j]);

    }
    public async Task RemoveReport(RemoveReportArgs args)
    {
        int i = 0;
        for (i = 0; i < ReportName.Count; i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                ReportName.RemoveAt(i);
                Report.RemoveAt(i);
                break;
            }
        }
        if (Report.Count > 0)
        {
            await this.Pivot.LoadPersistDataAsync(Report[0]);
        }
    }
    public void RenameReport(RenameReportArgs args)
    {
        if (args.IsReportExists)
        {
            int j = 0;
            for (j = 0; j < ReportName.Count; j++)
            {
                if (ReportName[j] == args.Rename)
                {
                    ReportName.RemoveAt(j);
                    Report.RemoveAt(j);
                    break;
                }
            }
        }
        int i = 0;
        for (i = 0; i <= (ReportName.Count - 1); i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                ReportName[i] = args.Rename;
            }
        }
    }

    #endregion EndEventPivot




}
