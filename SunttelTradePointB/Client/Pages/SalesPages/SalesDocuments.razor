@page "/SalesDocuments"
@page "/SalesDocuments/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation


<PageTitleComponent Title="Sales" IconName="commercialActivities.png"
                    Description="With this tool you can create and edit Sales operations such as Orders and Invoices">
</PageTitleComponent>



<div class="panelMenuContainer">
    <CommercialDocsGrlMenu></CommercialDocsGrlMenu>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>

</div>
<div class="panelMenuContainer aling">
    <CommercialDocsGrlMenu2 SetDocumentTypeId="SetDocumentTypeId"></CommercialDocsGrlMenu2>
    <RangeDatesInput @bind-StartDate="@startingDate" @bind-EndDate="@endDate"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
</div>


<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

    }
    else
    {

        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="50"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@commercialdocumentList"
                    TItem="CommercialDocument"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value="@selectedcommercialdocuments"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn TItem="CommercialDocument" Property="DocumentType.Name" Title="Document Type" Width="308px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="BusinessLineDoc.Name" Title="Business Line" Filterable="false" Sortable="false" Width="208px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="PO" Title="PO" Width="64px" Filterable="false" Sortable="false" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="ShipDate" Title="Ship Date" FormatString="{0:d}" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="DeliveryDate" Title="Delivery Date" FormatString="{0:d}" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="ArrivalDate" Title="Provider Arrival Date" FormatString="{0:d}" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="Vendor.Name" Title="Vendor" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="Buyer.Name" Title="Buyer" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="SalesPerson.Name" Title="Sales Person" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="Carrier.Name" Title="Carrier" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="DeliveryAddress.Name" Title="Delivery Address" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="ShippingStatusDocument.Name" Title="Shipping Status" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="TrackingNumber" Title="Tracking Number" Width="200px" Filterable="false" Sortable="false" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="FinanceStatusDocument.Name" Title="Finance Status" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="OriginDocument.Name" Title="Origin Document" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="VendorWarehouse.Name" Title="Vendor Warehouse" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="BuyerWarehouse.Name" Title="Buyer Warehouse" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="Season.Name" Title="Season" Width="96px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="PrintingSatus.Name" Title="Printing Satus" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="SpecsNotes" Title="Specs Notes" Filterable="false" Sortable="false" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="MarkedForQCInspection" Title="Marked for QCInspection" Filterable="false" Sortable="false" Width="200px">
                    <Template Context="commercialdocumentItem">
                        <RadzenCheckBox @bind-Value="commercialdocumentItem.MarkedForQCInspection" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CommercialDocument" Property="FinanceSummary.Name" Title="FinanceSummary" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="Items.Name" Title="Items" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="ToInvoice" Title="To Invoice" Filterable="false" Sortable="false" Width="200px">
                    <Template Context="commercialdocumentItem">
                        <RadzenCheckBox @bind-Value="commercialdocumentItem.ToInvoice" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CommercialDocument" Property="Id" Title="Id" Filterable="false" Sortable="false" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="LegacyId" Title="LegacyId" Filterable="false" Sortable="false" Width="200px" />
                <RadzenDataGridColumn TItem="CommercialDocument" Property="IsSelected" Title="IsSelected" Width="200px">
                    <Template Context="commercialdocumentItem">
                        <RadzenCheckBox @bind-Value="commercialdocumentItem.IsSelected" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CommercialDocument" Property="IsLoadingData" Title="Has Changed" Filterable="false" Sortable="false" Width="200px">
                    <Template Context="commercialdocumentItem">
                        <RadzenCheckBox @bind-Value="commercialdocumentItem.IsLoadingData" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CommercialDocument" Property="Notes" Title="Notes" Filterable="false" Sortable="false" Width="200px" />
            </Columns>
        </RadzenDataGrid>
    }
</div>



@code {

    [Parameter]
    public string _filterItems { get; set; }
    List<CommercialDocument>? commercialdocumentList { get; set; }

    public CommercialDocumentType commercialDocumentType { get; set; }
    IList<CommercialDocument>? selectedcommercialdocuments;

    bool isLoading = false;

    public DateTime startingDate { get; set; }
    public DateTime endDate { get; set; }

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        if (startingDate == DateTime.MinValue) startingDate = DateTime.Now;
        if (endDate == DateTime.MinValue) endDate = DateTime.Now.AddMonths(1);
        if (_filterItems != null) LoadData();
        base.OnInitialized();

    }

    public async void LoadData()
    {
        isLoading = true;
        if (commercialDocumentType != null)
        {
           // startingDate = new  DateTime(2019, 1, 1);
            commercialdocumentList = await DocumentServices.GetCommercialDocumentList( startingDate, endDate, commercialDocumentType.Id, (_filterItems != null ? _filterItems : "all"));

        }
        isLoading = false;

        //await SynthesisToSpeakerAsync( $"Se encontraron {commercialdocumentList.Count()}, resultados voz dos");
        StateHasChanged();
    }

    public void EventSearchAll(string value ){
        docsFilter = value;
    }

    public async void SetDocumentTypeId(CommercialDocumentType item)
    {

        if (item != null)
        {
            commercialDocumentType = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<CommercialDocument> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        CommercialDocument argObj = (CommercialDocument)args.Value;
        Console.WriteLine($"Menu item with Value={argObj.Id} clicked");
        Navigation.NavigateTo($"SaleItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void SetdocsFilter(string value)
    {
        docsFilter = value;
        StateHasChanged();
    }




}
