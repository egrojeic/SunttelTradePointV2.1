@page "/RegisterRole/{roleId}"
@page "/RegisterRole"

@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNet.Identity.EntityFramework;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components
@using SunttelTradePointB.Client.Services;
@using SunttelTradePointB.Shared.Enums;
@using SunttelTradePointB.Shared.Security;
@using SunttelTradePointB.Shared.SquadsMgr;
@inject NavigationManager _navigationManager;
@inject CustomStateProvider authStateProvider

<EditForm Model="Role" OnSubmit="OnPostAsync">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-person" /> Register New Role
                <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Register</button>
                <a class="btn btn-sm btn-success float-end mx-2" href="/UserTabs"><i class="oi oi-arrow-thick-left"></i> Back</a>
            </span>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Role Name:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Role.Name" />
                        </div>
                    </div>
                </div>
            </div>
           
            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <div>
                            <label for="ComercialGroup">Permissions:</label>
                        </div>
                        <div>
                            <button type="button" @onclick='() => SetViewElement("Group")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>
                        <div class="conten-chip">
                            <SfChip @ref="referChip3" EnableDelete="true" CssClass="chip-style" EnableRtl="false">
                                <ChipEvents Deleted="@onDeleted"></ChipEvents>
                                <ChipItems>
                                    @{
                                        if (FilterTools != null)
                                        {
                                            @foreach (var Group in FilterTools)
                                            {
                                                if (Group != null && Group.Name != null)
                                                {
                                                    <ChipItem Text="@Group?.Name" LeadingIconCss="anne"></ChipItem>
                                                }

                                            }
                                        }
                                    }
                                </ChipItems>
                            </SfChip>
                            <InputTextSelector3 TItem="SystemTool"
                                                EventSearcherValueAndId="EventSearcherValueAndId"
                                                EventIdSelectionAndId="SelectionMade"
                                                Items="systemTools"
                                                captionOff="true"
                                                Visible="PopupViewGroups"
                                                Id="Group">

                            </InputTextSelector3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? roleId { get; set; }
    public UserRole? Role = new UserRole();
    public List<string> rolenames = new List<string>();
    public IEnumerable<UserRole>? roles;
    // ship
    public List<SystemTool> systemTools = new List<SystemTool>();
    public List<SystemTool>? FilterTools = new List<SystemTool>();
    public bool PopupViewGroups = false;
    public string SearchValueMode = "";
    SfChip? referChip3;

    protected override void OnInitialized()
    {
        GetRoles();
        base.OnInitialized();
        StateHasChanged();
    }

    protected override async void OnParametersSet()
    {
        GetRoleById();
        base.OnParametersSet();
    }

    private async void GetRoleById()
    {
        if (roleId is null) return;
        UserRole role = await authStateProvider.GetRoleById(roleId);
        if (role is null) return;
        Role.Id = role.Id;
        Role.Name = role.Name;
        StateHasChanged();
    }

    private async void GetRoles()
    {
        try
        {
            roles = await authStateProvider.GetRoles();
            if (roles is not null)
            {
                rolenames = roles.Select(x => x.Name).ToList();
            }
        }
        catch (Exception ex)
        {

        }

        StateHasChanged();
    }

    public async void OnPostAsync()
    {
        string error;
        try
        {
            Role.SystemTools = FilterTools;

            if (Role.Id is null)
            {
                await authStateProvider.RegisterRole(Role);
            }
            else
            {
              
            }
            _navigationManager.NavigateTo("/UserTabs");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    //Ship methods

    protected async void EventSearcherValueAndId((string value, string selectionId) arg)
    {
        SearchValueMode = arg.selectionId;
        if (SearchValueMode == "Group")
        {
            systemTools = await authStateProvider.GetSystemTools();
        }

        StateHasChanged();

    }

    public void SelectionMade(SystemTool arg)
    {
        if (SearchValueMode == "Group")
        {
            if (!FilterTools.Contains(arg)) FilterTools.Add(arg);
        }

        StateHasChanged();
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        FilterTools?.RemoveAt(args.Index);
        //EntityNode.Groups = FilterListGroups;
        StateHasChanged();
    }

    public void SetViewElement(string Element)
    {

        SearchValueMode = Element;
        if (Element == "Group" && !PopupViewGroups) { PopupViewGroups = true; }
        StateHasChanged();
    }
}
