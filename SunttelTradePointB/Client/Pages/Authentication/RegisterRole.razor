@page "/RegisterRole/{roleId}"
@page "/RegisterRole"

@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNet.Identity.EntityFramework;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components
@using SunttelTradePointB.Client.Services;
@using SunttelTradePointB.Shared.Enums;
@using SunttelTradePointB.Shared.Security;
@using SunttelTradePointB.Shared.SquadsMgr;
@inject NavigationManager _navigationManager;
@inject CustomStateProvider authStateProvider

<div class="container">
<EditForm Model="Role" OnSubmit="OnPostAsync">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-person" /> Register New Role
                <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Register</button>
                <a class="btn btn-sm btn-success float-end mx-2" href="/UserTabs"><i class="oi oi-arrow-thick-left"></i> Back</a>
            </span>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Role Name:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Role.Name" />
                        </div>
                    </div>
                </div>
            </div>
           
            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <h4>Assign Permissions</h4>
                        <select @onchange="AssignPermission" class="form-select">
                            <option value="0">-- Select Permissions --</option>
                            @if (systemTools is not null)
                            {
                                @foreach (var role in systemTools)
                                {
                                    <option value="@role.ID">@role.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Name</th>
                                <th>Options</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in FilterTools.Select((value, index) => new { Value = value, Index = index }))
                            {
                                <tr>
                                    <td>@(role.Index + 1)</td>
                                    <td>@role.Value.Name</td>
                                    <td>
                                        <button type="button" @onclick="(() => DeletePermission(role.Value))" class="btn btn-danger">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</EditForm>
</div>

@code {
    [Parameter]
    public string? roleId { get; set; }
    public UserRole? Role = new UserRole();
    public List<string> rolenames = new List<string>();
    public List<SystemTool> systemTools = new List<SystemTool>();
    public List<SystemTool> FilterTools = new List<SystemTool>();
    public bool PopupViewGroups = false;
    public string SearchValueMode = "";
    SfChip? referChip3;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StateHasChanged();
        Role.SquadsId = UIClientGlobalVariables.ActiveSquad.ID;
    }

    protected override async void OnParametersSet()
    {
        await GetPermissions();
        await GetRoleById();
        base.OnParametersSet();
    }

    private async Task GetPermissions()
    {
        var response = await authStateProvider.GetSystemTools();
        if (response is not null) systemTools = response;
        StateHasChanged();
    }

    private async Task GetRoleById()
    {
        if (roleId is null) return;
        var response = await authStateProvider.GetRoleById(roleId);
        if (response is null) return;
        Role.Id = response.Id;
        Role.Name = response.Name;
        FilterTools = response.SystemTools;
        StateHasChanged();
    }

    public async void OnPostAsync()
    {
        string error;
        try
        {
            Role.SystemTools = FilterTools;

            if (Role.Id is null)
            {
                await authStateProvider.RegisterRole(Role);
            }
            else
            {
                await authStateProvider.EditRoleSystemTools(Role);
            }
            _navigationManager.NavigateTo("/UserTabs");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    //Ship methods

    protected async void EventSearcherValueAndId((string value, string selectionId) arg)
    {
        SearchValueMode = arg.selectionId;
        if (SearchValueMode == "Group")
        {
            var response = await authStateProvider.GetSystemTools();
            if (response is not null) systemTools = response;
        }

        StateHasChanged();

    }

    public void SelectionMade(SystemTool arg)
    {
        if (SearchValueMode == "Group")
        {
            if (!FilterTools.Contains(arg)) FilterTools.Add(arg);
        }

        StateHasChanged();
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        FilterTools?.RemoveAt(args.Index);
        //EntityNode.Groups = FilterListGroups;
        StateHasChanged();
    }

    public void SetViewElement(string Element)
    {

        SearchValueMode = Element;
        if (Element == "Group" && !PopupViewGroups) { PopupViewGroups = true; }
        StateHasChanged();
    }

    private void AssignPermission(ChangeEventArgs e)
    {
        try
        {
            var rol = systemTools.Where(x => x.ID.ToString() == e.Value?.ToString()).FirstOrDefault();
            if (rol is not null)
            {
                var rolRegistered = FilterTools.Where(x => x.ID == rol.ID).FirstOrDefault();
                if(rolRegistered is null) FilterTools!.Add(rol);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            return;
        }
    }

    private void DeletePermission(SystemTool rol)
    {
        FilterTools.Remove(rol);
        StateHasChanged();
    }

}
