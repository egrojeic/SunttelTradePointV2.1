@page "/RegisterUser/{userId}";
@page "/RegisterUser";
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNet.Identity.EntityFramework;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components
@using SunttelTradePointB.Client.Services;
@using SunttelTradePointB.Shared.Enums;
@using SunttelTradePointB.Shared.Security;
@inject NavigationManager _navigationManager;
@inject CustomStateProvider authStateProvider

<EditForm Model="user" OnSubmit="OnPostAsync">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-person" /> Regisster New User
                <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Register</button>
                <a class="btn btn-sm btn-success float-end mx-2" href="/UserTabs"><i class="oi oi-arrow-thick-left"></i> Back</a>
            </span>
        </div>
        <div class="card-body">

            <div class="row">
                 <div class="col-6">
                    <div class="mb-3">
                        <label>User Name:</label>
                        <div>
                            <InputText type="text" class="form-control" @bind-Value="@user.UserName" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" id="test" @bind-Value="@user.Email" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Password:</label>
                        <div>
                            <InputText type="password" class="form-control" id="test2" @bind-Value="@user.Password" />
                            <ValidationMessage For="@(() => user.Password)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Confirm Password:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@user.PasswordConfirm" />
                            <ValidationMessage For="@(() => user.PasswordConfirm)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    
                    <div class="mb-3">
                        <h4>Assign Roles</h4>
                        <select @onchange="AssignRoles" class="form-select">
                            <option value="0">-- Select your roles --</option>
                            @if (roles is not null)
                            {
                                @foreach (var role in roles)
                                {
                                    <option value="@role.Id">@role.Name</option>
                                }
                            }
                        </select>

                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Name</th>
                                <th>Options</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in FilterRoles.Select((value, index) => new { Value = value, Index = index }))
                            {
                                <tr>
                                    <td>@(role.Index + 1)</td>
                                    <td>@role.Value.Name</td>
                                    <td>
                                        <button type="button" @onclick="(() => DeleteRole(role.Value))" class="btn btn-danger">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? userId { get; set; }
    public RegisterRequest? user = new RegisterRequest();
    public List<string> rolenames = new List<string>();
    public List<string> MyRolenames = new List<string>();
    public IEnumerable<UserRole>? roles;
    // ship
    public List<UserRole>? listRoles = new List<UserRole>();
    public List<UserRole> FilterRoles = new List<UserRole>();
    public bool PopupViewGroups = false;
    public string SearchValueMode = "";
    SfChip? referChip2;

    protected override void OnInitialized()
    {
        GetRoles();
        GetMyRoles();
        base.OnInitialized();
        StateHasChanged();
    }

    protected override async void OnParametersSet()
    {
        GetUserById();
        base.OnParametersSet();
    }

    private async void GetUserById()
    {
        if (userId is null) return;
        UserEntity u = await authStateProvider.GetUserById(userId);
        user.Email = u.Email;
        user.UserName = u.Name;
        user.Id = u.Id;
        StateHasChanged();
    }

    private async void GetRoles()
    {
        try
        {
            roles = await authStateProvider.GetRoles();
            MyRolenames = await authStateProvider.GetRolesByUserId(userId);
            if (MyRolenames is not null && MyRolenames.Any() && roles is not null && roles.Any())
            {
                foreach (var myRole in MyRolenames)
                {
                    var rol = roles.Where(x => x.Name == myRole).FirstOrDefault();
                    if (rol is not null) FilterRoles.Add(rol);
                }              
            }
        }
        catch (Exception ex)
        {

        }

        StateHasChanged();
    }

    public async void GetMyRoles()
    {
        if (userId is null) return;
    }

    public async void OnPostAsync()
    {
        string error;
        try
        {
            user.EntityId = "0";
            user.Roles = FilterRoles;
            if (user.Id is null)
            {
                await authStateProvider.RegisterUserByAdmin(user);
            }
            else
            {
                if (user.Password is null)
                {
                    user.Password = "NOTCHANGE";
                    user.PasswordConfirm = "NOTCHANGE";
                }
                await authStateProvider.EditUserByAdmin(user);
            }
            _navigationManager.NavigateTo("/UserTabs");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    //Ship methods

    protected async void EventSearcherValueAndId((string value, string selectionId) arg)
    {
        SearchValueMode = arg.selectionId;
        if (SearchValueMode == "Group")
        {
            listRoles = await authStateProvider.GetRoles();
        }

        StateHasChanged();

    }

    public void SelectionMade(UserRole arg)
    {
        if (SearchValueMode == "Group")
        {
            if (!FilterRoles.Contains(arg)) FilterRoles.Add(arg);
        }

        StateHasChanged();
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        FilterRoles?.RemoveAt(args.Index);
        //EntityNode.Groups = FilterListGroups;
        StateHasChanged();
    }

    public void SetViewElement(string Element)
    {

        SearchValueMode = Element;
        if (Element == "Group" && !PopupViewGroups) { PopupViewGroups = true; }
        StateHasChanged();
    }

    private void AssignRoles(ChangeEventArgs e)
    {
        var rol = roles!.Where(x => x.Id == e.Value?.ToString()).FirstOrDefault();
        if (rol is not null)
        {
            FilterRoles.Add(rol);
            StateHasChanged();
        }
    }

    private void DeleteRole(UserRole rol)
    {
        FilterRoles.Remove(rol);
        StateHasChanged();
    }

}
