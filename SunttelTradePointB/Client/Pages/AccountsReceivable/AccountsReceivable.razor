@page "/AccountsReceivable"
@page "/AccountsReceivable/{_filterItems}"


@using System;
@using System.Globalization;
@using SunttelTradePointB.Shared.Sales;
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject SunttelTradePointB.Client.Services.AccountsReceivableServices.AccountsReceivableServices AccountsReceivableServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<PageTitleComponent Title="Accounts Receivable" IconName="commercialActivities.png"
                    Description="With this tool you can view accounts receivable">
</PageTitleComponent>




<div class="panelMenuContainer">
    <AccountsReceivableMenu></AccountsReceivableMenu>
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
    <RangeDatesInput @bind-StartDate="@date"
                     StartDateName="Date"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>

</div>



<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

    }
    else
    {
        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="20"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@commercialdocumentList"
                    TItem="CommercialDocument"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value="@selectedcommercialdocuments"
                    CellContextMenu="@ShowContextMenuCommercialDocument">
            <Columns>

                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="@nameof(CommercialDocument.DocumentNumber)" Title="@GetName("DocumentNumber", new CommercialDocument() )" Width="208px" />
                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="@nameof(CommercialDocument.DeliveryDate)" FormatString="{0:MM/dd/yyyy}" Title="@GetName("DeliveryDate", new CommercialDocument() )" Filterable="false" Width="200px" />

                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="Vendor.Name" Title="@GetName("Vendor", new CommercialDocument() )" Width="200px" />
                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="Buyer.Name" Title="@GetName("Buyer", new CommercialDocument() )" Width="200px" />
                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="ShippingStatusDocument.Name" Title="@GetName("ShippingStatusDocument", new CommercialDocument() )" Width="200px" />
                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="Season.Name" Title="@GetName("Season", new CommercialDocument() )" Width="200px" />
                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="FinanceSummary.TotalTaxes" Title="@GetName("TotalTaxes", new FinanceSalesDocumentSummary() )" TextAlign="TextAlign.Right" FormatString="${0:N2}" Filterable="false" Sortable="false" Width="150px" />
                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="FinanceSummary.TotalDiscounts" Title="@GetName("TotalDiscounts", new FinanceSalesDocumentSummary() )" TextAlign="TextAlign.Right" FormatString="${0:N2}" Filterable="false" Sortable="false" Width="150px" />
                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="FinanceSummary.TotalCosts" Title="@GetName("TotalCosts", new FinanceSalesDocumentSummary() )" TextAlign="TextAlign.Right" FormatString="${0:N2}" Filterable="false" Sortable="false" Width="150px" />
                <RadzenDataGridColumn CssClass="info-text-size" TItem="CommercialDocument" Property="FinanceSummary.TotalAmount" Title="@GetName("TotalAmount", new FinanceSalesDocumentSummary() )" TextAlign="TextAlign.Right" FormatString="${0:N2}" Filterable="false" Sortable="false" Width="150px" />

            </Columns>
        </RadzenDataGrid>
    }
</div>


@code {

    [Parameter]
    public string _filterItems { get; set; }
    List<CommercialDocument>? commercialdocumentList { get; set; }
    NumberFormatInfo Us = new CultureInfo("en-US", false).NumberFormat;
    public Warehouse warehouse { get; set; }
    IList<CommercialDocument>? selectedcommercialdocuments;

    bool isLoading = false;

    DateTime date = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {


        if (_filterItems != null) LoadData();
        base.OnInitialized();

    }

    public async void LoadData()
    {
        isLoading = true;

        commercialdocumentList = await AccountsReceivableServices.GetAccountsReceivableServicesList(date, (_filterItems != null ? _filterItems : "all"), 1, 20);

        isLoading = false;
        StateHasChanged();
    }

    public void EventSearchAll(string value)
    {
        docsFilter = value;
    }

    public async void Setwarehouse(Warehouse item)
    {

        if (item != null)
        {
            warehouse = item;
        }
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<CommercialDocument> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        CommercialDocument argObj = (CommercialDocument)args.Value;
        Navigation.NavigateTo($"AccountsReceivableippingItem/{argObj.Id}/{docsFilter}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public void SetdocsFilter(string value)
    {
        docsFilter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }





}
