@page "/StandingOrdersSales"
@page "/StandingOrdersSales/{_filterItems}"
@using SunttelTradePointB.Client.Shared.Menus.StandingOrder;
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@inject SunttelTradePointB.Client.Services.StandingOrderServices.StandingOrderServices StandingOrderServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<PageTitleComponent Title="Standing Orders Sales" IconName="Payments.png"
                    Description="With this tool you can view standing orders sales ">
</PageTitleComponent>

<div class="panelMenuContainer">
    <StandingOrderMenu></StandingOrderMenu>
    <SearchComponent @bind-FilterTextSet="@filter"></SearchComponent>
</div>
<div class="panelMenuContainer">
    <StandingOrderMenu2 SetDocumentTypeMode="SetDocumentType"></StandingOrderMenu2>
    <RangeDatesInput @bind-StartDate="@startingDate"
                     @bind-EndDate="endDate"
                     StartDateName="From"
                     EndDateName="To"
                     EventSearchAll="EventSearchAll"></RangeDatesInput>
</div>


<div class="tableContainer">


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="CreditDocuments"></WaitingProcessIndicator>

    }
    else
    {
        if (standingOrderList != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="20"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="standingOrderList"
                    TItem="StandingOrder"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuCommercialDocument"
                    PageNumbersCount="100">
                <Columns>
                    <RadzenDataGridColumn TItem="StandingOrder" Property="DocumentNumber" Title="@GetName("DocumentNumber",new StandingOrder())" Width="108px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="BusinessLineDoc.Name" Title="@GetName("BusinessLineDoc",new StandingOrder())" Width="108px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="PO" Title="@GetName("PO",new StandingOrder())" Width="98px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="StartingShipDate" Title="@GetName("StartingShipDate",new StandingOrder())" Width="108px">
                        <Template>
                            @{
                                var FinalShipDate = (DateTime)context.GetType().GetProperty(nameof(StandingOrder.FinalShipDate)).GetValue(context);
                                <p>@FinalShipDate.ToString("MM/dd/yyyy")</p>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="StandingOrder" Property="FinalShipDate" FormatString="MM/dd/yyyy" Title="@GetName("FinalShipDate",new StandingOrder())" Width="100px">
                        <Template>
                            @{
                                var FinalShipDate = (DateTime)context.GetType().GetProperty(nameof(StandingOrder.FinalShipDate)).GetValue(context);
                                <p>@FinalShipDate.ToString("MM/dd/yyyy")</p>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="StandingOrder" Property="Season.Name" Title="@GetName("Season",new StandingOrder())" Width="150px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="Vendor.Name" Title="@GetName("Vendor",new StandingOrder())" Width="208px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="Buyer.Name" Title="@GetName("Buyer",new StandingOrder())" Width="208px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="SalesPerson" Title="@GetName("SalesPerson",new StandingOrder())" Width="158px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="@nameof(StandingOrder.FrequencyInDays)" Title="@GetName("FrequencyInDays",new StandingOrder())" Filterable="false" Width="58px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="DeliveryAddress" Title="@GetName("DeliveryAddress",new StandingOrder())" Sortable="false" Filterable="false" Width="208px" />
                    <RadzenDataGridColumn TItem="StandingOrder" Property="TransportationMode" Title="@GetName("TransportationMode",new StandingOrder())" Sortable="false" Filterable="false" Width="150px" />

                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item"><label>@SumTotal()</label> </div>
            </div>
        }
    }
</div>



@code {
    [Parameter]
    public string _filterItems { get; set; }
    public List<StandingOrder> standingOrderList { get; set; }
    public CommercialDocumentType documentType { get; set; }

    bool isLoading = false;

    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string filter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {

        if (_filterItems != null) LoadData();
        base.OnInitialized();


    }

    public async void LoadData()
    {
        isLoading = true;
        if (documentType != null || true)
        {
            standingOrderList = await StandingOrderServices.GetStandingOrderList((filter != null ? filter : "all"), 1, 100);
        }
        isLoading = false;
        StateHasChanged();
    }

    public async void SetDocumentType(CommercialDocumentType item)
    {
        if (item != null)
        {
            documentType = item;
        }
        StateHasChanged();

    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<StandingOrder> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        StandingOrder argObj = (StandingOrder)args.Value;
        Navigation.NavigateTo($"StandingOrderItem/{argObj.Id}/{_filterItems}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    public string SumTotal()
    {
       
        double value = 0;
        string result = "";
        if (standingOrderList != null)
        {
           var  list = standingOrderList.Where(s => s.Vendor.Name != null).ToList();
           var listByVendor = list.GroupBy(s => s.Vendor).ToList();
          
            int counStatus = 0;

            foreach (var item in listByVendor)
            {
                if (!result.ToLower().Contains(item.FirstOrDefault().Vendor.Name.ToLower()))
                {
                    counStatus = listByVendor.Where(s => s.FirstOrDefault().Vendor.Id == item.FirstOrDefault().Vendor.Id).Count();
                    result += item.FirstOrDefault().Vendor.Name + " : " + counStatus + "  ,  ";
                };
            }
        }

        return result; //value.ToString("N2", format);
    }

    public void Setfilter(string value)
    {
        filter = value;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void EventSearchAll(string value)
    {
        filter = value;
    }

}
