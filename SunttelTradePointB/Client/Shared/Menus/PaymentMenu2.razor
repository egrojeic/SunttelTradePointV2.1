@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Shared.Sales
@using SunttelTradePointB.Shared.Accounting
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.PaymentServices.PaymentServices PaymentServices

<div class="aling-div ">
    <div>
        <label class="lblControl col-form-label">
            @GetName("DocumentType",new Payment())
        </label>
    </div>
    <div class="InventoryBusinessLine">
        <select @onchange="SetDocumentType" class="select-style">
            @if (paymentTypeList != null)
            {
                @foreach (var item in paymentTypeList)
                {
                    <option value="@(item.Id)" >@(item.Name)</option>
                }
            }
            <option  selected>select</option>
        </select>
    </div>
</div>


@code {
    [Parameter]
    public List<PaymentType> paymentTypeList { get; set; }
    [Parameter]
    public EventCallback<PaymentType> SetTypeId { get; set; }
    [Parameter]
    public bool isASales { get; set; } 
    [Parameter]
    public bool pageBack { get; set; }


    void ToggleMenu()
    {
        StateHasChanged();
    }


    protected async override void OnParametersSet()
    {      
        paymentTypeList = await PaymentServices.GetPaymentTypeList(1,100,"all");
        if(paymentTypeList!=null) paymentTypeList = paymentTypeList.Where(s => s.IsASale == isASales).ToList();
        StateHasChanged();
        base.OnParametersSet();
    }

    protected async override void OnInitialized()
    {
        paymentTypeList = await PaymentServices.GetPaymentTypeList(1, 100, "all");
        if (paymentTypeList != null) paymentTypeList = paymentTypeList.Where(s => s.IsASale == isASales).ToList();
        StateHasChanged();
    }

    void OnClick(RadzenSplitButtonItem item, string buttonName)
    {
        if (item != null)
        {
            Console.WriteLine($"{buttonName}, item with value {item.Value} clicked");
        }
        else
        {
            Console.WriteLine($"{buttonName} clicked");
        }
    }

    private void ItemSelected(MenuEventArgs args)
    {
        var Selected_item = args.Item.Id;
        Navigation.NavigateTo(Selected_item);
    }

    private void SetDocumentType(ChangeEventArgs args)
    {
        var Selected_item = paymentTypeList.Where(s => s.Id == args.Value.ToString()).FirstOrDefault();
        if (Selected_item != null )
        {
            SetTypeId.InvokeAsync(Selected_item);
        }
    }


    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


    private void CreateNew()
    {
        Navigation.NavigateTo($"/{pageBack}");
    }

}


