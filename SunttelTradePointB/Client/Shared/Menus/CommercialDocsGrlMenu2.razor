@using SunttelTradePointB.Client.Interfaces.SalesInterfaces;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Shared.Sales
@using SunttelTradePointB.Shared.Sales.CommercialDocument
@inject NavigationManager Navigation
@inject ISalesDocuments DocumentServices
@inject IEntityNodes actorsNodeServive;




<div id="container-menu-general">

    <div>
        <label class="label-style color-white">
            @(GetName("DocumentType", new CommercialDocument()) + " ")
        </label>
    </div>

    <div>
        <select @onchange="SetDocumentType" class="select-style">
            @if (commercialDocumentTypeList != null)
            {
                @foreach (var item in commercialDocumentTypeList)
                {
                    <option value="@(item.Id)" >@(item.Name)</option>
                }
            }
            <option value="selected" selected>selected</option>
        </select>
    </div>

    <div><label class="label-style color-white">@GetName(isASale?"Vendor":"Buyer",new CommercialDocument())</label></div>
    <div class="Vendor">
        <InputTextSelector3 styleCaption="width:200px;" TItem="Concept"
                            Id="Vendor"
                            caption="@(vendor !=null ? vendor?.Name:"" )"
                            Items="vendorList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">

        </InputTextSelector3>
    </div>

</div>


@code {
    [Parameter]
    public List<CommercialDocumentType> commercialDocumentTypeList { get; set; }
    [Parameter]
    public EventCallback<CommercialDocumentType> SetDocumentTypeId { get; set; } [Parameter]
    public EventCallback<Concept> SetVendor { get; set; }
    [Parameter]
    public bool isASale { get; set; }

    public List<Concept> vendorList = new();
    public Concept vendor = new();
    string SearcherValue = "";

    protected async override void OnInitialized()
    {
        commercialDocumentTypeList = await DocumentServices.GetCommercialDocumentTypes(isASale);
        StateHasChanged();
    }


    protected async override void OnParametersSet()
    {
        commercialDocumentTypeList = await DocumentServices.GetCommercialDocumentTypes(isASale);
        StateHasChanged();
    }


    void OnClick(RadzenSplitButtonItem item, string buttonName)
    {
        if (item != null)
        {
            Console.WriteLine($"{buttonName}, item with value {item.Value} clicked");
        }
        else
        {
            Console.WriteLine($"{buttonName} clicked");
        }
    }



    private void ItemSelected(MenuEventArgs args)
    {
        var Selected_item = args.Item.Id;
        Navigation.NavigateTo(Selected_item);
    }

    private void SetDocumentType(ChangeEventArgs args)
    {
        var Selected_item = commercialDocumentTypeList.Where(s => s.Id == args.Value.ToString()).FirstOrDefault();
        if (Selected_item != null)
        {
            SetDocumentTypeId.InvokeAsync(Selected_item);
        }
    }



    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();
        if (SearcherValue == "Vendor")
        {
            var list = await DocumentServices.GetCommercialVendorList(arg.value.ToString(), isASale, 1,50);
            vendorList = new();
            foreach (var item in list)
            {
                vendorList.Add(item);
            }

        }


        StateHasChanged();
    }



    public async void EventIdSelectionAndId(Concept item)
    {
        if (SearcherValue == "Vendor")
        {
            SetVendor.InvokeAsync(item);
            vendor = item;

        }


        StateHasChanged();
    }



    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


    private void CreateNew()
    {
        Navigation.NavigateTo("/SaleItem");
    }

}


