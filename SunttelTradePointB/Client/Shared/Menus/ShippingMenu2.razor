@using SunttelTradePointB.Client.Interfaces.SalesInterfaces;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Shared.Sales
@using SunttelTradePointB.Shared.InvetoryModels
@inject NavigationManager Navigation
@inject ISalesDocuments DocumentServices
@inject WarehouseService warehouseService
@inject SunttelTradePointB.Client.Services.InventoryServices.Inventory InventoryServices



<div class="aling-div">

    <div>
        <label class="label-style">
            Warehouse
        </label>
    </div>
    <div>
        <select @onchange="SelectItemWarehous" class="select-style">
            @if (warehouseList != null && warehouseList.Count() > 0)
            {
                <option value="0" selected>Select</option>
            }
            @if (warehouseList != null)
            {
                @foreach (var item in warehouseList)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            }
            @if (warehouse != null)
            {
                <option value="@warehouse.Id" selected>@warehouse.Name</option>
            }
        </select>
    </div>

   

</div>


@code {
    [Parameter]
    public List<CommercialDocumentType> commercialDocumentTypeList { get; set; }  

    [Parameter]
    public EventCallback<Warehouse> SetWarehouse { get; set; }

    [Parameter]
    public EventCallback Changed { get; set; }

    List<Warehouse> warehouseList = new();
    Warehouse warehouse = new();

    protected async override void OnInitialized()
    {
       LoadData();      
    }

    protected override void OnParametersSet()
    {
        LoadData();
       
        base.OnParametersSet();
    }

    public async void LoadData(){
        warehouseList = await InventoryServices.GetWarehouseList("all");
       await Changed.InvokeAsync(null);
        StateHasChanged();
    }

 
    private void ItemSelected(MenuEventArgs args)
    {
        var Selected_item = args.Item.Id;
        Navigation.NavigateTo(Selected_item);
    }

    public async void SelectItemWarehous(ChangeEventArgs arg)
    {   
        warehouse = warehouseList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        if (warehouse != null)
        {
           
            SetWarehouse.InvokeAsync(warehouse);
        }
        StateHasChanged();
    }

     public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    

    private void CreateNew()
    {
        Navigation.NavigateTo("/Inventory");
    }

}


