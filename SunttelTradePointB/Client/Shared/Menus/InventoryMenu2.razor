@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Shared.Sales
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject WarehouseService warehouseService
@inject SunttelTradePointB.Client.Services.InventoryServices.Inventory InventoryServices



<div id="container-menu-general">
    <nav>
        <div>
            <label>
                @GetName("WareHouseParent",new Warehouse())
            </label>
        </div>
        <select @onchange="SelectItemVendorWarehous" class="select-style">           
            @if (warehouseList != null && warehouseList.Count() > 0)
            {
                <option value="0" selected>Select</option>
            }
            @if (warehouseList != null)
            {
                @foreach (var item in warehouseList)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            }
            @if (warehouse != null)
            {
                <option value="@warehouse.Id" selected>@warehouse.Name</option>
            }
        </select>
       
    </nav>

</div>


@code {
    [Parameter]
    public List<CommercialDocumentType> commercialDocumentTypeList { get; set; }
    [Parameter]
    public EventCallback<CommercialDocumentType> SetDocumentTypeId { get; set; }

    List<Warehouse> warehouseList = new();
    Warehouse warehouse = new();

    static bool ShowMenu { get; set; } = false;
    public string commandStyle = "display: 'none';";

    const string PASTE = "e-btn-icons e-paste";
    const string PASTESPECIAL = "e-btn-icons e-paste-special";
    const string PASTEASFORMULA = "e-btn-icons e-paste-formula";
    const string PASTEASHYPERLINK = "e-btn-icons e-paste-hyperlink";

    void ToggleMenu()
    {
        ShowMenu = !ShowMenu;
        commandStyle = $"display: {(ShowMenu ? "block" : "none")}";
        StateHasChanged();

    }



    protected async override void OnInitialized()
    {
        commercialDocumentTypeList = await DocumentServices.GetCommercialDocumentTypes();
        warehouseList = await InventoryServices.GetWarehouseList("all");
        StateHasChanged();
    }

    void OnClick(RadzenSplitButtonItem item, string buttonName)
    {
        if (item != null)
        {
            Console.WriteLine($"{buttonName}, item with value {item.Value} clicked");
        }
        else
        {
            Console.WriteLine($"{buttonName} clicked");
        }
    }

    private void ItemSelected(MenuEventArgs args)
    {
        var Selected_item = args.Item.Id;
        Navigation.NavigateTo(Selected_item);
    }

    private void SetDocumentType(ChangeEventArgs args)
    {
        var Selected_item = commercialDocumentTypeList.Where(s=>s.Id == args.Value.ToString()).FirstOrDefault();
        if (Selected_item!= null){
       SetDocumentTypeId.InvokeAsync(Selected_item);
        }
    }


    public async void SelectItemVendorWarehous(ChangeEventArgs arg)
    {       
        Warehouse _warehouse = new Warehouse();
        _warehouse = (Warehouse)arg.Value;
        if (_warehouse != null)
        {
            var item = await warehouseService.GetWarehouseById(_warehouse.Id);
            warehouse = item;
        }
        StateHasChanged();
    }

     public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    

    private void CreateNew()
    {
        Navigation.NavigateTo("/Inventory");
    }

}


