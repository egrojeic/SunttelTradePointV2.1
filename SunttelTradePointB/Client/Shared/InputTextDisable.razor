@if (Enable)
{
    <div style="@style">
        <input type="@(TypeInt?"number":"")" value="@Value" class="form-control" @onchange="Onchange">
    </div>
}
else
{
    <div class="p-mode-text" style="@style">
        <p>@Value</p>
    </div>
}
@code {

    public string Value { get; set; }
    [Parameter]
    public int? ValueInt { get; set; }
    [Parameter]
    public string? ValueString { get; set; }
    [Parameter]
    public double? ValueDouble { get; set; }
    [Parameter]
    public bool Enable { get; set; } = true;
    [Parameter]
    public bool TypeInt { get; set; } = true;
    [Parameter]
    public string style  { get; set; }
    [Parameter]
    public string Min  { get; set; }
    [Parameter]
    public string Max { get; set; }
    [Parameter]
    public EventCallback<int> ValueIntChanged { get; set; }
    [Parameter]
    public EventCallback<string> ValueStringChanged { get; set; }
    [Parameter]
    public EventCallback<double> ValueDoubleChanged { get; set; }
    [Parameter]
    public EventCallback ChangedUpdate { get; set; }



    public void Onchange(ChangeEventArgs arg)
    {
        if (ValueInt != null) ValueInt = GetValidateRange(Convert.ToInt32(arg.Value.ToString()));
        if (ValueDouble != null) ValueDouble = GetValidateRange(Convert.ToDouble(arg.Value.ToString()));
        if (ValueString != null) ValueString = arg.Value.ToString();


        if (ValueInt != null) ValueIntChanged.InvokeAsync(ValueInt.Value);
        if (ValueDouble != null) ValueDoubleChanged.InvokeAsync(ValueDouble.Value);
        if (ValueString != null) ValueStringChanged.InvokeAsync(ValueString);

        if (ValueInt != null) Value = ValueInt.ToString();
        if (ValueDouble != null) Value = ValueDouble.ToString();
        if (ValueString != null) Value = ValueString.ToString();
      
        ChangedUpdate.InvokeAsync(null);
        StateHasChanged();

    }


    protected async override void OnInitialized()
    {
        Load();
    }


    protected override void OnParametersSet()
    {
        StateHasChanged();
    }


    public void Load(){


        if (ValueInt != null) ValueInt = GetValidateRange(ValueInt);
        if (ValueDouble != null) ValueDouble = GetValidateRange(ValueDouble);
        if (ValueString != null) Value = ValueString.ToString();

        if (ValueInt != null) Value = ValueInt.ToString();
        if (ValueDouble != null) Value = ValueDouble.ToString();
        if (ValueString != null) Value = ValueString.ToString();


        if (ValueInt != null) ValueIntChanged.InvokeAsync(ValueInt.Value);
        if (ValueDouble != null) ValueDoubleChanged.InvokeAsync(ValueDouble.Value);
        if (ValueString != null) ValueStringChanged.InvokeAsync(ValueString);


      
    }



    public int GetValidateRange(int? value)
    {
        int min = 0;
        int max = 0;

        if (Min!=null)  min = Convert.ToInt32(Min);
        if (Max!=null)  max = Convert.ToInt32(Max);


        if (min > value) return min;
        if (max < value) return max;
        return value.Value;

    }

  

    public double GetValidateRange(double? value)
    {
        double min = 0;
        double max = 0;

        if (Min != null) min = Convert.ToDouble(Min);
        if (Max != null) max = Convert.ToDouble(Max);


        if (min > value) return min;
        if (max < value && max > 0) return max;
        return value.Value;

    }

}
