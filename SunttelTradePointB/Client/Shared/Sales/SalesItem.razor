@page "/SalesItem"
@page "/SalesItem/{commercialDocumentId}"
@page "/SalesItem/{filter}/{commercialDocumentId}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices

<MessageSaveComponent @ref="referAlert">
</MessageSaveComponent>


<form>
    <div class="panelMenuContainer" style="max-width:95%;">
        <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

        <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
            </DropDownMenuItems>
        </SfSplitButton>


    </div>
    <SfTab Height="250px" CssClass="tab-adaptive">
        <TabAnimationSettings>
            <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
            <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
        </TabAnimationSettings>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="General"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="grid-columns-4 width">

                        <div><b class="c-red">*</b><label>@GetName("DocumentType",new CommercialDocument())</label></div>
                        <InputTextSelector3 TItem="CommercialDocumentType"
                                            Id="DocumentType"
                                            caption="@(commercialDocument.DocumentType !=null ? commercialDocument.DocumentType?.Name:"" )"
                                            Items="documentTypeList">

                        </InputTextSelector3>

                        <div><b class="c-red">*</b><label>@GetName("BusinessLineDoc",new CommercialDocument())</label></div>
                        <InputTextSelector3 TItem="BusinessLine"
                                            Id="BusinessLineDoc"
                                            caption="@(commercialDocument.BusinessLineDoc !=null ? commercialDocument.BusinessLineDoc?.Name:"" )"
                                            Items="businessLineDocList">

                        </InputTextSelector3>

                        <div><b class="c-red">*</b><label>@GetName("SalesPerson",new CommercialDocument())</label></div>
                        <InputTextSelector3 TItem="Concept"
                                            Id="SalesPerson"
                                            caption="@(commercialDocument.SalesPerson !=null ? commercialDocument.SalesPerson?.Name:"" )"
                                            Items="salesPersonList">

                        </InputTextSelector3>

                        <div><b class="c-red">*</b><label>@GetName("ShippingStatusDocument",new CommercialDocument())</label></div>
                        <InputTextSelector3 TItem="ShippingStatus"
                                            Id="ShippingStatusDocument"
                                            caption="@(commercialDocument.ShippingStatusDocument !=null ? commercialDocument.ShippingStatusDocument?.Name:"" )"
                                            Items="shippingStatusDocumentList">

                        </InputTextSelector3>

                        <div><b class="c-red">*</b><label>@GetName("FinanceStatusDocument",new CommercialDocument())</label></div>
                        <InputTextSelector3 TItem="FinanceStatus"
                                            Id="FinanceStatusDocument"
                                            caption="@(commercialDocument.FinanceStatusDocument !=null ? commercialDocument.FinanceStatusDocument?.Name:"" )"
                                            Items="financeStatusDocumentList">

                        </InputTextSelector3>

                        <div><b class="c-red">*</b><label>@GetName("CommercialDocument",new CommercialDocument())</label></div>
                        <InputTextSelector3 TItem="CommercialDocument"
                                            Id="FinanceStatusDocument"
                                            caption="@(commercialDocument.OriginDocument !=null &&  commercialDocument.OriginDocument?.DocumentType !=null? commercialDocument.OriginDocument?.DocumentType.Name:"" )"
                                            Items="originDocument">

                        </InputTextSelector3>

                        <div><b class="c-red">*</b><label>@GetName("VendorWarehouse",new CommercialDocument())</label></div>
                        <InputTextSelector3 TItem="BasicConcept"
                                            Id="VendorWarehouse"
                                            caption="@(commercialDocument.VendorWarehouse !=null ?  commercialDocument.VendorWarehouse.Name:"" )"
                                            Items="vendorWarehouseList">

                        </InputTextSelector3>

                        <div><b class="c-red">*</b><label>@GetName("BuyerWarehouse",new CommercialDocument())</label></div>
                        <InputTextSelector3 TItem="BasicConcept"
                                            Id="BuyerWarehouse"
                                            caption="@(commercialDocument.BuyerWarehouse !=null ?  commercialDocument.BuyerWarehouse.Name:"" )"
                                            Items="buyerWarehouseList">

                        </InputTextSelector3>

                        <div><label>@GetName("SpecsNotes",new CommercialDocument())</label></div>
                        <div><input @bind-value="commercialDocument.SpecsNotes" class="form-control" /></div>

                        <div><b class="c-red">*</b><label>@GetName("TrackingNumber",new CommercialDocument())</label></div>
                        <div><p>@(commercialDocument.TrackingNumber)</p><img class="img-ico-edit" src="~/images//edit.png"></div>

                        <div><b class="c-red">*</b><label>@GetName("ShipDate",new CommercialDocument())</label></div>
                        <div><input type="date" @bind-value="commercialDocument.ShipDate" class="form-control" /></div>

                        <div><b class="c-red">*</b><label>@GetName("DeliveryDate",new CommercialDocument())</label></div>
                        <div><input type="date" @bind-value="commercialDocument.DeliveryDate" class="form-control" /></div>

                        <div><b class="c-red">*</b><label>@GetName("ArrivalDate",new CommercialDocument())</label></div>
                        <div><input type="date" @bind-value="commercialDocument.ArrivalDate" class="form-control" /></div>

                        <div><b class="c-red">*</b><label>@GetName("MarkedForQCInspection",new CommercialDocument())</label></div>
                        <div>
                            <SfSwitch @bind-Checked="@commercialDocument.MarkedForQCInspection"></SfSwitch>
                        </div>
                        <div><b class="c-red">*</b><label>@GetName("ToInvoice",new CommercialDocument())</label></div>
                        <div>
                            <SfSwitch @bind-Checked="@commercialDocument.ToInvoice"></SfSwitch>
                        </div>
                    </div>

                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("DeliveryAddress",new CommercialDocument())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <AddressComponent oldAddress="@commercialDocument.DeliveryAddress"></AddressComponent>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("PrintingSatus",new CommercialDocument())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="grid-columns-4 width">
                        <div><b class="c-red">*</b><label>@GetName("DocumentPrinted",new SalesDocumentPrintingSatus())</label></div>
                        <div>
                            <SfSwitch @bind-Checked="@commercialDocument.PrintingSatus.DocumentPrinted"></SfSwitch>
                        </div>
                        <div><b class="c-red">*</b><label>@GetName("BillOfLandingPrinted",new SalesDocumentPrintingSatus())</label></div>
                        <div>
                            <SfSwitch @bind-Checked="@commercialDocument.PrintingSatus.BillOfLandingPrinted"></SfSwitch>
                        </div>
                        <div><b class="c-red">*</b><label>@GetName("PickingTicketPrinted",new SalesDocumentPrintingSatus())</label></div>
                        <div>
                            <SfSwitch @bind-Checked="@commercialDocument.PrintingSatus.PickingTicketPrinted"></SfSwitch>
                        </div>
                        <div><b class="c-red">*</b><label>@GetName("LabelsPrinted",new SalesDocumentPrintingSatus())</label></div>
                        <div>
                            <SfSwitch @bind-Checked="@commercialDocument.PrintingSatus.LabelsPrinted"></SfSwitch>
                        </div>
                        <div><b class="c-red">*</b><label>@GetName("SelectedToPrint",new SalesDocumentPrintingSatus())</label></div>
                        <div>
                            <SfSwitch @bind-Checked="@commercialDocument.PrintingSatus.SelectedToPrint"></SfSwitch>
                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("Items",new CommercialDocument())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="detailsTitleContainer">
                        <h3 class="subTitleDetailForm">@GetName("Items",new CommercialDocument())</h3>
                        <svg @onclick='()=>NavigationTo($"/CharacteristicCard")' title="Add new tag" style="margin-left:20px;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                        </svg>
                    </div>
                  

                        @if (isLoading)
                        {

                            <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

                        }
                        else
                        {
                            @if (commercialDocument.Items != null)
                            {
                                <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@commercialDocument.Items"
                                        TItem="SalesDocumentItemsDetails"
                                        ColumnWidth="300px"
                                        PageNumbersCount="100"
                                        PageSize="20">

                                    <Columns>
                                        <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="DocumentPrinted" Title="@GetName("DocumentPrinted", new SalesDocumentItemsDetails())" Width="80px">
                                            <Template>
                                                bool value = (bool)context.GetType().GetProperty("DocumentPrinted").GetValue(context);
                                                <input type="checkbox" checked="value" disabled />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="BillOfLandingPrinted" Title="@GetName("BillOfLandingPrinted", new SalesDocumentItemsDetails())" Width="80px">
                                            <Template>
                                                bool value = (bool)context.GetType().GetProperty("BillOfLandingPrinted").GetValue(context);
                                                <input type="checkbox" checked="value" disabled />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PickingTicketPrinted" Title="@GetName("PickingTicketPrinted", new SalesDocumentItemsDetails())" Width="80px">
                                            <Template>
                                                bool value = (bool)context.GetType().GetProperty("PickingTicketPrinted").GetValue(context);
                                                <input type="checkbox" checked="value" disabled />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="LabelsPrinted" Title="@GetName("LabelsPrinted", new SalesDocumentItemsDetails())" Width="80px">
                                            <Template>
                                                bool value = (bool)context.GetType().GetProperty("LabelsPrinted").GetValue(context);
                                                <input type="checkbox" checked="value" disabled />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="SelectedToPrint" Title="@GetName("SelectedToPrint", new SalesDocumentItemsDetails())" Width="80px">
                                            <Template>
                                                bool value = (bool)context.GetType().GetProperty("SelectedToPrint").GetValue(context);
                                                <input type="checkbox" checked="value" disabled />
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            }
                        }

                  
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>


</form>




@code {
    [Parameter]
    public string commercialDocumentId { get; set; }
    [Parameter]
    public string filter { get; set; }

    public CommercialDocument commercialDocument = new();
    public SalesDocumentItemsDetails items = new();


    #region Input3
    public List<CommercialDocumentType> documentTypeList = new();
    public List<BusinessLine> businessLineDocList = new();
    public List<Concept> salesPersonList = new();
    public List<ShippingStatus> shippingStatusDocumentList = new();
    public List<FinanceStatus> financeStatusDocumentList = new();
    public List<CommercialDocument> originDocument = new();
    public List<BasicConcept> vendorWarehouseList = new();
    public List<BasicConcept> buyerWarehouseList = new();
    #endregion Input3


    MessageSaveComponent? referAlert;
    string msg = "";
    bool isLoading = false;

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        isLoading = true;
        OpenAlert("Loading...", 0, true);
        StateHasChanged();
        if (commercialDocumentId != null)
        {
            commercialDocument = await DocumentServices.GetItemCommercialDocumentById(commercialDocumentId);
        }

        LoadCommercialDocument();

        OpenAlert("Loading...", 0, false);
        isLoading = false;
        StateHasChanged();
    }


    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {



        }


        StateHasChanged();

    }



    public string GetDeliveryAddress(Address address)
    {
        string _address = "";
        if (address != null)
        {
            _address = address.ZipCode;
            if (address.CityAddress != null && address.CityAddress.RegionCity != null && address.CityAddress.RegionCity.CountryRegion != null)
                _address += address.CityAddress.RegionCity.CountryRegion.Name;
        }
        return _address;
    }

    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/SalesDocuments/{paramFilter}");
        Navigation.NavigateTo($"/SalesDocuments");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }


    #region Load

    public void LoadCommercialDocument()
    {
        if (commercialDocument == null) commercialDocument = new();
        if (commercialDocument.DocumentType == null) commercialDocument.DocumentType = new();
        if (commercialDocument.BusinessLineDoc == null) commercialDocument.BusinessLineDoc = new();
        if (commercialDocument.Vendor == null) commercialDocument.Vendor = new();
        if (commercialDocument.Buyer == null) commercialDocument.Buyer = new();
        if (commercialDocument.SalesPerson == null) commercialDocument.SalesPerson = new();
        if (commercialDocument.Carrier == null) commercialDocument.Carrier = new();
        if (commercialDocument.DeliveryAddress == null) commercialDocument.DeliveryAddress = new();
        if (commercialDocument.ShippingStatusDocument == null) commercialDocument.ShippingStatusDocument = new();
        if (commercialDocument.FinanceStatusDocument == null) commercialDocument.FinanceStatusDocument = new();
        if (commercialDocument.OriginDocument == null) commercialDocument.OriginDocument = new();
        if (commercialDocument.VendorWarehouse == null) commercialDocument.VendorWarehouse = new();
        if (commercialDocument.BuyerWarehouse == null) commercialDocument.BuyerWarehouse = new();
        if (commercialDocument.Season == null) commercialDocument.Season = new();
        if (commercialDocument.PrintingSatus == null) commercialDocument.PrintingSatus = new();
        if (commercialDocument.FinanceSummary == null) commercialDocument.FinanceSummary = new();
        if (commercialDocument.Items == null) commercialDocument.Items = new();

        #region SalesDocumentItemsDetails
        if (items.TransactionalItem == null) items.TransactionalItem = new();
        if (items.TransactionalItemSpecs == null) items.TransactionalItemSpecs = new();
        if (items.Provider == null) items.Provider = new();
        if (items.CancelationInfo == null) items.CancelationInfo = new();

        #endregion SalesDocumentItemsDetails
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
