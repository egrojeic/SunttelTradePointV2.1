@page "/SaleItem/{page}"
@page "/PurchasesItem/{page}"
@page "/PurchasesItem/{page}/{commercialDocumentId}"
@page "/PurchasesItem/{page}/{commercialDocumentId}/{filter}"
@page "/SaleItem/{page}/{commercialDocumentId}"
@page "/SaleItem/{page}/{commercialDocumentId}/{filter}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@using SunttelTradePointB.Client.Services.SalesServices

@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject SunttelTradePointB.Client.Services.MasterTablesServices.ActorsNodeService actor
@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeServive
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>


<PageTitleComponent Title="@namePage"
                    Description="@($"Here you can add {@namePage}")" IconName="@icoLogo">
</PageTitleComponent>
@if (onInitialized)
{
    <form>

        <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
            <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton tabindex="16" Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save and Confirm" IconCss="e-icons e-save-as"></DropDownMenuItem>
                    @if (commercialDocumentId != null)
                    {
                        <DropDownMenuItem Text="Print" IconCss="e-menu-icon e-menu-icon fa-solid fa-print"></DropDownMenuItem>
                    }
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>



        </div>
        <SliderScrollAuto summary="@commercialDocument.FinanceSummary"></SliderScrollAuto>
        <TextToSpeech @ref="textToSpeech" Id="FinanceSummary" EventChange="EventChange" Class="speack">
        </TextToSpeech>
        <div class="grid-columns-header grid-columns-6 height">

            <div class="item-1">
                <div><label class="info-text-size">@GetName("ShippingStatusDocument",new CommercialDocument())</label></div>
                <Status color="#61c100" Name="@(commercialDocument.ShippingStatusDocument !=null ? commercialDocument.ShippingStatusDocument.Name:"")"></Status>

                <div><label class="info-text-size">@GetName("FinanceStatusDocument",new CommercialDocument())</label></div>
                <Status Name="@(commercialDocument.FinanceStatusDocument !=null ? commercialDocument.FinanceStatusDocument.Name:"")"></Status>

                <div><label class="info-text-size">@GetName("PrintingSatus",new CommercialDocument())</label></div>
                <StatusItem item="commercialDocument.PrintingSatus"></StatusItem>

                <div class="item-check">
                    <div><label class="info-text-size">@GetName("MarkedForQCInspection",new CommercialDocument())</label></div>
                    <div>
                        <SfSwitch @bind-Checked="@commercialDocument.MarkedForQCInspection"></SfSwitch>
                    </div>
                    <div><label class="info-text-size">@GetName("ToInvoice",new CommercialDocument())</label></div>
                    <div>
                        <SfSwitch @bind-Checked="@commercialDocument.ToInvoice"></SfSwitch>
                    </div>
                </div>

            </div>

            <div><label class="info-text-size">@GetName("DocumentType",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemDocumentType" class="select-style info-text-size" tabindex="1" autofocus>

                    @if (documentTypeList != null)
                    {

                        <option value="0" selected>Select</option>
                        @foreach (var item in documentTypeList)
                        {
                            if (item.Id == commercialDocument.DocumentType?.Id)
                            {
                                <option selected value="@item.Id">@item.Name</option>

                            }
                            else
                            {

                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    }

                </select>
            </div>

            <div><label class="info-text-size">@GetName("DocumentNumber",new CommercialDocument())</label></div>
            <div>

                @*<InputTextDisable Tabindex="2" style="width:180px" Enable="@(!(commercialDocument.DocumentType?.DocNumberAutogenerated ?? true))"
            TypeInt="true"
            @bind-ValueInt="commercialDocument.DocumentNumber">
            </InputTextDisable>*@
                <input type="number" class="form-control" tabindex="2" @bind-value="commercialDocument.DocumentNumber" @onblur="ValidateDocumentNumber" />


            </div>

            <div><label class="info-text-size">@GetName("PO",new CommercialDocument())</label></div>
            <div>

                @*<InputTextDisable TypeInt="true" Tabindex="2" Enable="GetTypeStatus()" @bind-ValueString="commercialDocument.PO"></InputTextDisable>*@
                <input type="number" tabindex="2" class="form-control" @bind-value="commercialDocument.PO" @onblur="ValidatePO" />
            </div>

            <div><label class="info-text-size">@GetName("ShipDate",new CommercialDocument())</label></div>
            <div>

                <input Tabindex="3" type="date" @bind-value="commercialDocument.ShipDate" class="form-control info-text-size input-style" @onblur="ValidatePO" />

            </div>

            <div><label class="info-text-size">@GetName("DeliveryDate",new CommercialDocument())</label></div>
            <div>

                <input Tabindex="4" type="date" @bind-value="commercialDocument.DeliveryDate" class="form-control info-text-size input-style" @onblur="ValidatePO" />

            </div>

            <div><label class="info-text-size">@GetName("ArrivalDate",new CommercialDocument())</label></div>
            <div>
                <input Tabindex="5" type="date" @bind-value="commercialDocument.ArrivalDate" class="form-control info-text-size input-style" @onblur="ValidatePO" />
            </div>

            <div><label class="info-text-size">@GetName("Vendor",new CommercialDocument())</label></div>
            <div class="Vendor">
                <InputTextSelector3 Tabindex="6" styleCaption="min-width: 25vw;" TItem="Concept"
                                    Id="Vendor"
                                    caption="@(commercialDocument.Vendor !=null ? commercialDocument.Vendor?.Name:"" )"
                                    Items="vendorList"
                                    EventIdSelectionAndId="EventIdSelectionAndId"
                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                    Disable="GetTypeStatus()">
                </InputTextSelector3>
            </div>

            <div><label class="info-text-size">@GetName("Buyer",new CommercialDocument())</label></div>
            <div class="Buyer Edit-control">

                <InputTextSelector3 Tabindex="7" styleCaption="min-width: 22vw;" TItem="Concept"
                                    Id="Buyer"
                                    caption="@(commercialDocument.Buyer !=null ? commercialDocument.Buyer?.Name:"" )"
                                    Items="buyerList"
                                    EventIdSelectionAndId="EventIdSelectionAndId"
                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                    Disable="GetTypeStatus()">

                </InputTextSelector3>
                @if (commercialDocument.Buyer != null)
                {
                    <button tabindex="8" type="button" @onclick='()=>EditActorMode(commercialDocument.Buyer.Id)'><i class="bi bi-pencil-square"></i></button>
                }
            </div>

            <div><label class="info-text-size">@GetName("SalesPerson",new CommercialDocument())</label></div>
            <div>
                <InputTextSelector3 Tabindex="9" styleCaption="width:180px; " style="left:auto;" TItem="Concept"
                                    Id="SalesPerson"
                                    caption="@(commercialDocument.SalesPerson !=null ? commercialDocument.SalesPerson?.Name:"" )"
                                    Items="salesPersonList"
                                    EventIdSelectionAndId="EventIdSelectionAndId"
                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                    Disable="GetTypeStatus()">
                </InputTextSelector3>

            </div>
            <div><label class="info-text-size">@GetName("DeliveryAddress",new CommercialDocument())</label></div>
            <div class="inline-items">
                <select @onchange="SelectItemDeliveryAddress" class="select-style info-text-size" tabindex="10">

                    <option value="0" selected>Select</option>

                    @if (addressList != null && addressList.Any() && GetTypeStatus())
                    {
                        @foreach (var item in addressList)
                        {
                            if (commercialDocument?.DeliveryAddress?.Id == item.Id)
                            {
                                <option selected value="@item.Id">@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    }

                </select>
                <img @onclick='RedirectForAddAddress' class="color-btn" src="/images//ico-plus.png">
            </div>

            <div><label class="info-text-size">@GetName("Season",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectSeason" class="select-style info-text-size" tabindex="11">

                    @if (seasonList != null && GetTypeStatus())
                    {

                        <option value="0" selected>Select</option>

                        @foreach (var item in seasonList!)
                        {
                            @if (commercialDocument?.Season?.Id == item.Id)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    }

                </select>

            </div>

            <div><label class="info-text-size">@GetName("Carrier",new CommercialDocument())</label></div>
            <div>

                <select @onchange="SelectItemCarrie" class="select-style info-text-size" tabindex="12">

                    @if (carrierList != null && carrierList.Count() > 0 && GetTypeStatus())
                    {
                        <option value="0" selected>Select</option>

                        @foreach (var item in carrierList)
                        {
                            if (commercialDocument?.Carrier?.Id == item.Id)
                            {
                                <option selected value="@item.Id">@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Id">@item.Name</option>
                            }

                        }
                    }


                </select>

            </div>

            @*<div><label class="info-text-size">@GetName("TrackingNumber",new CommercialDocument())</label></div>
        <div>

        <InputTextDisable Tabindex="13" Enable="@GetTypeStatus()" TypeInt="false" @bind-ValueString="commercialDocument.TrackingNumber"></InputTextDisable>

        </div>*@

            <div><label class="info-text-size">@GetName("VendorWarehouse",new CommercialDocument())</label></div>
            <div>

                <select @onchange="SelectItemVendorWarehous" class="select-style info-text-size" tabindex="14">

                    @if (commercialDocument.VendorWarehouse != null && GetTypeStatus() && vendorWarehouseList != null && vendorWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>

                        @foreach (var item in vendorWarehouseList)
                        {
                            if (commercialDocument.VendorWarehouse.Id == item.Id)
                            {
                                <option selected value="@item.Id">@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    }

                </select>

            </div>

            <div><label class="info-text-size">@GetName("BuyerWarehouse",new CommercialDocument())</label></div>
            <div>

                <select @onchange="SelectItemBuyerWarehous" class="select-style info-text-size " tabindex="15">

                    <option value="0" selected>Select</option>

                    @if (commercialDocument.BuyerWarehouse != null && GetTypeStatus() && buyerWarehouseList != null && buyerWarehouseList.Count() > 0)
                    {

                        @foreach (var item in buyerWarehouseList)
                        {
                            if (commercialDocument.BuyerWarehouse.Id == item.Id)
                            {
                                <option selected value="@item.Id">@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    }

                </select>

            </div>

            <div><label class="info-text-size">@GetName("BusinessLineDoc",new CommercialDocument())</label></div>
            <div>

                <select @onchange="SelectItemBusinessLineDoc" class="select-style info-text-size" tabindex="16">

                    <option value="0" selected>Select</option>

                    @if (businessLineDocList != null && GetTypeStatus() && businessLineDocList.Count() > 0)
                    {

                        @foreach (var item in businessLineDocList)
                        {
                            if (commercialDocument?.BusinessLineDoc?.Id == item.Id)
                            {
                                <option selected value="@item.Id">@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    }

                </select>

            </div>
        </div>
        <hr />
        <SfTab @oncontextmenu:preventDefault="true" Height="250px" CssClass="tab-adaptive " HeaderPlacement="HeaderPosition.Left">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>

            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("Items",new CommercialDocument())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="container-item">
                            @if (commercialDocument.Items != null)
                            {
                                <SalesDocumentItems Reaload="Reload" isASales="isASale" BuyerItems="@BuyerItems" items="@commercialDocument.Items" alert="alert" buyerId="@commercialDocument.Buyer.Id" commercialDocumentId="@commercialDocument.Id"></SalesDocumentItems>
                            }
                        </div>
                    </ContentTemplate>
                </TabItem>

                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("SpecsNotes",new CommercialDocument())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div>
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm ">@GetName("SpecsNotes",new CommercialDocument())</h3>
                            </div>
                            <textarea @bind="commercialDocument.SpecsNotes" class="textarea-control"></textarea>
                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    </form>
}
else
{
    <WaitingProcessIndicator loadingTopic="."></WaitingProcessIndicator>
}


@code {
    [Parameter]
    public string commercialDocumentId { get; set; }
    [Parameter]
    public string filter { get; set; }
    [Parameter]
    public string page { get; set; }

    public string hostPrint { get; set; } = "https://localhost:7166/";

    TextToSpeech textToSpeech;

    string msg = "";
    string SearcherValue = "";
    string namePage = "";
    string backPage = "";
    string icoLogo = "";
    bool menuVisible = false;
    bool viewMsg = false;
    bool isASale = false;
    bool onInitialized = false;
    private bool timerDetailStatus = true;
    public List<SalesDocumentItemsDetails> BuyerItems = new List<SalesDocumentItemsDetails>();

    public CommercialDocument commercialDocument = new();
    // public SalesDocumentItemsDetails items = new();

    #region Status
    public List<ShippingStatus> shippingStatusDocumentList = new();
    public List<FinanceStatus> financeStatusDocumentList = new();
    #endregion Status

    #region Input3
    public List<CommercialDocumentType> documentTypeList = new();
    public List<BusinessLine> businessLineDocList = new();
    public List<Concept> salesPersonList = new();
    public List<Concept> vendorList = new();
    public List<Concept> carrierList = new();
    public List<Concept> buyerList = new();
    public List<SeasonBusiness> seasonList = new();
    public List<CommercialDocument> originDocument = new();
    public List<BasicConcept> vendorWarehouseList = new();
    public List<BasicConcept> buyerWarehouseList = new();
    public List<Address> addressList = new();

    #endregion Input3

    MessageSaveComponent? referAlert;
    bool isLoading = false;

    protected override void OnParametersSet()
    {
        ValidateUri();
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {

        onInitialized = false;
        ValidateUri();
        isLoading = true;
        StateHasChanged();
        if (commercialDocumentId != null)
        {
            commercialDocument = await DocumentServices.GetItemCommercialDocumentById(commercialDocumentId);
            if (commercialDocument.Items == null) commercialDocument.Items = new();
            commercialDocument.Items = await DocumentServices.GetCommercialDocumentDetails(commercialDocumentId);
            if (commercialDocument.Buyer != null) commercialDocument.Buyer = await actor.GetEntityActor(commercialDocument.Buyer.Id);
            if (commercialDocument.Buyer != null) LoadBuyerAndVendor("Buyer");
            if (commercialDocument.Vendor != null) LoadBuyerAndVendor("Vendor");
            commercialDocument.FinanceSummary = new FinanceSalesDocumentSummary()
                {
                    TotalAmount = commercialDocument.Items.Sum(s => s.Total),
                    TotalTaxes = commercialDocument.Items.Sum(s => s.TaxValue)
                };
        }
        else
        {
            await SaveCommercialDocument();
        }

        documentTypeList = await DocumentServices.GetCommercialDocumentTypes(isASale);//ok
        businessLineDocList = await DocumentServices.GetCommercialBusinessLines("all");
        carrierList = await DocumentServices.GetCarrierList();
        seasonList = await DocumentServices.GetCommercialSeasonList("all");
        LoadCommercialDocument();
        isLoading = false;
        onInitialized = true;




        TimerDetail();
        StateHasChanged();
    }

    public async void ItemSelected(MenuEventArgs e)
    {
        string tile = e.Item != null ? e.Item.Text : "";

        if (tile == "Save")
        {
            await SaveCommercialDocument();
        }
        else if (tile == "Save and Confirm")
        {
            // Confirmar pedido
        }

        if (tile == "Print")
        {
            string name = "Purchases";
            if (isASale) name = "Sale";
            string skinImage = commercialDocument.Buyer != null && commercialDocument.Buyer.SkinImageName != null ? commercialDocument.Buyer.SkinImageName : "";
            Js.InvokeAsync<object>("open", $"{hostPrint}SaleReport/{name}?commercialDocumentId={commercialDocumentId}&skinImage={skinImage}", "_blank");
        }

        StateHasChanged();
    }

    private async Task SaveCommercialDocument()
    {
        try
        {
            LoadCommercialDocument();
            var result = await DocumentServices.SaveCommercialDocument(commercialDocument);
            if (result != null)
            {
                //alert("Saved", 0);
                commercialDocument = result;
                if (commercialDocument.Items == null) commercialDocument.Items = new();
                commercialDocument.Items = commercialDocument.Items;
            }
            else
            {
                alert("No saved", 1);
            }
        }
        catch (Exception ex)
        {
            alert(ex.Message);
        }
    }

    public void SelectItemCarrie(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.Carrier = carrierList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        SaveCommercialDocument();

    }

    public void SelectItemVendorWarehous(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {

        commercialDocument.VendorWarehouse = vendorWarehouseList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        SaveCommercialDocument();


    }

    public void SelectItemBuyerWarehous(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {

        commercialDocument.BuyerWarehouse = buyerWarehouseList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        SaveCommercialDocument();


    }

    public void SelectItemDeliveryAddress(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {

        commercialDocument.DeliveryAddress = addressList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        SaveCommercialDocument();

    }

    public void SelectItemSeasonc(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {

        commercialDocument.Season = seasonList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();

    }

    public void SelectItemBusinessLineDoc(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {

        commercialDocument.BusinessLineDoc = businessLineDocList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        SaveCommercialDocument();

    }

    public void SelectSeason(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {

        commercialDocument.Season = seasonList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        SaveCommercialDocument();

    }

    public void SelectItemDocumentType(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        if (!arg.Value.ToString().Equals("0"))
            commercialDocument.DocumentType = documentTypeList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        SaveCommercialDocument();
        StateHasChanged();
    }

    public string GetDeliveryAddress(Address address)
    {
        string _address = "";
        if (address != null)
        {
            _address = address.ZipCode;
            if (address.CityAddress != null && address.CityAddress.RegionCity != null && address.CityAddress.RegionCity.CountryRegion != null)
                _address += address.CityAddress.RegionCity.CountryRegion.Name;
        }
        return _address;
    }

    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();
        if (SearcherValue == "DocumentType")
        {
            documentTypeList = new();
            documentTypeList = await DocumentServices.GetCommercialDocumentsTypes(arg.value, isASale);
        }
        if (SearcherValue == "Vendor")
        {
            vendorList = new();
            vendorList = await DocumentServices.GetCommercialVendorList(arg.value, commercialDocument.DocumentType.IsASale);

        }
        if (SearcherValue == "SalesPerson")
        {
            salesPersonList = new();
            salesPersonList = await DocumentServices.GetCommercialSalesPersonList(arg.value);
        }
        if (SearcherValue == "Buyer")
        {
            buyerList = new();
            buyerList = await DocumentServices.GetCommercialBuyerList(arg.value, commercialDocument.DocumentType.IsASale, 0, 0, false);
        }

        if (SearcherValue == "Season")
        {

        }

        StateHasChanged();
    }

    public async void LoadBuyerAndVendor(string name)
    {

        if (commercialDocument.Buyer != null && name == "Buyer")
        {
            buyerWarehouseList = await DocumentServices.GetCommercialBuyerWarehouseList(commercialDocument.Buyer.Id);
            addressList = await DocumentServices.GetEntityDetailsAddressList(commercialDocument.Buyer.Id);
            await LoadBuyerItems();
        }
        if (commercialDocument.Vendor != null && name == "Vendor")
        {
            vendorWarehouseList = await DocumentServices.GetCommercialVendorWarehouseList(commercialDocument.Vendor.Id);
        }
        StateHasChanged();
    }

    public void EventIdSelectionAndId(CommercialDocumentType item)
    {
        commercialDocument.DocumentType = item;
    }

    public async void EventIdSelectionAndId(Concept item)
    {
        if (SearcherValue == "Vendor")
        {
            commercialDocument.Vendor = item;
            LoadBuyerAndVendor("Vendor");

        }
        if (SearcherValue == "SalesPerson")
        {
            commercialDocument.SalesPerson = item;
        }
        if (SearcherValue == "Buyer")
        {
            commercialDocument.Buyer = item;
            commercialDocument.DeliveryAddress = new Address();
            addressList = new List<Address>();
            LoadBuyerAndVendor("Buyer");
            await LoadBuyerItems();
        }
        await SaveCommercialDocument();
        LoadCommercialDocument();
        StateHasChanged();
    }

    public void EventIdSelectionAndId(SeasonBusiness item)
    {
        if (item != null)
        {
            commercialDocument.Season = item;
        }
    }

    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");
        CloseMenu(false);
    }

    public void alert(string _msg, int? status = 0)
    {
        viewMsg = true;
        msg = _msg;

        StateHasChanged();
    }

    public void alert(string _msg)
    {
        viewMsg = true;
        msg = _msg;

        StateHasChanged();
    }

    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/{backPage}/{page}/{paramFilter}");
        Navigation.NavigateTo($"/{backPage}/{page}");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }

    public void CloseMenu(bool mode)
    {
        menuVisible = mode;
        StateHasChanged();
    }

    public string Validate()
    {
        string msg = "";
        if (commercialDocument == null) msg = "required fields";
        if (commercialDocument.DocumentType == null || commercialDocument.DocumentType.Id == null) msg = "required fields DocumentType";
        if (commercialDocument.Vendor == null || commercialDocument.Vendor.Id == null) msg = "required fields Vendor";
        if (commercialDocument.Buyer == null || commercialDocument.Buyer.Id == null) msg = "required fields Buyer";
        if (commercialDocument.SalesPerson == null || commercialDocument.SalesPerson.Id == null) msg = "required fields Sales Person";
        if (commercialDocument.Season == null || commercialDocument.Season.Id == null) msg = "required fields Sales Person";
        if (commercialDocument.BusinessLineDoc == null || commercialDocument.BusinessLineDoc.Id == null) msg = "required fields Business LineDoc ";
        if (commercialDocument.BuyerWarehouse == null || commercialDocument.BuyerWarehouse.Id == null) msg = "required fields Buyer Warehouse";
        if (commercialDocument.DeliveryAddress == null || commercialDocument.DeliveryAddress.Id == null) msg = "required fields Delivery Address";
        if (commercialDocument.Carrier == null || commercialDocument.Carrier.Id == null) msg = "required fields Carrier";
        return msg;
    }



    #region Load

    public void LoadCommercialDocument()
    {
        if (commercialDocument == null) commercialDocument = new();
        if (commercialDocument.DocumentType == null) commercialDocument.DocumentType = new();
        if (commercialDocument.BusinessLineDoc == null) commercialDocument.BusinessLineDoc = new();
        if (commercialDocument.Vendor == null) commercialDocument.Vendor = new();
        if (commercialDocument.Buyer == null) commercialDocument.Buyer = new();
        if (commercialDocument.SalesPerson == null) commercialDocument.SalesPerson = new();
        if (commercialDocument.Carrier == null) commercialDocument.Carrier = new();
        if (commercialDocument.DeliveryAddress == null) commercialDocument.DeliveryAddress = new();
        if (commercialDocument.ShippingStatusDocument == null) commercialDocument.ShippingStatusDocument = new ShippingStatus

            {
                Name = "IN PROGRESS",
                Id = "000000000000000000000F51",
                AffectInventory = false,
                EditingAllowed = true

            };
        if (commercialDocument.FinanceStatusDocument == null) commercialDocument.FinanceStatusDocument = new FinanceStatus
            {
                Name = "IN PROGRESS",
                Id = "000000000000000000000F51",
                AffectFinance = false,
                EditingAllowed = true

            };
        if (commercialDocument.OriginDocument == null) commercialDocument.OriginDocument = new();
        if (commercialDocument.VendorWarehouse == null) commercialDocument.VendorWarehouse = new();
        if (commercialDocument.BuyerWarehouse == null) commercialDocument.BuyerWarehouse = new();
        if (commercialDocument.Season == null) commercialDocument.Season = new();
        if (commercialDocument.PrintingSatus == null) commercialDocument.PrintingSatus = new();
        if (commercialDocument.FinanceSummary == null) commercialDocument.FinanceSummary = new();
        if (commercialDocument.Items == null) commercialDocument.Items = new();
        if (commercialDocument.ShipDate == DateTime.MinValue) commercialDocument.ShipDate = DateTime.Today;
        if (commercialDocument.ArrivalDate == DateTime.MinValue) commercialDocument.ArrivalDate = DateTime.Today;
        if (commercialDocument.DeliveryDate == DateTime.MinValue) commercialDocument.DeliveryDate = DateTime.Today;

        if (businessLineDocList == null) businessLineDocList = new();
        if (documentTypeList == null) documentTypeList = new();
        if (salesPersonList == null) salesPersonList = new();
        if (vendorList == null) vendorList = new();
        if (carrierList == null) carrierList = new();
        if (buyerList == null) buyerList = new();
        if (seasonList == null) seasonList = new();
        if (originDocument == null) originDocument = new();
        if (vendorWarehouseList == null) vendorWarehouseList = new();
        if (buyerWarehouseList == null) buyerWarehouseList = new();
        if (addressList == null) addressList = new();


    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo($"{name}");
    }

    public void EventChange(string item)
    {
        string value = "";

        if (item == "FinanceSummary" && commercialDocument.FinanceSummary != null)
        {
            value = $@"Total, Amount, {commercialDocument.FinanceSummary.TotalAmount}.";
            value += $@"Total, Taxes, {commercialDocument.FinanceSummary.TotalTaxes}.";
            value += $@"Total, Discounts, {commercialDocument.FinanceSummary.TotalDiscounts}.";
            value += $@"Total, Costs, {commercialDocument.FinanceSummary.TotalCosts}.";
            textToSpeech.Speack(value);
        }
        else
        {
            textToSpeech.Speack("Valor nulo,");
        }
        StateHasChanged();
    }

    public void ValidateUri()
    {
        string Name = Navigation.Uri;
        if (Name.Contains("PurchasesItem") || Name.Contains("ProviderCreditsItem"))
        {
            isASale = false;
            if (Name.Contains("PurchasesItem"))
            {
                namePage = "Purchase";
                backPage = "Purchases";
                icoLogo = "PurchasesIco.png";
            };

            if (Name.Contains("ProviderCreditsItem"))
            {
                namePage = "Provider Credit";
                backPage = "ProviderCredits";
                icoLogo = "ProviderCredits.png";
            }
        }

        if (Name.Contains("SaleItem"))
        {
            isASale = true;
            if (Name.Contains("SaleItem"))
            {
                backPage = "SalesDocuments";
                namePage = "Sale";
                icoLogo = "commercialDocument.png";
            }
        }
        StateHasChanged();
    }

    public void Reload()
    {
        StateHasChanged();
    }

    private async void TimerDetail()
    {
        if (timerDetailStatus)
        {
            timerDetailStatus = false;
            await Task.Delay(TimeSpan.FromSeconds(1));
            var result = await GetLocalStorage();
            if (result != null && result != "false")
            {
                LoadDetail();
                StateHasChanged();
                await SaveTrimere();
            }
            timerDetailStatus = true;
            TimerDetail();
        }
    }



    public async void LoadDetail()
    {
        commercialDocument.Items = await DocumentServices.GetCommercialDocumentDetails(commercialDocumentId);
    }

    public async Task<string> GetLocalStorage()
    {
        try
        {
            return await Js.InvokeAsync<string>("localStorage.getItem", "timer");
        }
        catch
        {
            return null;
        }
    }

    public async Task SaveTrimere()
    {
        try
        {
            await Js.InvokeVoidAsync("localStorage.setItem", "timer", "false");
        }
        catch
        {
        }
    }

    public bool GetTypeStatus()
    {
        bool status = true;
        if (commercialDocument.DocumentType == null || commercialDocument.DocumentType.Id == null)
        {
            status = false;
        }
        return status;
    }

    public void EditActorMode(string id)
    {

        if (id != "") Js.InvokeAsync<object>("open", $"/Actors/{id}", "_blank");
        CloseMenu(false);
    }

    private void RedirectForAddAddress()
    {
        if (commercialDocument.Buyer.Id is not null)
        {
            Navigation.NavigateTo($"Actors/{commercialDocument.Buyer.Id}");
        }
        else
        {
            viewMsg = true;
            msg = "Select a Buyer first";
        }

    }

    private async Task LoadBuyerItems()
    {
        if (commercialDocument.Buyer != null && commercialDocument.Buyer.Id != null)
        {
            BuyerItems = await DocumentServices.GetCommercialProductList(commercialDocumentId, commercialDocument.Buyer.Id, "all", false);
        }
        isLoading = false;
        StateHasChanged();

    }

    private void ValidateDocumentNumber(FocusEventArgs e)
    {
        SaveCommercialDocument();
    }

    private void ValidatePO(FocusEventArgs e)
    {
        SaveCommercialDocument();
    }

    public void Change(ChangeEventArgs<bool?> args)
    {
        SaveCommercialDocument();
    }
}
