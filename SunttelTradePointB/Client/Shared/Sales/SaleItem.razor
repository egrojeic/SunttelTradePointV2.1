@page "/SaleItem"
@page "/SaleItem/{commercialDocumentId}"
@page "/SaleItem/{filter}/{commercialDocumentId}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject GeographicPlacesService geoPlaces

<MessageSaveComponent @ref="referAlert">
</MessageSaveComponent>
<PageTitleComponent Title=" Commercial Document"
                    Description="Here you can add commercial document" IconName="commercialDocument.png">
</PageTitleComponent>


<form>

    @if (page == "")
    {

    }

    @if (page == "")
    {

        <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
            <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>


        </div>
        <SliderScrollAuto summary="commercialDocument.FinanceSummary"></SliderScrollAuto>
        <div class="grid-columns-header grid-columns-6">

            <div class="item-1">
                <div><b class="c-red">*</b><label>@GetName("ShippingStatusDocument",new CommercialDocument())</label></div>
                <Status listStatus="shippingStatusDocumentTypeList" Name="ACTIVE"></Status>

                <div><b class="c-red">*</b><label>@GetName("FinanceStatusDocument",new CommercialDocument())</label></div>
                <Status listStatus="financeStatusDocumenTypeList" Name="DISABLE"></Status>

                <div><b class="c-red">*</b><label>@GetName("PrintingSatus",new CommercialDocument())</label></div>
                <StatusItem></StatusItem>
                <div class="item-check">
                    <div><b class="c-red">*</b><label>@GetName("MarkedForQCInspection",new CommercialDocument())</label></div>
                    <div>
                        <SfSwitch @bind-Checked="@commercialDocument.MarkedForQCInspection"></SfSwitch>
                    </div>
                    <div><b class="c-red">*</b><label>@GetName("ToInvoice",new CommercialDocument())</label></div>
                    <div>
                        <SfSwitch @bind-Checked="@commercialDocument.ToInvoice"></SfSwitch>
                    </div>
                </div>

            </div>
            <div><b class="c-red">*</b><label>@GetName("DocumentType",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="CommercialDocumentType"
                            Id="DocumentType"
                            caption="@(commercialDocument.DocumentType !=null ? commercialDocument.DocumentType?.Name:"" )"
                            Items="documentTypeList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">
            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("DocumentNumber",new CommercialDocument())</label></div>
            <InputTextDisable style="width:180px" Enable="@(commercialDocument.DocumentType !=null && commercialDocument.DocumentType.DocNumberAutogenerated !=null ? commercialDocument.DocumentType.DocNumberAutogenerated:false)"
                          TypeInt="true"
                          @bind-ValueInt="commercialDocument.DocumentNumber">
            </InputTextDisable>

            <div><b class="c-red">*</b><label>@GetName("PO",new CommercialDocument())</label></div>
            <InputTextDisable Enable="true" TypeInt="false" @bind-ValueString="commercialDocument.PO"></InputTextDisable>

            <div><b class="c-red">*</b><label>@GetName("ShipDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.ShipDate" class="form-control" /></div>

            <div><b class="c-red">*</b><label>@GetName("DeliveryDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.DeliveryDate" class="form-control" /></div>

            <div><b class="c-red">*</b><label>@GetName("ArrivalDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.ArrivalDate" class="form-control" /></div>

            <div><b class="c-red">*</b><label>@GetName("Vendor",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="Concept"
                            Id="Vendor"
                            caption="@(commercialDocument.Vendor !=null ? commercialDocument.Vendor?.Name:"" )"
                            Items="vendorList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">

            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("Buyer",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="Concept"
                            Id="Buyer"
                            caption="@(commercialDocument.Buyer !=null ? commercialDocument.Buyer?.Name:"" )"
                            Items="buyerList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">

            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("SalesPerson",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="Concept"
                            Id="SalesPerson"
                            caption="@(commercialDocument.SalesPerson !=null ? commercialDocument.SalesPerson?.Name:"" )"
                            Items="salesPersonList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId"
            >
            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("DeliveryAddress",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemDeliveryAddress" class="select-style">
                    @if (commercialDocument.DeliveryAddress != null)
                    {
                        <option value="@commercialDocument.DeliveryAddress" selected>@commercialDocument.DeliveryAddress.Name</option>
                    }
                    @if (buyerWarehouseList != null && buyerWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in addressList)
                    {
                        <option value="@item">@item.Name</option>
                    }
                </select>
            </div>


            <div><b class="c-red">*</b><label>@GetName("Season",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="SeasonBusiness"
                            Id="Season"
                            caption="@(commercialDocument.Season !=null ? commercialDocument.Season?.Name:"" )"
                            Items="seasonList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">
            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("Carrier",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style">
                    @if (commercialDocument.Carrier != null)
                    {
                        <option value="@commercialDocument.Carrier" selected>@commercialDocument.Carrier.Name</option>
                    }
                    @if (carrierList != null && carrierList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in carrierList)
                    {
                        <option value="@item">@item.Name</option>
                    }
                </select>
            </div>

            <div><b class="c-red">*</b><label>@GetName("TrackingNumber",new CommercialDocument())</label></div>
            <InputTextDisable Enable="true" TypeInt="false" @bind-ValueString="commercialDocument.TrackingNumber"></InputTextDisable>

            <div><b class="c-red">*</b><label>@GetName("VendorWarehouse",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style">
                    @if (commercialDocument.VendorWarehouse != null)
                    {
                        <option value="@commercialDocument.VendorWarehouse" selected>@commercialDocument.VendorWarehouse.Name</option>
                    }
                    @if (vendorWarehouseList != null && vendorWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in vendorWarehouseList)
                    {
                        <option value="@item">@item.Name</option>
                    }
                </select>
            </div>

            <div><b class="c-red">*</b><label>@GetName("BuyerWarehouse",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style">
                    @if (commercialDocument.BuyerWarehouse != null)
                    {
                        <option value="@commercialDocument.BuyerWarehouse" selected>@commercialDocument.BuyerWarehouse.Name</option>
                    }
                    @if (buyerWarehouseList != null && buyerWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in buyerWarehouseList)
                    {
                        <option value="@item">@item.Name</option>
                    }
                </select>
            </div>

            <div><b class="c-red">*</b><label>@GetName("BusinessLineDoc",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemBusinessLineDoc" class="select-style">
                    @if (commercialDocument.BusinessLineDoc != null)
                    {
                        <option value="@commercialDocument.DeliveryAddress" selected>@commercialDocument.BusinessLineDoc.Name</option>
                    }
                    @if (buyerWarehouseList != null && buyerWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in businessLineDocList)
                    {
                        <option value="@item">@item.Name</option>
                    }
                </select>
            </div>




        </div>

        <hr />

        <SfTab Height="250px" CssClass="tab-adaptive" HeaderPlacement="HeaderPosition.Left">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("SpecsNotes",new CommercialDocument())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div>
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName("SpecsNotes",new CommercialDocument())</h3>
                            </div>
                            <textarea @bind="commercialDocument.SpecsNotes" class="textarea-control"></textarea>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("Items",new CommercialDocument())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="flex-horizontal-center ">
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName("Items",new CommercialDocument())</h3>
                                <svg @onclick='()=>NavigationTo($"/CharacteristicCard")' title="Add new tag" style="margin-left:20px;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                            @if (isLoading)
                            {

                                <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

                            }
                            else
                            {
                                @if (commercialDocument.Items != null)
                                {
                                    <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@commercialDocument.Items"
                                        TItem="SalesDocumentItemsDetails"
                                        ColumnWidth="300px"
                                        PageNumbersCount="100"
                                        PageSize="20">

                                        <Columns>
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="DocumentPrinted" Title="@GetName("DocumentPrinted", new SalesDocumentItemsDetails())" Width="80px">
                                                <Template>
                                                    bool value = (bool)context.GetType().GetProperty("DocumentPrinted").GetValue(context);
                                                    <input type="checkbox" checked="value" disabled />
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="BillOfLandingPrinted" Title="@GetName("BillOfLandingPrinted", new SalesDocumentItemsDetails())" Width="80px">
                                                <Template>
                                                    bool value = (bool)context.GetType().GetProperty("BillOfLandingPrinted").GetValue(context);
                                                    <input type="checkbox" checked="value" disabled />
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PickingTicketPrinted" Title="@GetName("PickingTicketPrinted", new SalesDocumentItemsDetails())" Width="80px">
                                                <Template>
                                                    bool value = (bool)context.GetType().GetProperty("PickingTicketPrinted").GetValue(context);
                                                    <input type="checkbox" checked="value" disabled />
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="LabelsPrinted" Title="@GetName("LabelsPrinted", new SalesDocumentItemsDetails())" Width="80px">
                                                <Template>
                                                    bool value = (bool)context.GetType().GetProperty("LabelsPrinted").GetValue(context);
                                                    <input type="checkbox" checked="value" disabled />
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="SelectedToPrint" Title="@GetName("SelectedToPrint", new SalesDocumentItemsDetails())" Width="80px">
                                                <Template>
                                                    bool value = (bool)context.GetType().GetProperty("SelectedToPrint").GetValue(context);
                                                    <input type="checkbox" checked="value" disabled />
                                                </Template>
                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                }
                            }

                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    }

</form>




@code {
    [Parameter]
    public string commercialDocumentId { get; set; }
    [Parameter]
    public string filter { get; set; }

    string page = "";
    string SearcherValue = "";

    public CommercialDocument commercialDocument = new();
    public SalesDocumentItemsDetails items = new();

    #region Status
    public List<(string, string)> shippingStatusDocumentTypeList = new List<(string, string)>{
   ("ACTIVE", "#61c100"),  ("DISABLE", "#5d5d5d") };
    public List<(string, string)> financeStatusDocumenTypeList = new List<(string, string)>{
   ("ACTIVE", "#61c100"),  ("DISABLE", "#5d5d5d") };


    public List<ShippingStatus> shippingStatusDocumentList = new();
    public List<FinanceStatus> financeStatusDocumentList = new();
    #endregion Status

    #region Input3
    public List<CommercialDocumentType> documentTypeList = new();
    public List<BusinessLine> businessLineDocList = new();
    public List<Concept> salesPersonList = new();
    public List<Concept> vendorList = new();
    public List<Concept> carrierList = new();
    public List<Concept> buyerList = new();
    public List<SeasonBusiness> seasonList = new();
    public List<CommercialDocument> originDocument = new();
    public List<BasicConcept> vendorWarehouseList = new();
    public List<BasicConcept> buyerWarehouseList = new();
    public List<Address> addressList = new();

    #endregion Input3


    MessageSaveComponent? referAlert;
    string msg = "";
    bool isLoading = false;

    protected override void OnParametersSet()
    {
        var r = page;
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
      
        isLoading = true;       
        StateHasChanged();
        if (commercialDocumentId != null)
        {
            commercialDocument = await DocumentServices.GetItemCommercialDocumentById(commercialDocumentId);
        }

        LoadCommercialDocument();       
        isLoading = false;
        StateHasChanged();
    }


    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {
            commercialDocument.DeliveryAddress = geoPlaces.address;


        }


        StateHasChanged();

    }


    public void SelectItemVendorWarehous(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {

    }

    public void SelectItemDeliveryAddress(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {


    }

    public void SelectItemBusinessLineDoc(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {


    }


    public string GetDeliveryAddress(Address address)
    {
        string _address = "";
        if (address != null)
        {
            _address = address.ZipCode;
            if (address.CityAddress != null && address.CityAddress.RegionCity != null && address.CityAddress.RegionCity.CountryRegion != null)
                _address += address.CityAddress.RegionCity.CountryRegion.Name;
        }
        return _address;
    }


    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.value.ToString();
        if (SearcherValue == "DocumentType")
        {
            documentTypeList = await DocumentServices.GetCommercialDocumentsTypes(commercialDocumentId);
        }
        if (SearcherValue == "Vendor")
        {
            vendorList = new List<Concept>();
        }
        if (SearcherValue == "SalesPerson")
        {
            salesPersonList = new List<Concept>();
        }
        if (SearcherValue == "Buyer")
        {
            buyerList = new List<Concept>();
        }
        if (SearcherValue == "Season")
        {
            seasonList = new List<SeasonBusiness>();
        }


    }


    public void EventIdSelectionAndId(CommercialDocumentType item)
    {
        commercialDocument.DocumentType = item;
    }

    public void EventIdSelectionAndId(Concept item)
    {
        if (SearcherValue == "Vendor")
        {
            commercialDocument.Vendor = item;
        }
        if (SearcherValue == "SalesPerson")
        {
            commercialDocument.SalesPerson = item;
        }
        if (SearcherValue == "Buyer")
        {
            commercialDocument.Buyer = item;
        }       
    }

    public void EventIdSelectionAndId(SeasonBusiness item)
    {
        commercialDocument.Season = item;
    }

    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/SalesDocuments/{paramFilter}");
        Navigation.NavigateTo($"/SalesDocuments");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }


    #region Load

    public void LoadCommercialDocument()
    {
        if (commercialDocument == null) commercialDocument = new();
        if (commercialDocument.DocumentType == null) commercialDocument.DocumentType = new();
        if (commercialDocument.BusinessLineDoc == null) commercialDocument.BusinessLineDoc = new();
        if (commercialDocument.Vendor == null) commercialDocument.Vendor = new();
        if (commercialDocument.Buyer == null) commercialDocument.Buyer = new();
        if (commercialDocument.SalesPerson == null) commercialDocument.SalesPerson = new();
        if (commercialDocument.Carrier == null) commercialDocument.Carrier = new();
        if (commercialDocument.DeliveryAddress == null) commercialDocument.DeliveryAddress = new();
        if (commercialDocument.ShippingStatusDocument == null) commercialDocument.ShippingStatusDocument = new();
        if (commercialDocument.FinanceStatusDocument == null) commercialDocument.FinanceStatusDocument = new();
        if (commercialDocument.OriginDocument == null) commercialDocument.OriginDocument = new();
        if (commercialDocument.VendorWarehouse == null) commercialDocument.VendorWarehouse = new();
        if (commercialDocument.BuyerWarehouse == null) commercialDocument.BuyerWarehouse = new();
        if (commercialDocument.Season == null) commercialDocument.Season = new();
        if (commercialDocument.PrintingSatus == null) commercialDocument.PrintingSatus = new();
        if (commercialDocument.FinanceSummary == null) commercialDocument.FinanceSummary = new();
        if (commercialDocument.Items == null) commercialDocument.Items = new();

        #region SalesDocumentItemsDetails
        if (items.TransactionalItem == null) items.TransactionalItem = new();
        if (items.TransactionalItemSpecs == null) items.TransactionalItemSpecs = new();
        if (items.Provider == null) items.Provider = new();
        if (items.CancelationInfo == null) items.CancelationInfo = new();

        #endregion SalesDocumentItemsDetails
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
