@page "/SaleItem"
@page "/SaleItem/{commercialDocumentId}"
@page "/SaleItem/{filter}/{commercialDocumentId}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.IA DocumentServices
@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeServive
@inject IJSRuntime Js

<MessageSaveComponent @ref="referAlert">
</MessageSaveComponent>
<PageTitleComponent Title=" Commercial Document"
                    Description="Here you can add commercial document" IconName="commercialDocument.png">
</PageTitleComponent>


<form>

    @if (page == "")
    {

    }

    @if (page == "")
    {

        <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
            <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>


        </div>

       
        <SliderScrollAuto summary="commercialDocument.FinanceSummary"></SliderScrollAuto>
        <TextToSpeech @ref="textToSpeech" Id="FinanceSummary" EventChange="EventChange" Class="speack">
        </TextToSpeech>
        <div class="grid-columns-header grid-columns-6">

            <div class="item-1">
                <div><b class="c-red">*</b><label>@GetName("ShippingStatusDocument",new CommercialDocument())</label></div>
                <Status listStatus="shippingStatusDocumentTypeList" Name="ACTIVE"></Status>

                <div><b class="c-red">*</b><label>@GetName("FinanceStatusDocument",new CommercialDocument())</label></div>
                <Status listStatus="financeStatusDocumenTypeList" Name="DISABLE"></Status>

                <div><b class="c-red">*</b><label>@GetName("PrintingSatus",new CommercialDocument())</label></div>
                <StatusItem></StatusItem>
                <div class="item-check">
                    <div><b class="c-red">*</b><label>@GetName("MarkedForQCInspection",new CommercialDocument())</label></div>
                    <div>
                        <SfSwitch @bind-Checked="@commercialDocument.MarkedForQCInspection"></SfSwitch>
                    </div>
                    <div><b class="c-red">*</b><label>@GetName("ToInvoice",new CommercialDocument())</label></div>
                    <div>
                        <SfSwitch @bind-Checked="@commercialDocument.ToInvoice"></SfSwitch>
                    </div>
                </div>

            </div>
            <div><b class="c-red">*</b><label>@GetName("DocumentType",new CommercialDocument())</label></div>

            <div>
                <select @onchange="SelectItemDocumentType" class="select-style">
                    @if (commercialDocument.DocumentType != null)
                    {
                        <option value="@commercialDocument.DocumentType.Id" selected>@commercialDocument.DocumentType.Name</option>
                    }
                    @if (documentTypeList != null && documentTypeList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @if (documentTypeList != null)
                    {
                        @foreach (var item in documentTypeList)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                </select>
            </div>



            <div><b class="c-red">*</b><label>@GetName("DocumentNumber",new CommercialDocument())</label></div>
            <InputTextDisable style="width:180px" Enable="@(commercialDocument.DocumentType !=null && commercialDocument.DocumentType.DocNumberAutogenerated !=null ? commercialDocument.DocumentType.DocNumberAutogenerated:false)"
                          TypeInt="true"
                          @bind-ValueInt="commercialDocument.DocumentNumber">
            </InputTextDisable>

            <div><b class="c-red">*</b><label>@GetName("PO",new CommercialDocument())</label></div>
            <InputTextDisable Enable="true" TypeInt="false" @bind-ValueString="commercialDocument.PO"></InputTextDisable>

            <div><b class="c-red">*</b><label>@GetName("ShipDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.ShipDate" class="form-control" /></div>

            <div><b class="c-red">*</b><label>@GetName("DeliveryDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.DeliveryDate" class="form-control" /></div>

            <div><b class="c-red">*</b><label>@GetName("ArrivalDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.ArrivalDate" class="form-control" /></div>

            <div><b class="c-red">*</b><label>@GetName("Vendor",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="Concept"
                            Id="Vendor"
                            caption="@(commercialDocument.Vendor !=null ? commercialDocument.Vendor?.Name:"" )"
                            Items="vendorList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">

            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("Buyer",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="Concept"
                            Id="Buyer"
                            caption="@(commercialDocument.Buyer !=null ? commercialDocument.Buyer?.Name:"" )"
                            Items="buyerList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">

            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("SalesPerson",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="Concept"
                            Id="SalesPerson"
                            caption="@(commercialDocument.SalesPerson !=null ? commercialDocument.SalesPerson?.Name:"" )"
                            Items="salesPersonList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">
            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("DeliveryAddress",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemDeliveryAddress" class="select-style">
                    @if (commercialDocument.DeliveryAddress != null)
                    {
                        <option value="@commercialDocument.DeliveryAddress.Id" selected>@commercialDocument.DeliveryAddress.Name</option>
                    }
                    @if (buyerWarehouseList != null && buyerWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in addressList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>


            <div><b class="c-red">*</b><label>@GetName("Season",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" TItem="SeasonBusiness"
                            Id="Season"
                            caption="@(commercialDocument.Season !=null ? commercialDocument.Season?.Name:"" )"
                            Items="seasonList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">
            </InputTextSelector3>

            <div><b class="c-red">*</b><label>@GetName("Carrier",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style">
                    @if (commercialDocument.Carrier != null)
                    {
                        <option value="@commercialDocument.Carrier.Id" selected>@commercialDocument.Carrier.Name</option>
                    }
                    @if (carrierList != null && carrierList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in carrierList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>

            <div><b class="c-red">*</b><label>@GetName("TrackingNumber",new CommercialDocument())</label></div>
            <InputTextDisable Enable="true" TypeInt="false" @bind-ValueString="commercialDocument.TrackingNumber"></InputTextDisable>

            <div><b class="c-red">*</b><label>@GetName("VendorWarehouse",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style">
                    @if (commercialDocument.VendorWarehouse != null)
                    {
                        <option value="@commercialDocument.VendorWarehouse.Id" selected>@commercialDocument.VendorWarehouse.Name</option>
                    }
                    @if (vendorWarehouseList != null && vendorWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in vendorWarehouseList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>

            <div><b class="c-red">*</b><label>@GetName("BuyerWarehouse",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style">
                    @if (commercialDocument.BuyerWarehouse != null)
                    {
                        <option value="@commercialDocument.BuyerWarehouse" selected>@commercialDocument.BuyerWarehouse.Name</option>
                    }
                    @if (buyerWarehouseList != null && buyerWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in buyerWarehouseList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>

            <div><b class="c-red">*</b><label>@GetName("BusinessLineDoc",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemBusinessLineDoc" class="select-style">
                    @if (commercialDocument.BusinessLineDoc != null)
                    {
                        <option value="@commercialDocument.BusinessLineDoc.Id" selected>@commercialDocument.BusinessLineDoc.Name</option>
                    }
                    @if (buyerWarehouseList != null && buyerWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in businessLineDocList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>




        </div>

        <hr />

        <SfTab Height="250px" CssClass="tab-adaptive" HeaderPlacement="HeaderPosition.Left">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("SpecsNotes",new CommercialDocument())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div>
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName("SpecsNotes",new CommercialDocument())</h3>
                            </div>
                            <textarea @bind="commercialDocument.SpecsNotes" class="textarea-control"></textarea>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("Items",new CommercialDocument())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="flex-horizontal-center ">
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName("Items",new CommercialDocument())</h3>
                                <img @onclick="()=>CloseMenu(true)" class="img-menu" src="/images/menu.png">
                                <div class="menu-item" style="display:@(menuVisible?"flex":"none");">
                                    <button type="button" class="exit-btn" @onclick="()=>CloseMenu(false)">
                                        <i class="fa-regular fa-circle-xmark"></i>
                                    </button>
                                    <div class="item">
                                        <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromProductList")'>
                                            <i class="fa-sharp fa-solid fa-circle-plus"></i>
                                        </button>
                                        <b @onclick='()=>EventIdSelectionMenuItem("SalesDocumentItems")' class="subTitleDetailForm">From product list</b>
                                    </div>
                                    <div class="item">
                                        <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromInventroy")'>
                                            <i class="fa-sharp fa-solid fa-circle-plus"></i>
                                        </button>
                                        <b @onclick='()=>EventIdSelectionMenuItem("inventory")' class="subTitleDetailForm">From Inventroy</b>
                                    </div>
                                    <div class="item">
                                        <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromProductionOrder")'>
                                            <i class="fa-sharp fa-solid fa-circle-plus"></i>
                                        </button>
                                        <b @onclick='()=>EventIdSelectionMenuItem("Product")' class="subTitleDetailForm">From Production Order </b>
                                    </div>
                                </div>

                            </div>

                            @if (isLoading)
                            {

                                <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

                            }
                            else
                            {
                                @if (commercialDocument.Items != null)
                                {
                                    <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@commercialDocument.Items"
                                        TItem="SalesDocumentItemsDetails"
                                        ColumnWidth="300px"
                                        PageNumbersCount="100"
                                        PageSize="20">

                                        <Columns>
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.Name" Title="@GetName("TransactionalItem", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.ProductPackingSpecs.Code" Title="@GetName("TransactionalItemSpecs", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="IdCommercialDocument" Title="@GetName("IdCommercialDocument", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Qty" Title="@GetName("Qty", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableQty" Title="@GetName("ChargeableQty", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableUnitsName" Title="@GetName("ChargeableUnitsName", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitPrice" Title="@GetName("UnitPrice", new SalesDocumentItemsDetails())" Width="120px">

                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxableUnitPrice" Title="@GetName("TaxableUnitPrice", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitCost" Title="@GetName("UnitCost", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxRate" Title="@GetName("TaxRate", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxValue" Title="@GetName("TaxValue", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Total" Title="@GetName("Total", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PurchaseSpecs" Title="@GetName("PurchaseSpecs", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Provider" Title="@GetName("Provider", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="OriginalPrice" Title="@GetName("OriginalPrice", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ScannedBoxes" Title="@GetName("ScannedBoxes", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ProcurementPtje" Title="@GetName("ProcurementPtje", new SalesDocumentItemsDetails())" Width="120px">
                                                <Template>
                                                    @{
                                                        var MarkedForQCInspection = context.GetType().GetProperty(nameof(CommercialDocument.MarkedForQCInspection))?.GetValue(context);

                                                        <input type="checkbox" checked="@(MarkedForQCInspection!=null? (bool)MarkedForQCInspection:false)" disabled />
                                                    }
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PullDate" Title="@GetName("PullDate", new SalesDocumentItemsDetails())" Width="120px" />
                                            <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="FormatedPullDate" Title="@GetName("FormatedPullDate", new SalesDocumentItemsDetails())" Width="120px" />

                                        </Columns>
                                    </RadzenDataGrid>
                                }
                            }

                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    }

</form>




@code {
    [Parameter]
    public string commercialDocumentId { get; set; }
    [Parameter]
    public string filter { get; set; }

    TextToSpeech textToSpeech;

    string page = "";
    string SearcherValue = "";
    bool menuVisible = false;

    public CommercialDocument commercialDocument = new();
    public SalesDocumentItemsDetails items = new();

    #region Status




    public List<(string, string)> shippingStatusDocumentTypeList = new List<(string, string)>{
   ("ACTIVE", "#61c100"),  ("DISABLE", "#5d5d5d") };
    public List<(string, string)> financeStatusDocumenTypeList = new List<(string, string)>{
   ("ACTIVE", "#61c100"),  ("DISABLE", "#5d5d5d") };


    public List<ShippingStatus> shippingStatusDocumentList = new();
    public List<FinanceStatus> financeStatusDocumentList = new();
    #endregion Status

    #region Input3
    public List<CommercialDocumentType> documentTypeList = new();
    public List<BusinessLine> businessLineDocList = new();
    public List<Concept> salesPersonList = new();
    public List<Concept> vendorList = new();
    public List<Concept> carrierList = new();
    public List<Concept> buyerList = new();
    public List<SeasonBusiness> seasonList = new();
    public List<CommercialDocument> originDocument = new();
    public List<BasicConcept> vendorWarehouseList = new();
    public List<BasicConcept> buyerWarehouseList = new();
    public List<Address> addressList = new();

    #endregion Input3


    MessageSaveComponent? referAlert;
    string msg = "";
    bool isLoading = false;

    protected override void OnParametersSet()
    {
        var r = page;
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {

        isLoading = true;
        StateHasChanged();
        if (commercialDocumentId != null)
        {
            commercialDocument = await DocumentServices.GetItemCommercialDocumentById(commercialDocumentId);

        }

        commercialDocument.FinanceSummary = new FinanceSalesDocumentSummary
            {
                TotalAmount = 2000,
                TotalDiscounts = 1,
                TotalTaxes = 2000,
                TotalCosts = 2000
            };


        LoadCommercialDocument();

        documentTypeList = await DocumentServices.GetCommercialDocumentTypes();
        businessLineDocList = await DocumentServices.GetCommercialBusinessLines();
        addressList = await DocumentServices.GetEntityDetailsAddressList(UIClientGlobalVariables.EntityUserId);
        vendorWarehouseList = await DocumentServices.GetCommercialVendorWarehouseList();
        buyerWarehouseList = await DocumentServices.GetCommercialBuyerWarehouseList();
        carrierList = await DocumentServices.GetCarrierList();
        LoadCommercialDocument();
        isLoading = false;
        StateHasChanged();
    }



    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {
            LoadCommercialDocument();
            commercialDocument.DeliveryAddress = geoPlaces.address;
            var result = await DocumentServices.SaveCommercialDocument(commercialDocument);
            if (result != null)
            {
                alert("", 0);
            }

        }

        StateHasChanged();

    }


    public void SelectItemVendorWarehous(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.VendorWarehouse = vendorWarehouseList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }

    public void SelectItemDeliveryAddress(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.DeliveryAddress = addressList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();

    }

    public void SelectItemBusinessLineDoc(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.BusinessLineDoc = businessLineDocList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();

    }

    public void SelectItemDocumentType(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.DocumentType = documentTypeList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }


    public string GetDeliveryAddress(Address address)
    {
        string _address = "";
        if (address != null)
        {
            _address = address.ZipCode;
            if (address.CityAddress != null && address.CityAddress.RegionCity != null && address.CityAddress.RegionCity.CountryRegion != null)
                _address += address.CityAddress.RegionCity.CountryRegion.Name;
        }
        return _address;
    }


    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();
        if (SearcherValue == "DocumentType")
        {
            documentTypeList = await DocumentServices.GetCommercialDocumentsTypes(arg.value);
        }
        if (SearcherValue == "Vendor")
        {
            vendorList = await DocumentServices.GetCommercialVendorList(arg.value, commercialDocument.DocumentType.IsASale);
        }
        if (SearcherValue == "SalesPerson")
        {
            salesPersonList = await DocumentServices.GetCommercialSalesPersonList(arg.value);
        }
        if (SearcherValue == "Buyer")
        {
            buyerList = await DocumentServices.GetCommercialBuyerList(arg.value, commercialDocument.DocumentType.IsASale);
        }
        if (SearcherValue == "Season")
        {
            seasonList = await DocumentServices.GetCommercialSeasonList(arg.value);
        }

        StateHasChanged();
    }


    public void EventIdSelectionAndId(CommercialDocumentType item)
    {
        commercialDocument.DocumentType = item;
    }

    public void EventIdSelectionAndId(Concept item)
    {
        if (SearcherValue == "Vendor")
        {
            commercialDocument.Vendor = item;
        }
        if (SearcherValue == "SalesPerson")
        {
            commercialDocument.SalesPerson = item;
        }
        if (SearcherValue == "Buyer")
        {
            commercialDocument.Buyer = item;
        }
    }

    public void EventIdSelectionAndId(SeasonBusiness item)
    {
        if (item != null)
        {
            commercialDocument.Season = item;
        }
    }


    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");
        CloseMenu(false);
    }




    public void alert(string msg, int status)
    {
        referAlert.isVisible = true;
        referAlert.message = msg;
        referAlert.status = status;
    }

    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/SalesDocuments/{paramFilter}");
        Navigation.NavigateTo($"/SalesDocuments");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }

    public void CloseMenu(bool mode)
    {
        menuVisible = mode;
        StateHasChanged();
    }


    #region Load

    public void LoadCommercialDocument()
    {
        if (commercialDocument == null) commercialDocument = new();
        if (commercialDocument.DocumentType == null) commercialDocument.DocumentType = new();
        if (commercialDocument.BusinessLineDoc == null) commercialDocument.BusinessLineDoc = new();
        if (commercialDocument.Vendor == null) commercialDocument.Vendor = new();
        if (commercialDocument.Buyer == null) commercialDocument.Buyer = new();
        if (commercialDocument.SalesPerson == null) commercialDocument.SalesPerson = new();
        if (commercialDocument.Carrier == null) commercialDocument.Carrier = new();
        if (commercialDocument.DeliveryAddress == null) commercialDocument.DeliveryAddress = new();
        if (commercialDocument.ShippingStatusDocument == null) commercialDocument.ShippingStatusDocument = new();
        if (commercialDocument.FinanceStatusDocument == null) commercialDocument.FinanceStatusDocument = new();
        if (commercialDocument.OriginDocument == null) commercialDocument.OriginDocument = new();
        if (commercialDocument.VendorWarehouse == null) commercialDocument.VendorWarehouse = new();
        if (commercialDocument.BuyerWarehouse == null) commercialDocument.BuyerWarehouse = new();
        if (commercialDocument.Season == null) commercialDocument.Season = new();
        if (commercialDocument.PrintingSatus == null) commercialDocument.PrintingSatus = new();
        if (commercialDocument.FinanceSummary == null) commercialDocument.FinanceSummary = new();
        if (commercialDocument.Items == null) commercialDocument.Items = new();

        #region SalesDocumentItemsDetails
        if (items.TransactionalItem == null) items.TransactionalItem = new();
        if (items.TransactionalItemSpecs == null) items.TransactionalItemSpecs = new();
        if (items.Provider == null) items.Provider = new();
        if (items.CancelationInfo == null) items.CancelationInfo = new();

        #endregion SalesDocumentItemsDetails

        if (businessLineDocList == null) businessLineDocList = new();
        if (documentTypeList == null) documentTypeList = new();
        if (salesPersonList == null) salesPersonList = new();
        if (vendorList == null) vendorList = new();
        if (carrierList == null) carrierList = new();
        if (buyerList == null) buyerList = new();
        if (seasonList == null) seasonList = new();
        if (originDocument == null) originDocument = new();
        if (vendorWarehouseList == null) vendorWarehouseList = new();
        if (buyerWarehouseList == null) buyerWarehouseList = new();
        if (addressList == null) addressList = new();


    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }
    public void EventChange(string item)
    {
        string value = "";
      
        if (item == "FinanceSummary" && commercialDocument.FinanceSummary != null)
        {
            value = $@"Total, Amount, {commercialDocument.FinanceSummary.TotalAmount}.";
            value += $@"Total, Taxes, {commercialDocument.FinanceSummary.TotalTaxes}.";
            value += $@"Total, Discounts, {commercialDocument.FinanceSummary.TotalDiscounts}.";
            value += $@"Total, Costs, {commercialDocument.FinanceSummary.TotalCosts}.";
            textToSpeech.Speack(value);
        }else{
         textToSpeech.Speack("Valor nulo,");
        }
        StateHasChanged();
    }
}
