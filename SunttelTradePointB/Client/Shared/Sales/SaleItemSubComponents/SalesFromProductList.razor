@page "/SalesFromProductList"
@page "/SalesFromProductList/{commercialDocumentId}/{BuyerId}"
@page "/SalesFromProductList/{commercialDocumentId}/{idItem}/{BuyerId}"

@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Client.Services.SalesServices
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject IJSRuntime Js
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactItemsService;
@inject NavigationManager Navigation

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
    
</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>



<PageTitleComponent Title="At item" IconName="commercialActivities.png"
                    Description="With this tool you can create and edit item Sales">
</PageTitleComponent>

<div class="panelMenuContainer">
    <button type="button" @onclick='()=>SetNavigateTo($"SaleItem/1/{commercialDocumentId}")' class="general-menu-button"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i> </button>

    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
    @if (subTotal > 0)
    {
        <h5 style="color:white;">@($"Sub total " + subTotal.ToString("N2"))</h5>
    }
</div>

<div class="tableContainer" @onkeypress="OnKeyDown">

    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Sales From Produc Items"></WaitingProcessIndicator>

    }
    else
    {
        @if (items != null)
        {
            <RadzenDataGrid @ref="GridItem" AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@items"
                    TItem="SalesDocumentItemsDetails"
                    ColumnWidth="300px"
                    PageNumbersCount="100"
                    PageSize="50"
                    CellContextMenu="@ShowContextMenuWithContent"
                    AllowRowSelectOnRowClick="true"
                    CellDoubleClick="OnCellDoubleClick">
                <Columns>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Width="50px" Title="@("")" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Frozen="true" >
                        <Template Context="data">
                            @if (detailItemTem != null && data.Id == detailItemTem.Id )
                            {
                                <div class="control-btn">
                                    <button @onclick='()=>SaveEdit(data)'><span class="e-menu-icon fa-solid fa-floppy-disk"></span></button>
                                    <button class="cancel" @onclick='()=>CancelEdit(data)'><i class="bi bi-x-circle-fill"></i></button>
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.Name" Title="@GetName("TransactionalItem", new SalesDocumentItemsDetails())" Width="250px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Qty" Title="@GetName("Qty", new SalesDocumentItemsDetails())" Filterable="false" Sortable=false Width="80px">
                        <EditTemplate Context="itemEdit">
                            <RadzenNumeric @bind-Value="itemEdit.Qty" type="text" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitPrice" Title="@GetName("UnitPrice", new SalesDocumentItemsDetails())" FormatString="{0:N2}" Filterable="false" Width="120px">
                        <EditTemplate Context="itemEdit">
                            <RadzenNumeric @bind-Value="itemEdit.UnitPrice" type="text" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableQty" Title="@GetName("ChargeableQty", new SalesDocumentItemsDetails())" Filterable="false" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableUnits.Name" Title="@GetName("ChargeableUnits", new SalesDocumentItemsDetails())" Filterable="false" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxableUnitPrice" Title="@GetName("TaxableUnitPrice", new SalesDocumentItemsDetails())" FormatString="{0:N2}" Filterable="false" Width="120px">
                        <EditTemplate Context="itemEdit">
                            <RadzenNumeric @bind-Value="itemEdit.UnitPrice" Disabled />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitCost" Title="@GetName("UnitCost", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxRate" Title="@GetName("TaxRate", new SalesDocumentItemsDetails())" Filterable="false" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxValue" Title="@GetName("TaxValue", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="100px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Total" Title="@GetName("Total", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PurchaseSpecs" Title="@GetName("PurchaseSpecs", new SalesDocumentItemsDetails())" Filterable="false" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Provider" Title="@GetName("Provider", new SalesDocumentItemsDetails())" Filterable="false" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="OriginalPrice" Title="@GetName("OriginalPrice", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ProcurementPtje" Title="@GetName("ProcurementPtje", new SalesDocumentItemsDetails())" TextAlign="TextAlign.Right" Width="100px">
                        <Template>
                            @{
                                var MarkedForQCInspection = context.GetType().GetProperty(nameof(SalesDocumentItemsDetails.ProcurementPtje))?.GetValue(context);
                                <input type="checkbox" checked="@(MarkedForQCInspection!=null? (bool)MarkedForQCInspection:false)" disabled />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PullDate" Title="@GetName("PullDate", new SalesDocumentItemsDetails())" FormatString="{0:yyyy-MM-dd}" Filterable="false" Width="100px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="FormatedPullDate" Title="@GetName("FormatedPullDate", new SalesDocumentItemsDetails())" FormatString="{0:yyyy-MM-dd}" Filterable="false" Width="100px" />
                   

                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @($"Records: {items.Count}")
                    </label>
                </div>

            </div>
        }
    }

</div>


@code {
    [Parameter]
    public string _filterItems { get; set; }
    [Parameter]
    public string commercialDocumentId { get; set; }
    [Parameter]
    public string idItem { get; set; }
    [Parameter]
    public string BuyerId { get; set; }
    public double subTotal { get; set; }

    public List<SalesDocumentItemsDetails> items { get; set; } = new();
    SaleItem sale = new SaleItem();
    SalesDocumentItemsDetails detailItemTem = new();
    RadzenDataGrid<SalesDocumentItemsDetails> GridItem;
    public SalesDocumentItemsDetails Item { get; set; } = new();
    bool isLoading = false;
    string EditId = "";
    string IdDelete = "";
    bool viewMsg = false;
    string msg = "";
    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected override void OnInitialized()
    {
        if (commercialDocumentId != null)
        {
            LoadData();
        }

    }

    private async Task LoadData()
    {
        isLoading = true;
        if (BuyerId == "false") _filterItems = "all";
        if (BuyerId != null && commercialDocumentId != null && true)
        {
            var list = await DocumentServices.GetCommercialProductList(commercialDocumentId, BuyerId, (_filterItems != null ? _filterItems : "all"), 1, 100);
            if (idItem != null)
            {
                items = await DocumentServices.GetCommercialDocumentDetails(commercialDocumentId);

                items = items.Where(s => s.Id == idItem).ToList();
            }
            else
            {
                listItemByListProduct(list);
            }
        }
        isLoading = false;
        StateHasChanged();

    }

    public async void SaveItem(SalesDocumentItemsDetails item)
    {
        Alert(false, "...");
        var data = items.Where(s => s.Id == item.Id).FirstOrDefault();


        if (data != null)
        {
            if (data.UnitPrice > 0 && data.Qty > 0)
            {
                subTotal += (data.UnitPrice * data.Qty);
                data.ChargeableQty = data.Qty;
                data.Id = null;
                var result = await DocumentServices.SaveCommercialDocumentDetail(data);
                if (result != null && result.Id != null)
                {
                    Alert(true, "Saved");
                    await SaveTrimere();
                    StateHasChanged();
                }
                else
                {
                    Alert(true, "No saved");
                }
            }
           
            StateHasChanged();
        }
        else
        {
            Alert(true, "No saved");
        }

        data.Id = Guid.NewGuid().ToString();
    }

    public bool ValidationData(SalesDocumentItemsDetails item)
    {
        return false;
    }

    public async void listItemByListProduct(List<AddItemCommercialDocument> itemCommercialDocument)
    {
        items = new();
        if (itemCommercialDocument != null)
        {
            foreach (var detail in itemCommercialDocument)
            {

                if (detail != null)
                {
                    items.Add(ConvetToSalesDocumentItemsDetails(detail));
                    foreach (var itemEdit in items)
                    {
                        //if(itemEdit!=null) GridItem.EditRow(itemEdit);
                    }

                }

            }
        }

        StateHasChanged();
    }

    public SalesDocumentItemsDetails ConvetToSalesDocumentItemsDetails(AddItemCommercialDocument item)
    {       
        var detail = new SalesDocumentItemsDetails
                {
                    Id = Guid.NewGuid().ToString(),
                    TransactionalItem = item.TransactionalItem = item.TransactionalItem != null ? item.TransactionalItem : new(),
                    PullDate = item.PullDate = item.PullDate != DateTime.MinValue ? item.PullDate : DateTime.Today,
                    FormatedPullDate = item.FormatedPullDate = item.FormatedPullDate != null ? item.FormatedPullDate : "",
                    UnitPrice = item.UnitPrice,
                    TaxableUnitPrice = item.TaxableUnitPrice = item.TaxableUnitPrice != null ? item.TaxableUnitPrice : 0                                                ,
                    IdCommercialDocument = commercialDocumentId,
                    ChargeableQty = item.UnitPrice

                };


        return detail;

    }

    #region grid
    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>

        </RadzenMenu>
    );

    public async void OnMenuItemClick(MenuItemEventArgs args)
    {
        SalesDocumentItemsDetails argObj = (SalesDocumentItemsDetails)args.Value;

        if (args.Text.ToString() == "Edit")
        {
            EditId = argObj.Id;
            await GridItem.EditRow(argObj);
        }

        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    #endregion grid


    void OnCellClick(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> arg)
    {
        SalesDocumentItemsDetails argObj = (SalesDocumentItemsDetails)arg.Data;
        EditId = argObj.Id;
        if (detailItemTem != null && detailItemTem.Id != null) CancelEdit(detailItemTem.Id);
        detailItemTem = argObj;
        GridItem.EditRow(argObj);
    }



    void OnCellDoubleClick(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> arg)
    {
        Alert(false,"");
        SalesDocumentItemsDetails argObj = (SalesDocumentItemsDetails)arg.Data;
        EditId = argObj.Id;
        if (detailItemTem != null && detailItemTem.Id == argObj.Id)
        { CancelEdit(detailItemTem.Id);
           detailItemTem = null;
        }
        else 
        {
            if (detailItemTem != null && detailItemTem.Id != null) SaveEdit(detailItemTem);
            detailItemTem = argObj;
            foreach (var item in items)
            {
                GridItem.UpdateRow(item);
            }
            GridItem.EditRow(argObj);
        }
        StateHasChanged();
    }

    public async void SaveEdit(SalesDocumentItemsDetails data)
    {        
        if (data != null)
        {
            await GridItem.UpdateRow(data);
            if (detailItemTem.Id != null) SaveItem(data);
            EditId = "";
            StateHasChanged();
        }
    }

    public async void CancelEdit(string itemId)
    {
        var data = items.Where(s => s.Id == itemId).FirstOrDefault();
        if (data != null)
        {
            GridItem.CancelEditRow(data);
            EditId = "";
            detailItemTem = null;
            StateHasChanged();
        }
    }

    public async void CancelEdit(SalesDocumentItemsDetails argObj)
    {
        GridItem.CancelEditRow(argObj);
        EditId = "";
        detailItemTem = new();
        StateHasChanged();

    }

    public void SetNavigateTo(string name)
    {
        Navigation.NavigateTo(name);
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


    public void Alert(bool visible, string _msg)
    {
        viewMsg = visible;
        msg = _msg;
        StateHasChanged();
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (detailItemTem.Id != null)
            {
                //  SaveEdit(detailItemTem);
            }

        }
    }




    #region Confirm

    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await transactItemsService.DeleteBoxById(Id);
        if (result) { LoadData(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }

    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }

    public async Task SaveTrimere()
    {
        try
        {
            await Js.InvokeVoidAsync("localStorage.setItem", "timer", "true");
        }
        catch
        {
        }
    }

}
