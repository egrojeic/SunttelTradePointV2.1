@page "/SalesFromProductList"
@page "/SalesFromProductList/{commercialDocumentId}/{BuyerId}"

@using SunttelTradePointB.Shared.Sales;
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactItemsService;
@inject NavigationManager Navigation

@if (@AlertOpen)
{
    <MessageSaveComponent isVisible="AlertOpen" message="@msg">
    </MessageSaveComponent>
}


<PageTitleComponent Title="Sale item" IconName="commercialActivities.png"
                    Description="With this tool you can create and edit item Sales">
</PageTitleComponent>

<div class="panelMenuContainer">
    <button type="button" @onclick='()=>SetNavigateTo("SaleItem")' class="general-menu-button"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i> </button>

    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
</div>

<div class="tableContainer">

    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Sales From Produc Items"></WaitingProcessIndicator>

    }
    else
    {
        @if (items != null)
        {
            <RadzenDataGrid @ref="GridItem" AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@items"
                    TItem="SalesDocumentItemsDetails"
                    ColumnWidth="300px"
                    PageNumbersCount="100"
                    PageSize="15"
                    CellContextMenu="@ShowContextMenuWithContent"
                    AllowRowSelectOnRowClick="true"
                    CellDoubleClick="OnCellDoubleClick">

                <Columns>
                   
                    <RadzenDataGridColumn  TItem="SalesDocumentItemsDetails" Property="TransactionalItem.Name" Title="@GetName("TransactionalItem", new SalesDocumentItemsDetails())" Width="300px" />

                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Qty" Title="@GetName("Qty", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableQty" Title="@GetName("ChargeableQty", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableUnits.Name" Title="@GetName("ChargeableUnits", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitPrice" Title="@GetName("UnitPrice", new SalesDocumentItemsDetails())" Filterable="false" Width="200px">
                        <EditTemplate Context="itemEdit">
                            <RadzenNumeric @bind-Value="itemEdit.UnitPrice" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxableUnitPrice" Title="@GetName("TaxableUnitPrice", new SalesDocumentItemsDetails())" Filterable="false" Width="200px">
                        <EditTemplate Context="itemEdit">
                            <RadzenNumeric @bind-Value="itemEdit.UnitPrice" />
                        </EditTemplate>
                    </RadzenDataGridColumn><RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitCost" Title="@GetName("UnitCost", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxRate" Title="@GetName("TaxRate", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxValue" Title="@GetName("TaxValue", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Total" Title="@GetName("Total", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PurchaseSpecs" Title="@GetName("PurchaseSpecs", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Provider" Title="@GetName("Provider", new SalesDocumentItemsDetails())" Filterable="false" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="OriginalPrice" Title="@GetName("OriginalPrice", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ScannedBoxes" Title="@GetName("ScannedBoxes", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ProcurementPtje" Title="@GetName("ProcurementPtje", new SalesDocumentItemsDetails())" Width="200px">
                        <Template>
                            @{
                                var MarkedForQCInspection = context.GetType().GetProperty(nameof(SalesDocumentItemsDetails.ProcurementPtje))?.GetValue(context);
                                <input type="checkbox" checked="@(MarkedForQCInspection!=null? (bool)MarkedForQCInspection:false)" disabled />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PullDate" Title="@GetName("PullDate", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="FormatedPullDate" Title="@GetName("FormatedPullDate", new SalesDocumentItemsDetails())" Filterable="false" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Id" Title="@GetName("Id", new SalesDocumentItemsDetails())" >
                        <Template>
                            @{
                                var Id = context.GetType().GetProperty(nameof(SalesDocumentItemsDetails.Id))?.GetValue(context).ToString();
                                if ( EditId != Id)
                                {
                                    <input @onclick='()=>SaveItem(Id)'  class="btn-grid btn-grid-color" type="button" value="select">
                                }
                                if (EditId != "" && EditId == Id)
                                {
                                    <input @onclick='()=>SaveEdit(Id)' class="btn-grid btn-grid-color" type="button" value="save">
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    
                   
                </Columns>
            </RadzenDataGrid>
        }
    }

</div>


@code {
    [Parameter]
    public string _filterItems { get; set; }
    [Parameter]
    public string commercialDocumentId { get; set; }
    [Parameter]
    public string BuyerId { get; set; }

    public List<SalesDocumentItemsDetails> items { get; set; } = new();


    RadzenDataGrid<SalesDocumentItemsDetails> GridItem;
    public SalesDocumentItemsDetails Item { get; set; } = new();
    bool isLoading = false;
    string EditId = "";
    bool AlertOpen=false;
    string msg = "";
    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected override void OnInitialized()
    {
        if (commercialDocumentId != null)
        {
            LoadData();
        }

    }

    private async Task LoadData()
    {
        isLoading = true;
        if (BuyerId != null && commercialDocumentId !=null)
        {
            var list = await DocumentServices.GetCommercialProductList(commercialDocumentId, BuyerId,( _filterItems!=null ?_filterItems:"all"),1,10 );
        }
        //listItemByListProduct(list);
        isLoading = false;
        StateHasChanged();

    }



    public async void  SaveItem(string Id)
    {
        var data = items.Where(s => s.Id == Id).FirstOrDefault();

        if(data!=null){
            var result = await DocumentServices.SaveCommercialDocumentDetail(data);
            if (result !=null && result.Id !=null)
            {
                Alert(true, "Saved");
            }
            else
            {
                Alert(true, "No saved");
            }
            StateHasChanged();
        }
        else
        {
            Alert(true, "No saved");
        }
       
       
    }

    public async void listItemByListProduct(List<AddItemCommercialDocument> itemCommercialDocument)
    {
        items = new();
        if (itemCommercialDocument != null)
        {
            foreach (var detail in itemCommercialDocument)
            {

                if (detail != null)
                {
                    items.Add(ConvetToSalesDocumentItemsDetails(detail));
                    foreach (var itemEdit in items)
                    {
                        GridItem.EditRow(itemEdit);
                    }

                }

            }
        }

        StateHasChanged();
    }

    public SalesDocumentItemsDetails ConvetToSalesDocumentItemsDetails(AddItemCommercialDocument item)
    {


        var detail = new SalesDocumentItemsDetails
                {
                    TransactionalItem = item.TransactionalItem = item.TransactionalItem != null ? item.TransactionalItem : new(),
                    PullDate = item.PullDate = item.PullDate != DateTime.MinValue ? item.PullDate : DateTime.Today,
                    FormatedPullDate = item.FormatedPullDate = item.FormatedPullDate != null ? item.FormatedPullDate : "",
                    UnitPrice = item.UnitPrice,
                    TaxableUnitPrice = item.TaxableUnitPrice = item.TaxableUnitPrice != null ? item.TaxableUnitPrice : 0

                };


        return detail;


    }

    #region grid 
    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
      
        </RadzenMenu>
    );

    public async void OnMenuItemClick(MenuItemEventArgs args)
    {
        SalesDocumentItemsDetails argObj = (SalesDocumentItemsDetails)args.Value;

        if (args.Text.ToString() == "Edit")
        {
            EditId = argObj.Id;
            await GridItem.EditRow(argObj);
        }


        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {          
            ContextMenuService.Close();
        }
    }

    #endregion grid


    void OnCellDoubleClick(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> arg)
    {
        Console.WriteLine($"Double clicked cell value: ");
     
    }



    async Task EditRow(SalesDocumentItemsDetails order)
    {
        Item = order;
    }

    public async void SaveEdit( string Id)
    {
        var data = items.Where(s => s.Id == Id).FirstOrDefault();
        if(data!=null){
            await GridItem.UpdateRow(data);
            EditId = "";
            StateHasChanged();
        }
    }

    public void SetNavigateTo(string name)
    {
        Navigation.NavigateTo(name);
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void Alert(bool visible, string msg)
    {
        AlertOpen = false;
        msg = msg;
    }

}
