
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeServive
@inject ContextMenuService ContextMenuService
@inject IJSRuntime Js

@*<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }

    .e-contextmenu-wrapper.e-sfcontextmenu, .e-contextmenu-container.e-sfcontextmenu {
       position: absolute; 
    }
</style>*@

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>

<div >
    <div class="detailsTitleContainer">      
        <SfSplitButton Content="Item" IconCss="e-menu-icon fa-sharp fa-solid fa-circle-plus" style="background:none;" CssClass="splitButtonsStyle color">
            <SplitButtonEvents ItemSelected="EventIdSelectionMenuItem">
                </SplitButtonEvents>
                <DropDownMenuItems>   
                    <DropDownMenuItem Text="Add from product list" Id="SalesFromProductList" IconCss="e-menu-icon fa-sharp fa-solid fa-circle-plus"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Reload" IconCss="fa-solid fa-eject" ></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>   
        @*<img @onclick="()=>CloseMenu(true)" class="img-menu" src="/images/menu.png">
        <div class="menu-item" style="display:@(menuVisible?"flex":"none");">
            <button type="button" class="exit-btn" @onclick="()=>CloseMenu(false)">
                <i class="fa-regular fa-circle-xmark"></i>
            </button>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromProductList")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b @onclick='()=>EventIdSelectionMenuItem("SalesDocumentItems")' class="subTitleDetailForm">From product list</b>
            </div>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromInventroy")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b  class="subTitleDetailForm">From Inventroy</b>
            </div>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromProductionOrder")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b @onclick='()=>EventIdSelectionMenuItem("Product")' class="subTitleDetailForm">From Production Order </b>
            </div>
        </div>*@

    </div>

    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Items"></WaitingProcessIndicator>

    }
    else
    {
        @if (items != null)
        {
               <div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
                        <SfGrid @ref="DataGrid" DataSource="@items" Toolbar="@(new List<string>() {  "Edit", "Update", "Cancel" })" AllowPaging="true">
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                            <GridEvents OnActionComplete="ActionComplete" TValue="SalesDocumentItemsDetails"></GridEvents>
                <GridPageSettings PageSize="10"></GridPageSettings>
                <GridColumns>
                    <GridColumn Visible="false" Field=@nameof(SalesDocumentItemsDetails.Id) IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true})"></GridColumn>
                    <GridColumn AllowEditing="false" Field="TransactionalItem.Name" HeaderText="TransactionalItem" Width="50"></GridColumn>
                    <GridColumn Field="@nameof(SalesDocumentItemsDetails.Qty)" HeaderText="@GetName("Qty", new SalesDocumentItemsDetails())" ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{0, 10000}})" EditType="EditType.NumericEdit" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn AllowEditing="true" Field="@nameof(SalesDocumentItemsDetails.UnitPrice)" HeaderText="@GetName("UnitPrice", new SalesDocumentItemsDetails())" Width="50" ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{0, 10000}})" EditType="EditType.NumericEdit" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></GridColumn>
                    <GridColumn AllowEditing="false" Field="@nameof(SalesDocumentItemsDetails.ChargeableQty)" HeaderText="@GetName("ChargeableQty", new SalesDocumentItemsDetails())" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="@nameof(SalesDocumentItemsDetails.UnitCost)" HeaderText="@GetName("UnitCost", new SalesDocumentItemsDetails())" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="ChargeableUnits.Name" HeaderText="@GetName("ChargeableUnits.Name", new SalesDocumentItemsDetails())" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="@nameof(SalesDocumentItemsDetails.TaxableUnitPrice)" HeaderText="@GetName("TaxableUnitPrice", new SalesDocumentItemsDetails())" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" Format="C2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="TaxRate" HeaderText="@GetName("TaxRate", new SalesDocumentItemsDetails())" Format="C2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn AllowEditing="false" Field="Total" HeaderText="@GetName("Total", new SalesDocumentItemsDetails())" Format="C2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="50"></GridColumn>
                    <GridColumn Field="@nameof(SalesDocumentItemsDetails.PullDate)" HeaderText="@GetName("PullDate", new SalesDocumentItemsDetails())" AllowEditing="false" Width="50" Format="yyyy/MM/dd"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>
           @* <RadzenDataGrid @ref="grid" AllowFiltering="true"
                    AllowColumnResize="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@items"
                    TItem="SalesDocumentItemsDetails"
                    ColumnWidth="100px"
                    PageNumbersCount="100"
                    PageSize="50"
                    CellContextMenu="@ShowContextMenuWithContent"
                    CellDoubleClick="OnCellDoubleClick">

                <Columns>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Sortable="false" Filterable="false" Width="100px" TextAlign="Radzen.TextAlign.Center" Frozen="true">
                        <Template Context="data">
                            <Confirm Id="@data.Id"
                             IdSelect="@IdDelete"
                             ConfirmIdAction='ConfirmDelete'
                             CancelAction="CancelDelete"
                             SelectIdAction="SelectDelete"
                             EditEnable=true
                             IdEdit="@idCellItem"
                             SavedAction="SaveEditCell"
                            EditAction="EditCellGrid"></Confirm>

                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.Name" Title="@GetName("TransactionalItem", new SalesDocumentItemsDetails())" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.ProductPackingSpecs.Code" Title="@GetName("TransactionalItemSpecs", new SalesDocumentItemsDetails())" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Qty" Title="@GetName("Qty", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="80px">
                        <EditTemplate Context="itemEdit">
                            <RadzenNumeric @bind-Value="itemEdit.Qty" type="number" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableQty" Title="@GetName("ChargeableQty", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" Sortable="false" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableUnits.Name" Title="@GetName("ChargeableUnits.Name", new SalesDocumentItemsDetails())" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Width="100px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitPrice" Title="@GetName("UnitPrice", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Sortable="false" Width="90px">
                        <EditTemplate Context="itemEdit">
                            <RadzenNumeric @bind-Value="itemEdit.UnitPrice" type="number" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxableUnitPrice" Title="@GetName("TaxableUnitPrice", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitCost" Title="@GetName("UnitCost", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxRate" Title="@GetName("TaxRate", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxValue" Title="@GetName("TaxValue", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Total" Title="@GetName("Total", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PurchaseSpecs" Title="@GetName("PurchaseSpecs", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Provider" Title="@GetName("Provider", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="OriginalPrice" Title="@GetName("OriginalPrice", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ScannedBoxes" Title="@GetName("ScannedBoxes", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Title="@GetName("ProcurementPtje", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                        <Template Context="data">
                            @{

                                <input type="checkbox" checked="@(data.ProcurementPtje)" disabled />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PullDate" Title="@GetName("PullDate", new SalesDocumentItemsDetails())" Filterable="false" FormatString="{0:yyyy-MM-dd}" TextAlign="TextAlign.Center" Width="100px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="FormatedPullDate" Title="@GetName("FormatedPullDate", new SalesDocumentItemsDetails())" FormatString="{0:yyyy-MM-dd}" TextAlign="TextAlign.Center" Filterable="false" Width="200px" />

                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @($"Records: {items.Count}")
                    </label>
                </div>

            </div>*@
        }
    }

</div>







@code {
    [Parameter]
    public List<SalesDocumentItemsDetails> items { get; set; } = new();
    [Parameter]
    public string buyerId { get; set; }
    [Parameter]
    public bool isASales { get; set; }
    [Parameter]
    public string commercialDocumentId { get; set; }
    [Parameter]
    public EventCallback<string> alert { get; set; }
    [Parameter]
    public EventCallback Reaload { get; set; }

    RadzenDataGrid<SalesDocumentItemsDetails> grid;
    SfGrid<SalesDocumentItemsDetails> DataGrid;

    string page = "";
    bool menuVisible = false;
    bool isVisible = false;
    MessageSaveComponent? referAlert;
    string msg = "";
    string IdDelete = "";
    string idCellItem = "";
    bool viewMsg = false;
    bool isLoading = false;

    DotNetObjectReference<SalesDocumentItems> _reference;

    protected async override void OnInitialized()
    {
        StateHasChanged();
    }

    public async void LoadData()
    {
        items = await DocumentServices.GetCommercialDocumentDetails(commercialDocumentId, 1, 400);
        // Reaload.InvokeAsync(null);
        StateHasChanged();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _reference = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("LoadReference", _reference);

        }
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    public void EventIdSelectionMenuItem(MenuEventArgs  arg)
    {
        string name = arg.Item.Id;
        if (commercialDocumentId != null)
        {
            if(buyerId is null)
            {
                alert.InvokeAsync("Select a Buyer first");
                return;
            }
            Js.InvokeAsync<object>("open", $"{name}/{commercialDocumentId}/{(isASales ? buyerId : "false")}", "_blank");
        }
        else
        {
            alert.InvokeAsync("required fields");   
        }
        StateHasChanged();
        CloseMenu(false);

    }

    public void CloseMenu(bool mode)
    {
        menuVisible = mode;
        StateHasChanged();
    }

    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
        <RadzenMenuItem Text="Reload" Value=args.Data Icon=""></RadzenMenuItem>
        </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        SalesDocumentItemsDetails argObj = (SalesDocumentItemsDetails)args.Value;
        if (args.Text == "Reload")
        {
            LoadData();
            StateHasChanged();
        }
        else
        {
            if (argObj != null)
            {
                grid.EditRow(argObj);
                //Js.InvokeAsync<object>("open", $"SalesFromProductList/{commercialDocumentId}/{argObj.Id}/{(isASales ? buyerId : "false")}", "_blank");
            }
        }
    }

    public void EventEdit(string id)
    {
        var item = items.Where(s => s.Id == id).FirstOrDefault();
        grid.EditRow(item);
        idCellItem = item.Id;
    }

    public void EditCellGrid(string idItem)
    {
        var item = items.Where(s => s.Id == idItem).FirstOrDefault();
        idCellItem = item.Id;
        grid.EditRow(item);
    }

    void OnCellDoubleClick(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> arg)
    {
        SalesDocumentItemsDetails argObj = (SalesDocumentItemsDetails)arg.Data;
        //EditCellGrid(argObj.Id);
        SaveEditCell();
    }

    
    public async void SaveEditCell()
    {
        var item = items.Where(s => s.Id == idCellItem).FirstOrDefault();
        var result = await DocumentServices.SaveCommercialDocumentDetail(item);
        if (result != null && result.Id != null){ grid.UpdateRow(item);idCellItem = "";}
        StateHasChanged();
    }


    #endregion Grid

    #region Load

    public void LoadCommercialDocument()
    {
        if (items == null) items = new();
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    #region Confirm

    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await DocumentServices.DeleteSaleDetailById(commercialDocumentId, Id);
        if (result) { LoadData(); }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }

    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }


    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

    
    public async Task ActionComplete(ActionEventArgs<SalesDocumentItemsDetails> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                // Triggers once editing operation completes
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                // Triggers once add operation completes
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {
                // Triggers once cancel operation completes
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                SalesDocumentItemsDetails sale = args.Data;
                await DocumentServices.SaveCommercialDocumentDetail(sale);

            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                // Triggers once delete operation completes
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

}
