@page "/SalesDocumentItems"
@page "/SalesDocumentItems/{_filterItems}"

@using SunttelTradePointB.Shared.Sales;
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactItemsService;

<PageTitleComponent Title="Sale item" IconName="commercialActivities.png"
                    Description="With this tool you can create and edit item Sales">
</PageTitleComponent>

<div class="panelMenuContainer">
    <SearchComponent @bind-FilterTextSet="@docsFilter"></SearchComponent>
</div>

<div class="tableContainer">

    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

    }
    else
    {
        @if (Items != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@Items"
                    TItem="SalesDocumentItemsDetails"
                    ColumnWidth="300px"
                    PageNumbersCount="100"
                    PageSize="20">

                <Columns>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.Name" Title="@GetName("TransactionalItem", new SalesDocumentItemsDetails())" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.ProductPackingSpecs.Code" Title="@GetName("TransactionalItemSpecs", new SalesDocumentItemsDetails())" Width="80px" />


                </Columns>
            </RadzenDataGrid>
        }
    }

</div>


@code {
    [Parameter]
    public string _filterItems { get; set; }
    public List<SalesDocumentItemsDetails> Items { get; set; } = new();
    List<TransactionalItem>? itemList;

    bool isLoading = false;
    DateTime startingDate = DateTime.Now, endDate = DateTime.Now.AddMonths(1);

    public string docsFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }

    protected async override void OnInitialized()
    {
        if (_filterItems != null) LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        isLoading = true;
        var data = await transactItemsService.GetTransactionalItemsList(1, 50, _filterItems);
        itemList = data;

        listItemByListProduct();


    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


    public async void listItemByListProduct()
    {
        foreach (var Transactional in itemList)
        {
            var item = await transactItemsService.GetTransactionalItemById(Transactional.Id);
             if(item!=null) Transactional.ProductPackingSpecs = item.ProductPackingSpecs;
            if (Transactional.ProductPackingSpecs !=null)
            {
                foreach (var ProductPackingSpec in Transactional.ProductPackingSpecs)
                {
                    Items.Add(new SalesDocumentItemsDetails
                            {
                                TransactionalItem = Transactional,
                                TransactionalItemSpecs = ProductPackingSpec

                            });
                }
            }

        }
        isLoading = false;
        StateHasChanged();
    }


    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<CommercialDocument> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
        <RadzenMenuItem Text="Another" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        CommercialDocument argObj = (CommercialDocument)args.Value;
        Console.WriteLine($"Menu item with Value={argObj.Id} clicked");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }
}
