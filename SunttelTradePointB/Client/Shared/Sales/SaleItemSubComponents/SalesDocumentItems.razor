@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeServive
@inject ContextMenuService ContextMenuService
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<MessageSaveComponent isVisible="viewMsg" message="@msg"></MessageSaveComponent>



<div>
    <div class="detailsTitleContainer">
        <h3 class="subTitleDetailForm ">@GetName("Items",new CommercialDocument())</h3>
        <img @onclick="()=>CloseMenu(true)" class="img-menu" src="/images/menu.png">
        <div class="menu-item" style="display:@(menuVisible?"flex":"none");">
            <button type="button" class="exit-btn" @onclick="()=>CloseMenu(false)">
                <i class="fa-regular fa-circle-xmark"></i>
            </button>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromProductList")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b @onclick='()=>EventIdSelectionMenuItem("SalesDocumentItems")' class="subTitleDetailForm">From product list</b>
            </div>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromInventroy")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b @onclick='()=>EventIdSelectionMenuItem("inventory")' class="subTitleDetailForm">From Inventroy</b>
            </div>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromProductionOrder")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b @onclick='()=>EventIdSelectionMenuItem("Product")' class="subTitleDetailForm">From Production Order </b>
            </div>
        </div>

    </div>

    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Items"></WaitingProcessIndicator>

    }
    else
    {
        @if (items != null)
        {
            <RadzenDataGrid @ref="grid" AllowFiltering="true"
                    AllowColumnResize="true"
                  
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                   
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@items"
                    TItem="SalesDocumentItemsDetails"
                    ColumnWidth="100px"
                    PageNumbersCount="100"
                    PageSize="50"
                   
                    CellContextMenu="@ShowContextMenuWithContent">

                <Columns>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Sortable="false" Filterable="false" Width="50px" TextAlign="Radzen.TextAlign.Center" Frozen="true" >
                        <Template Context="data">
                            <Confirm Id="@data.Id" 
                             IdSelect="@IdDelete"
                             ConfirmIdAction='ConfirmDelete'
                             CancelAction="CancelDelete"
                             SelectIdAction="SelectDelete"></Confirm>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.Name" Title="@GetName("TransactionalItem", new SalesDocumentItemsDetails())" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.ProductPackingSpecs.Code" Title="@GetName("TransactionalItemSpecs", new SalesDocumentItemsDetails())" Width="200px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Qty" Title="@GetName("Qty", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableQty" Title="@GetName("ChargeableQty", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" Sortable="false" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableUnits.Name" Title="@GetName("ChargeableUnits.Name", new SalesDocumentItemsDetails())" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Width="100px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitPrice" Title="@GetName("UnitPrice", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Sortable="false" Width="90px">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxableUnitPrice" Title="@GetName("TaxableUnitPrice", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitCost" Title="@GetName("UnitCost", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxRate" Title="@GetName("TaxRate", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxValue" Title="@GetName("TaxValue", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Total" Title="@GetName("Total", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="80px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PurchaseSpecs" Title="@GetName("PurchaseSpecs", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Provider" Title="@GetName("Provider", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="OriginalPrice" Title="@GetName("OriginalPrice", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FormatString="{0:N2}" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ScannedBoxes" Title="@GetName("ScannedBoxes", new SalesDocumentItemsDetails())" Filterable="false" TextAlign="TextAlign.Right" Sortable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Title="@GetName("ProcurementPtje", new SalesDocumentItemsDetails())" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                        <Template Context="data">
                            @{

                                <input type="checkbox" checked="@(data.ProcurementPtje)" disabled />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PullDate" Title="@GetName("PullDate", new SalesDocumentItemsDetails())" Filterable="false" FormatString="{0:yyyy-MM-dd}" TextAlign="TextAlign.Center" Width="100px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="FormatedPullDate" Title="@GetName("FormatedPullDate", new SalesDocumentItemsDetails())" FormatString="{0:yyyy-MM-dd}" TextAlign="TextAlign.Center" Filterable="false" Width="200px" />
                  
                </Columns>
            </RadzenDataGrid>
            <div class="container-total">
                <div class="item">
                    <label>
                        @($"Records: {items.Count}")
                    </label>
                </div>

            </div>
        }
    }

</div>







@code {
    [Parameter]
    public List<SalesDocumentItemsDetails> items { get; set; } = new();
    [Parameter]
    public string buyerId { get; set; }
    [Parameter]
    public bool isASales { get; set; }
    [Parameter]
    public string commercialDocumentId { get; set; }
    [Parameter]
    public EventCallback<string> alert { get; set; }
    [Parameter]
    public EventCallback Reaload { get; set; }

    RadzenDataGrid<SalesDocumentItemsDetails> grid;

    string page = "";
    bool menuVisible = false;
    bool isVisible = false;
    MessageSaveComponent? referAlert;
    string msg = "";
    string IdDelete = "";
    bool viewMsg = false;
    bool isLoading = false;


    protected async override void OnInitialized()
    {
        StateHasChanged();
    }

    public async void LoadData()
    {
        items = await DocumentServices.GetCommercialDocumentDetails(commercialDocumentId,1,400);
       // Reaload.InvokeAsync(null);
        StateHasChanged();
    }


    protected override void OnParametersSet()
    {
        var r = page;
        StateHasChanged();
    }

    public void EventIdSelectionMenuItem(string name)
    {
        if (commercialDocumentId != null)
        {
            Js.InvokeAsync<object>("open", $"{name}/{commercialDocumentId}/{(isASales ? buyerId : "false")}", "_blank");
        }
        else
        {
            alert.InvokeAsync("required fields");
        }
        StateHasChanged();
        CloseMenu(false);

    }


    public void CloseMenu(bool mode)
    {
        menuVisible = mode;
        StateHasChanged();
    }

    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
        <RadzenMenuItem Text="Reload" Value=args.Data Icon=""></RadzenMenuItem>
        </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        SalesDocumentItemsDetails argObj = (SalesDocumentItemsDetails)args.Value;
        if (args.Text == "Reload")
        {
            LoadData();
            StateHasChanged();
        }
        else
        {
            if (argObj != null)
            {
                Js.InvokeAsync<object>("open", $"SalesFromProductList/{commercialDocumentId}/{argObj.Id}/{(isASales ? buyerId : "false")}", "_blank");
            }
        }
    }

    #endregion Grid

    #region Load

    public void LoadCommercialDocument()
    {
        if (items == null) items = new();
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    #region Confirm

    public async void ConfirmDelete(string Id)
    {
        Alert("...", false);
        bool result = await DocumentServices.DeleteSaleDetailById(commercialDocumentId,Id);
        if (result) { LoadData();  }
        else
        {
            Alert("Not deleted", true);
        }
        CancelDelete();
        StateHasChanged();
    }

    public void SelectDelete(string Id)
    {
        IdDelete = Id;
        StateHasChanged();
    }

    public void CancelDelete()
    {
        IdDelete = "";
        StateHasChanged();
    }
    #endregion Confirm

    public void Alert(string _msg, bool visible)
    {
        viewMsg = visible;
        msg = _msg;
    }


    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
