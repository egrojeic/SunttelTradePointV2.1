@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeServive
@inject ContextMenuService ContextMenuService
@inject IJSRuntime Js

<MessageSaveComponent @ref="referAlert">
</MessageSaveComponent>


<div class="flex-horizontal-center ">
    <div class="detailsTitleContainer">
        <h3 class="subTitleDetailForm">@GetName("Items",new CommercialDocument())</h3>
        <img @onclick="()=>CloseMenu(true)" class="img-menu" src="/images/menu.png">
        <div class="menu-item" style="display:@(menuVisible?"flex":"none");">
            <button type="button" class="exit-btn" @onclick="()=>CloseMenu(false)">
                <i class="fa-regular fa-circle-xmark"></i>
            </button>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromProductList")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b @onclick='()=>EventIdSelectionMenuItem("SalesDocumentItems")' class="subTitleDetailForm">From product list</b>
            </div>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromInventroy")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b @onclick='()=>EventIdSelectionMenuItem("inventory")' class="subTitleDetailForm">From Inventroy</b>
            </div>
            <div class="item">
                <button type="button" @onclick='()=>EventIdSelectionMenuItem("SalesFromProductionOrder")'>
                    <i class="fa-sharp fa-solid fa-circle-plus"></i>
                </button>
                <b @onclick='()=>EventIdSelectionMenuItem("Product")' class="subTitleDetailForm">From Production Order </b>
            </div>
        </div>

    </div>

    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

    }
    else
    {
        @if (items != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@items"
                    TItem="SalesDocumentItemsDetails"
                    ColumnWidth="300px"
                    PageNumbersCount="100"
                    PageSize="20"
                  >

                <Columns>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.Name" Title="@GetName("TransactionalItem", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TransactionalItem.ProductPackingSpecs.Code" Title="@GetName("TransactionalItemSpecs", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="IdCommercialDocument" Title="@GetName("IdCommercialDocument", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Qty" Title="@GetName("Qty", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableQty" Title="@GetName("ChargeableQty", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ChargeableUnitsName" Title="@GetName("ChargeableUnitsName", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitPrice" Title="@GetName("UnitPrice", new SalesDocumentItemsDetails())" Width="120px">

                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxableUnitPrice" Title="@GetName("TaxableUnitPrice", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="UnitCost" Title="@GetName("UnitCost", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxRate" Title="@GetName("TaxRate", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="TaxValue" Title="@GetName("TaxValue", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Total" Title="@GetName("Total", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PurchaseSpecs" Title="@GetName("PurchaseSpecs", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="Provider" Title="@GetName("Provider", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="OriginalPrice" Title="@GetName("OriginalPrice", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ScannedBoxes" Title="@GetName("ScannedBoxes", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="ProcurementPtje" Title="@GetName("ProcurementPtje", new SalesDocumentItemsDetails())" Width="120px">
                        <Template>
                            @{
                                var MarkedForQCInspection = context.GetType().GetProperty(nameof(CommercialDocument.MarkedForQCInspection))?.GetValue(context);

                                <input type="checkbox" checked="@(MarkedForQCInspection!=null? (bool)MarkedForQCInspection:false)" disabled />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="PullDate" Title="@GetName("PullDate", new SalesDocumentItemsDetails())" Width="120px" />
                    <RadzenDataGridColumn TItem="SalesDocumentItemsDetails" Property="FormatedPullDate" Title="@GetName("FormatedPullDate", new SalesDocumentItemsDetails())" Width="120px" />

                </Columns>
            </RadzenDataGrid>
        }
    }

</div>







@code {
    [Parameter]
    public List<SalesDocumentItemsDetails> items { get; set; } = new();

    string page = "";
    bool menuVisible = false;

    MessageSaveComponent? referAlert;
    string msg = "";
    bool isLoading = false;

    protected override void OnParametersSet()
    {
        var r = page;
        StateHasChanged();
    }

    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");
        CloseMenu(false);
    }

    public void alert(string msg, int status)
    {
        referAlert.isVisible = true;
        referAlert.message = msg;
        referAlert.status = status;
    }


    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }

    public void CloseMenu(bool mode)
    {
        menuVisible = mode;
        StateHasChanged();
    }


    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<SalesDocumentItemsDetails> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        SalesDocumentItemsDetails argObj = (SalesDocumentItemsDetails)args.Value;

        if (argObj != null)
        {
            
        }
    }

    #endregion Grid




    #region Load

    public void LoadCommercialDocument()
    {
        if (items == null) items = new();
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
