@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common

@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeService

<div class="form-group row py-2">
    <label class="control-label col-md-12">@lblAddresLine1*: </label>
    <div class="col">
        <input id="addres1" type="text" class="form-control" @bind-value="@address.AddressLine1" required />
    </div>
</div>

<div class="form-group row py-2">
    <label class="control-label col-md-12">@lblCountry* : (<b>@country1.Name</b>) </label>
    <div class="col">
        @if (countryList == null) countryList = new();
        <SfDropDownList TValue="string" TItem="Country" Placeholder="Select a country" AllowFiltering="true" DataSource="@countryList" >
            <DropDownListEvents TItem="Country" TValue="string" ValueChange="@ValueChangeCountry"></DropDownListEvents>
            <DropDownListFieldSettings Value="@nameof(Country.Name)" Text="Name"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
</div>


<div  class="form-group row py-2">
    <label class="control-label col-md-12">@lblRegion* : (<b>@geo.Name</b>) </label>
    <div class="col">
        @if (regionsList == null) regionsList = new();
        <SfDropDownList TValue="string" TItem="GeoRegion" Placeholder="Select a region" AllowFiltering="true" DataSource="@regionsList" >
            <DropDownListEvents TItem="GeoRegion" TValue="string" ValueChange="@ValueChangeRegion"></DropDownListEvents>
            <DropDownListFieldSettings Value="@nameof(GeoRegion.Name)" Text="Name"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
</div>

<div  class="form-group row py-2">
    <label class="control-label col-md-12">@lblCity* : (<b>@city.Name</b>)</label>
    <div class="col">
        @if (citiesList == null) citiesList = new();
        <SfDropDownList TValue="string" TItem="City" Placeholder="Select a city" AllowFiltering="true" DataSource="@citiesList" >
            <DropDownListEvents TItem="City" TValue="string" ValueChange="@ValueChangeCity"></DropDownListEvents>
            <DropDownListFieldSettings Value="@nameof(City.Name)" Text="Name"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
</div>
@if (status && _filterView == -1)
{
    <label style="display:@(_filterView==0?"block":"none");" class="c-red">Country not available</label>
}
@if (status && _filterView == 0)
{
    <label style="display:@(_filterView==0?"block":"none");" class="c-red">Regions not available</label>
}
@if (status && _filterView == 1)
{
    <label style="display:@(_filterView==0?"block":"none");" class="c-red">Cities not available</label>
}

<div class="form-group row py-2">
    <label class="control-label col-md-12">@lblZipCode*: </label>
    <div class="col">
        <input id="zipCode" type="text" class="form-control" @bind-value="@address.ZipCode" required />
    </div>
</div>


@code {
    [Parameter]
    public Address? oldAddress { get; set; } = null;
    [Parameter]
    public EventCallback<Address> EventAddress { get; set; }

    //Geographic Place Definition
    private List<Country>? countryList;

    private List<GeoRegion>? regionsList;

    private List<City>? citiesList;

    private Country? currentCountry;
    private GeoRegion? currentRegion;

    SfDropDownList<City,string> DrCity;
    SfDropDownList<GeoRegion,string> DrRegi;
    SfDropDownList<Country,string> DrContry;


    int _filterView = 3;
    bool status = false;

    string _countriesFilter = "";
    string _regionsFilter = "";
    string _citiesFilter = "";

    public string lblAddresLine1 = "";
    public string lblCountry = "";
    public string lblRegion = "";
    public string lblCity = "";
    public string lblZipCode = "";

    Address address = new Address();
    public City city = new City();
    public GeoRegion geo = new GeoRegion();
    public Country country1 = new Country();

    protected override async Task OnInitializedAsync()
    {
        lblAddresLine1 = UICommonFunctions.GetDisplayName(new Address(), "AddressLine1") != null ? UICommonFunctions.GetDisplayName(new Address(), "AddressLine1") : "";
        lblCountry = UICommonFunctions.GetDisplayName(new Country(), "Name") != null ? UICommonFunctions.GetDisplayName(new Country(), "Name") : "";
        lblRegion = UICommonFunctions.GetDisplayName(new GeoRegion(), "Name") != null ? UICommonFunctions.GetDisplayName(new GeoRegion(), "Name") : "";
        lblCity = UICommonFunctions.GetDisplayName(new City(), "Name") != null ? UICommonFunctions.GetDisplayName(new City(), "Name") : "";
        lblZipCode = UICommonFunctions.GetDisplayName(new Address(), "ZipCode") != null ? UICommonFunctions.GetDisplayName(new Address(), "ZipCode") : "";
        await GetFilteredCountries();
    }

    protected override void OnParametersSet()
    {

    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (oldAddress != null)
        {
            address = oldAddress;

            if (address?.CityAddress != null)
            {
                city = address.CityAddress;
                if (DrCity!=null) DrCity.RefreshDataAsync();

                if (address?.CityAddress?.RegionCity != null)
                {
                    geo = address.CityAddress.RegionCity;
                    if (DrRegi != null) DrRegi.RefreshDataAsync();
                    if (address?.CityAddress?.RegionCity?.CountryRegion != null)
                    {
                        country1 = address.CityAddress.RegionCity.CountryRegion;
                        if (DrContry != null) DrContry.RefreshDataAsync();

                    }
                }


            }

        }
        
    }


    private async Task GetFilteredCountries(string filterCountries = "")
    {
        var response = await geoPlaces.GetCountries(filterCountries);
        if (response != null && response.Count() <= 0) _filterView = -1;
        if (response != null)
            countryList = response.Where(c => c.Id != "000000000000000000000000").ToList();
        StateHasChanged();

    }


    private async Task LoadRegions(Country country)
    {
        if (country !=null)
        {
            var response = await geoPlaces.GetRegions(country.Id, "", true);
            currentCountry = country;
            if (response != null && response.Count() > 0) _filterView = 1;
            if (response != null)
                regionsList = response;
            StateHasChanged();

        }

    }

    private async Task GetFilteredRegions(Country country, string filterRegions = "")
    {
        if (country!=null)
        {
            regionsList = await geoPlaces.GetRegions(country.Id, filterRegions);
        }


    }

    private async Task SetCurrentRegion(GeoRegion geoRegion)
    {
        currentRegion = geoRegion;
        citiesList = await geoPlaces.GetCities(geoRegion.Id, "", true);
        if (citiesList != null && citiesList.Count() > 0) _filterView = 2;
        StateHasChanged();
    }

    private async Task GetFilteredCities(GeoRegion geoRegion, string filterRegions = "")
    {
        citiesList = await geoPlaces.GetCities(geoRegion.Id, filterRegions);
        if (citiesList != null && citiesList.Count() > 0) _filterView = 2;
        StateHasChanged();
    }

    private async void ValueChangeCountry(ChangeEventArgs<string, Country> args)
    {

        _filterView = 0;
        StateHasChanged();
        await LoadRegions(args.ItemData);
        actorsNodeService.NewCountry(args.ItemData);
        status = true;
        StateHasChanged();
        SetEventAddress();
    }

    private void ValueChangeRegion(ChangeEventArgs<string, GeoRegion> args)
    {
        _filterView = 1;
        StateHasChanged();
        SetCurrentRegion(args.ItemData);
        actorsNodeService.NewGeoRegion(args.ItemData);
        StateHasChanged();

    }

    private void ValueChangeCity(ChangeEventArgs<string, City> args)
    {
        if (args.ItemData != null)
        {
            city = args.ItemData != null ? args.ItemData : new();
            actorsNodeService.NewCity(args.ItemData);
            actorsNodeService.NewEntityActorAddress(address);
            SetEventAddress();
        }

    }


    public void SetEventAddress()
    {
        if (oldAddress == null) oldAddress = new();
        if (oldAddress.CityAddress == null) oldAddress.CityAddress = new();
        if (oldAddress.CityAddress.RegionCity == null) oldAddress.CityAddress.RegionCity = new();
        if (oldAddress.CityAddress.RegionCity.CountryRegion == null) oldAddress.CityAddress.RegionCity.CountryRegion = new();

        oldAddress.CityAddress = city != null ? city : (oldAddress.CityAddress != null ? oldAddress.CityAddress : new());
        oldAddress.CityAddress.RegionCity = currentRegion != null ? currentRegion : (oldAddress.CityAddress.RegionCity != null ? oldAddress.CityAddress.RegionCity : new());
        oldAddress.CityAddress.RegionCity.CountryRegion = currentCountry != null ? currentCountry : (oldAddress.CityAddress.RegionCity.CountryRegion != null ? oldAddress.CityAddress.RegionCity.CountryRegion : new());
        geoPlaces.address = oldAddress;
    }

}