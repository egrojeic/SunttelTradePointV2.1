@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common

@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeService

<div class="form-group row py-2">
    <label class="control-label col-md-12">@lblAddresLine1*: </label>
    <div class="col">
        <input id="addres1" type="text" class="form-control" @bind-value="@address.AddressLine1" required />
    </div>
</div>

<div class="form-group row py-2">
    <label class="control-label col-md-12">@lblCountry* :  </label>
    <div class="col">
        @if (countryList == null) countryList = new();
        <div>
            <div style="position:relative;">
                <div class="item-edit">
                    @if (country1 == null) country1 = new();
                    <label>@(country1 != null ? (country1?.Name != null ? country1?.Name : "") : "")</label>
                    <button @onclick='()=>SetViewElemnt("Contry")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
                <InputTextSelector 
                    @ref="ReferInputTextSelector" 
                    EventSearcherValue="EventSearcherValue" 
                    EventIdSelection="EventIdSelection" 
                    ParamCountResul="ParamCountResul" 
                    EventClosed="ClosedInput" 
                    ViewSelect="viewSelect"
                    
                    Visible="viewControlCountry1">
                    @{
                        if (countryList != null)
                        {
                            foreach (var Obj in countryList)
                            {
                                <option value="@Obj.Id">@Obj.Name</option>
                            }
                        }

                    }
                </InputTextSelector>

                <InputTextSelector3 TItem="Country"
                                    captionOff="true"
                                    EventSearcherValueAndId="SelectedCountry"
                                    Visible="viewControlCountry1"
                                    style="left:-100px;"
                                    EventClosed="ClosedInput"
                                    Id="@GetName("SkinImageName", new Concept())"
                                    Items="countryList">

                </InputTextSelector3>
            </div>
        </div>      
    </div>
</div>


<div class="form-group row py-2">
    <label class="control-label col-md-12">@lblRegion* :  </label>
    <div class="col">
        @if (regionsList == null) regionsList = new();
        <div>
            <div style="position:relative;">
                <div class="item-edit">
                    <label>@(geo != null ? (geo?.Name != null ? geo?.Name:"") : "")</label>
                    <button @onclick='()=>SetViewElemnt("Geo")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
                <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelection" ParamCountResul="ParamCountResul" EventClosed="ClosedInput" ViewSelect="viewSelect" Visible="viewControlGeo">
                    @{
                        if (regionsList != null)
                        {
                            foreach (var Obj in regionsList)
                            {
                                <option value="@Obj.Id">@Obj.Name</option>
                            }
                        }
                    }
                </InputTextSelector>
            </div>
        </div>      
    </div>
</div>

<div class="form-group row py-2">
    <label class="control-label col-md-12">@lblCity* :</label>
    <div class="col">
        @if (citiesList == null) citiesList = new();
        <div>
            <div style="position:relative;">
                <div class="item-edit">
                    <label>@(city != null ? (city?.Name != null ? city?.Name:"") : "")</label>
                    <button @onclick='()=>SetViewElemnt("City")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
                <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelection" ParamCountResul="ParamCountResul" EventClosed="ClosedInput" ViewSelect="viewSelect" Visible="viewControlCity">
                    @{
                        if (citiesList != null)
                        {
                            foreach (var Obj in citiesList)
                            {
                                <option value="@Obj.Id">@Obj.Name</option>
                            }
                        }
                    }
                </InputTextSelector>
            </div>
        </div>
      
    </div>
</div>
@if (status && _filterView == -1)
{
    <label style="display:@(_filterView==0?"block":"none");" class="c-red">Country not available</label>
}
@if (status && _filterView == 0)
{
    <label style="display:@(_filterView==0?"block":"none");" class="c-red">Regions not available</label>
}
@if (status && _filterView == 1)
{
    <label style="display:@(_filterView==0?"block":"none");" class="c-red">Cities not available</label>
}

<div class="form-group row py-2">
    <label class="control-label col-md-12">@lblZipCode*: </label>
    <div class="col">
        <input id="zipCode" type="text" class="form-control" @bind-value="@address.ZipCode" required />
    </div>
</div>


@code {

    [Parameter]
    public Address? address { get; set; } = null;


    [Parameter]
    public Address? oldAddress { get; set; } = null;
    [Parameter]
    public EventCallback<Address> EventAddress { get; set; }
    [Parameter]
    public string modePage { get; set; } = "";
    //Geographic Place Definition
    private List<Country>? countryList;

    private List<GeoRegion>? regionsList;

    private List<City>? citiesList;

    private Country? currentCountry;
    private GeoRegion? currentRegion;

    SfDropDownList<City, string> DrCity;
    SfDropDownList<GeoRegion, string> DrRegi;
    SfDropDownList<Country, string> DrContry;
    InputTextSelector ReferInputTextSelector;


    int ParamCountResul = 0;
    bool viewSelect = false;
    int _filterView = 3;
    bool status = false;

    string SearcherValueMode = "";
    string _countriesFilter = "";
    string _regionsFilter = "";
    string _citiesFilter = "";

    public string lblAddresLine1 = "";
    public string lblCountry = "";
    public string lblRegion = "";
    public string lblCity = "";
    public string lblZipCode = "";

    bool viewControlCountry1 = false;
    bool viewControlGeo = false;
    bool viewControlCity = false;
    bool postBack = true;

    public City city = new City();
    public GeoRegion geo = new GeoRegion();
    public Country country1 = new Country();


    protected override async Task OnInitializedAsync()
    {
        lblAddresLine1 = UICommonFunctions.GetDisplayName(new Address(), "AddressLine1") != null ? UICommonFunctions.GetDisplayName(new Address(), "AddressLine1") : "";
        lblCountry = UICommonFunctions.GetDisplayName(new Country(), "Name") != null ? UICommonFunctions.GetDisplayName(new Country(), "Name") : "";
        lblRegion = UICommonFunctions.GetDisplayName(new GeoRegion(), "Name") != null ? UICommonFunctions.GetDisplayName(new GeoRegion(), "Name") : "";
        lblCity = UICommonFunctions.GetDisplayName(new City(), "Name") != null ? UICommonFunctions.GetDisplayName(new City(), "Name") : "";
        lblZipCode = UICommonFunctions.GetDisplayName(new Address(), "ZipCode") != null ? UICommonFunctions.GetDisplayName(new Address(), "ZipCode") : "";
        await GetFilteredCountries();
    }

    protected override void OnParametersSet()
    {

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (oldAddress != null && postBack)
        {
            address = oldAddress;

            if (address?.CityAddress != null)
            {
                city = address.CityAddress;
                if (DrCity != null) DrCity.RefreshDataAsync();

                if (address?.CityAddress?.RegionCity != null)
                {
                    geo = address.CityAddress.RegionCity;
                    if (DrRegi != null) DrRegi.RefreshDataAsync();
                    if (address?.CityAddress?.RegionCity?.CountryRegion != null)
                    {
                        country1 = address.CityAddress.RegionCity.CountryRegion;
                        if (DrContry != null) DrContry.RefreshDataAsync();
                        postBack = false;

                    }
                }


            }

        }

    }


    private async Task GetFilteredCountries(string filterCountries = "")
    {
        var response = await geoPlaces.GetCountries(filterCountries);
        if (response != null && response.Count() <= 0) _filterView = -1;
        if (response != null)
            countryList = response.Where(c => c.Id != "000000000000000000000000").ToList();
        StateHasChanged();

    }


    private async Task LoadRegions(Country country)
    {
        if (country != null)
        {
            var response = await geoPlaces.GetRegions(country.Id, "", true);
            currentCountry = country;
            if (response != null && response.Count() > 0) _filterView = 1;
            if (response != null)
                regionsList = response;
            StateHasChanged();

        }

    }

    private async Task GetFilteredRegions(Country country, string filterRegions = "")
    {
        if (country != null)
        {
            regionsList = await geoPlaces.GetRegions(country.Id, filterRegions);
        }
    }

    private async Task SetCurrentRegion(GeoRegion geoRegion)
    {
        currentRegion = geoRegion;
        citiesList = await geoPlaces.GetCities(geoRegion.Id, "", true);
        if (citiesList != null && citiesList.Count() > 0) _filterView = 2;
        StateHasChanged();
    }

    private async Task GetFilteredCities(GeoRegion geoRegion, string filterRegions = "")
    {
        citiesList = await geoPlaces.GetCities(geoRegion.Id, filterRegions, true);
        if (citiesList != null && citiesList.Count() > 0) _filterView = 2;
        StateHasChanged();
    }

    private async void ValueChangeCountry(ChangeEventArgs<string, Country> args)
    {

        _filterView = 0;
        StateHasChanged();
        await LoadRegions(args.ItemData);
        actorsNodeService.NewCountry(args.ItemData);
        status = true;
        StateHasChanged();
        SetEventAddress();
    }

    private void ValueChangeRegion(ChangeEventArgs<string, GeoRegion> args)
    {
        _filterView = 1;
        StateHasChanged();
        SetCurrentRegion(args.ItemData);
        actorsNodeService.NewGeoRegion(args.ItemData);
        StateHasChanged();

    }

    private void ValueChangeCity(ChangeEventArgs<string, City> args)
    {
        if (args.ItemData != null)
        {
            city = args.ItemData != null ? args.ItemData : new();

            address.CityAddress = city;
            actorsNodeService.NewCity(args.ItemData);
            actorsNodeService.NewEntityActorAddress(address);
            SetEventAddress();
        }

    }


    public void SetEventAddress()
    {
        if (oldAddress == null) oldAddress = new();
        if (oldAddress.CityAddress == null) oldAddress.CityAddress = new();
        if (oldAddress.CityAddress.RegionCity == null) oldAddress.CityAddress.RegionCity = new();
        if (oldAddress.CityAddress.RegionCity.CountryRegion == null) oldAddress.CityAddress.RegionCity.CountryRegion = new();

        oldAddress.CityAddress = city != null ? city : (oldAddress.CityAddress != null ? oldAddress.CityAddress : new());
        oldAddress.CityAddress.RegionCity = currentRegion != null ? currentRegion : (oldAddress.CityAddress.RegionCity != null ? oldAddress.CityAddress.RegionCity : new());
        oldAddress.CityAddress.RegionCity.CountryRegion = currentCountry != null ? currentCountry : (oldAddress.CityAddress.RegionCity.CountryRegion != null ? oldAddress.CityAddress.RegionCity.CountryRegion : new());
        geoPlaces.address = oldAddress;
    }



    #region InputControl
    protected async void EventIdSelection(string SelectionId)
    {
        if (SearcherValueMode == "Contry")
        {
            country1 = countryList.Where(s => s.Id == SelectionId.Trim()).FirstOrDefault();
            LoadRegions(country1);
            geo = new();
            city = new();
        }
        if (SearcherValueMode == "Geo")
        {
            geo = regionsList.Where(s => s.Id == SelectionId.Trim()).FirstOrDefault();
            if (geo != null)
            {
                city = new();
                await GetFilteredCities(geo, "all");
            }

        }
        if (SearcherValueMode == "City")
        {
            city = citiesList.Where(s => s.Id == SelectionId.Trim()).FirstOrDefault();

            if (city != null)
            {
                address.CityAddressRef = city.Id;
                address.CityAddress = city;
            }


        }


        if (modePage == "ShippingPlaces")
        {            
            geoPlaces.addressShippingPlaces = geoPlaces.address == null ? new() : geoPlaces.address;
            geoPlaces.addressShippingPlaces.CityAddress = city != null ? city : new();
            geoPlaces.addressShippingPlaces.CityAddress.RegionCity = geo != null ? geo : new();
            geoPlaces.addressShippingPlaces.CityAddress.RegionCity.CountryRegion = country1 != null ? country1 : new();
        }
        else
        {
            geoPlaces.address = geoPlaces.address == null ? new() : geoPlaces.address;
            geoPlaces.address.CityAddress = city != null ? city : new();
            geoPlaces.address.CityAddress.RegionCity = geo != null ? geo : new();
            geoPlaces.address.CityAddress.RegionCity.CountryRegion = country1 != null ? country1 : new();
        }


        ClosedInput();
    }
    protected async void EventSearcherValue(string value)
    {
        if (SearcherValueMode == "Contry")
        {
            await GetFilteredCountries();
            if (!value.ToLower().Contains("all") && !value.ToLower().Contains("todo"))
            {
                countryList = countryList.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            }

            if (countryList != null)
            {
                ParamCountResul = countryList.Count();                
            }

        }
        if (SearcherValueMode == "Geo")
        {
            if (!value.ToLower().Contains("all") && !value.ToLower().Contains("todo"))
            {
                regionsList = regionsList.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            }
            ParamCountResul = regionsList !=null?  regionsList.Count():0;
        }
        if (SearcherValueMode == "City")
        {
            if (!value.ToLower().Contains("all") && !value.ToLower().Contains("todo"))
            {
                citiesList = citiesList.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            }

            ParamCountResul = citiesList != null ? citiesList.Count() : 0;
        }

        viewSelect = ParamCountResul > 0; 
    }


    public void ClosedInput()
    {
        viewControlCountry1 = false;
        viewSelect = false;
        viewControlGeo = false;
        viewControlCity = false;
        ParamCountResul = 0;
        StateHasChanged();
    }

    public void SetViewElemnt(string Element)
    {
        SearcherValueMode = Element;
        ClosedInput();
        if (Element == "Contry") { viewControlCountry1 = true; }
        if (Element == "Geo") viewControlGeo = true;
        if (Element == "City") viewControlCity = true;


    }
    #endregion Input Control

    
    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}