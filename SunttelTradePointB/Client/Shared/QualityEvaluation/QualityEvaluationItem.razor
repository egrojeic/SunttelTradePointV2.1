@page "/QualityEvaluationItem"
@page "/QualityEvaluationItem/{QualityEvaluationId}/{filter}"


@using SunttelTradePointB.Shared.Quality;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.QualityEvaluationServices.QualityEvaluationServices QualityEvaluationServices
@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeServive
@inject IJSRuntime Js

<MessageSaveComponent isVisible="isVisible" message="@alertMsg">
</MessageSaveComponent>
<PageTitleComponent Title="Quality Evaluation"
                    Description="Here you can add and edit quality evaluation" IconName="QualityEvaluation.png">
</PageTitleComponent>


<form>

    <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
        <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
    </div>


    <div><label class="sub-tile">@GetName("QualityReportType",new QualityEvaluation())</label></div>
    <div>
        <select @onchange="SelectItemDocumentType" class="select-style">

            @if (typeList != null && typeList.Count() > 0)
            {
                <option value="0" selected>Select</option>
            }
            @if (typeList != null)
            {
                @foreach (var item in typeList)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            }
            @if (QualityEvaluation != null && QualityEvaluation.QualityReportType != null)
            {
                <option value="@QualityEvaluation.QualityReportType.Id" selected>@QualityEvaluation.QualityReportType.Name</option>
            }
        </select>
    </div>




    <div class="grid-columns-header grid-columns-6">


        <div><label class="sub-tile">@GetName("SalesDocumentItemsDetailsId",new QualityEvaluation())</label></div>

        <InputTextSelector3 styleCaption="min-width: 27vw;" TItem="TransactionalItem"
                            Id="Vendor"
                            caption="@(transactionalItem.Id !=null ? transactionalItem?.Name:"" )">

        </InputTextSelector3>


        <div><label class="sub-tile">@GetName("InspectionDate",new QualityEvaluation())</label></div>
        <div><input type="date" @bind-value="QualityEvaluation.InspectionDate" class="form-control" /></div>


        <div><label class="sub-tile">@GetName("QuantityToInspect",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="true" TypeInt="true" @bind-bind-ValueDouble="QualityEvaluation.QuantityToInspect"></InputTextDisable>

        <div><label class="sub-tile">@GetName("QuantityInspected",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="true" TypeInt="true" @bind-bind-ValueDouble="QualityEvaluation.QuantityInspected"></InputTextDisable>

        <div><label class="sub-tile">@GetName("QuantityWithIssues",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="true" TypeInt="true" @bind-bind-ValueDouble="QualityEvaluation.QuantityWithIssues"></InputTextDisable>

        <div><label class="sub-tile">@GetName("Pack",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="true" TypeInt="true" @bind-bind-ValueDouble="QualityEvaluation.Pack"></InputTextDisable>


        <div><label class="sub-tile">@GetName("TrafficLightStatus",new QualityEvaluation())</label></div>
        <div>
            <select @onchange="SelectItemTrafficLightStatus" class="select-style">

                @if (trafficLightStatusList != null && trafficLightStatusList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (trafficLightStatusList != null)
                {
                    @foreach (var item in trafficLightStatusList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                @if (trafficLightStatusList != null && QualityEvaluation.TrafficLightStatus != null)
                {
                    <option value="@QualityEvaluation.TrafficLightStatus.Id" selected>@QualityEvaluation.TrafficLightStatus.Name</option>
                }
            </select>
        </div>


        <div><label class="sub-tile">@GetName("ActionToTake",new QualityEvaluation())</label></div>
        <div>
            <select @onchange="SelectItemTrafficLightStatus" class="select-style">

                @if (trafficLightStatusList != null && trafficLightStatusList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (trafficLightStatusList != null)
                {
                    @foreach (var item in trafficLightStatusList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                @if (trafficLightStatusList != null && QualityEvaluation.TrafficLightStatus != null)
                {
                    <option value="@QualityEvaluation.TrafficLightStatus.Id" selected>@QualityEvaluation.TrafficLightStatus.Name</option>
                }
            </select>
        </div>


        <div><label class="sub-tile">@GetName("OverKill",new QualityEvaluation())</label></div>
        <div>
            <SfSwitch @bind-Checked="@QualityEvaluation.OverKill"></SfSwitch>
        </div>



    </div>

    <hr />

    <SfTab Height="250px" CssClass="tab-adaptive" HeaderPlacement="HeaderPosition.Left">
        <TabAnimationSettings>
            <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
            <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
        </TabAnimationSettings>
        <TabItems>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("QualityEvaluationImages",new QualityEvaluation())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="container-item">
                        @if (true)
                        {

                        }
                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("EvaluationParameters",new QualityEvaluation())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="container-item">
                        @if (true)
                        {

                        }
                    </div>
                </ContentTemplate>
            </TabItem>

        </TabItems>
    </SfTab>


</form>




@code {
    [Parameter]
    public string qualityEvaluationId { get; set; }
    [Parameter]
    public string filter { get; set; }



    string alertMsg = "";
    string SearcherValue = "";
    string msg = "";
    bool isLoading = false;
    bool isVisible = false;
    MessageSaveComponent? referAlert;
    TextToSpeech textToSpeech;
    public QualityEvaluation QualityEvaluation = new();

    #region Status

    #endregion Status

    #region Input3
    List<QualityReportType> typeList { get; set; }
    List<QualityTrafficLight> trafficLightStatusList { get; set; }
    TransactionalItem transactionalItem { get; set; }

    #endregion Input3



    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {

        isLoading = true;
        StateHasChanged();
        if (qualityEvaluationId != null)
        {
            QualityEvaluation = await QualityEvaluationServices.GetItemQualityEvaluationById(qualityEvaluationId);
        }

        typeList = await QualityEvaluationServices.GetQualityReportTypeList("all", 1, 20);

        LoadQualityEvaluation();
        isLoading = false;
        StateHasChanged();
    }

    public async void ItemSelected(MenuEventArgs e)
    {
        string msg = Validate();
        if (msg == "")
        {
            StateHasChanged();
            string tile = e.Item != null ? e.Item.Text : "";
            if (tile == "Save")
            {
                LoadQualityEvaluation();
                var result = await QualityEvaluationServices.SaveQualityEvaluation(QualityEvaluation);
                if (result != null)
                {
                    alert("Saved", 0);
                    QualityEvaluation = result;
                }
                else
                {
                    alert("required fields", 1);
                }

            }
        }
        else
        {
            alert("Saved", 1);
        }

        StateHasChanged();

    }






    public void SelectItemDocumentType(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        QualityEvaluation.QualityReportType = typeList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }

    public void SelectItemTrafficLightStatus(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        QualityEvaluation.TrafficLightStatus = trafficLightStatusList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }




    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();


        StateHasChanged();
    }


    //public void EventIdSelectionAndId(QualityEvaluationType item)
    //{
    //    QualityEvaluation.DocumentType = item;
    //}





    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");

    }

    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        alertMsg = _msg;

        StateHasChanged();
    }



    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/QualityEvaluation/{paramFilter}");
        Navigation.NavigateTo($"/QualityEvaluation");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }



    public string Validate()
    {
        string msg = "";

        return msg;
    }


    #region Load

    public void LoadQualityEvaluation()
    {
        if (QualityEvaluation == null) QualityEvaluation = new();
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
