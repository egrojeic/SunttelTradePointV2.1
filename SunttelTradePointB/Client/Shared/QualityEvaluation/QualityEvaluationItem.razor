@page "/QualityEvaluationItem"
@page "/QualityEvaluationItem/{QualityEvaluationId}/{filter}"


@using SunttelTradePointB.Shared.Quality;
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.QualityEvaluationServices.QualityEvaluationServices QualityEvaluationServices
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactionalService;
@inject IJSRuntime Js

<MessageSaveComponent isVisible="isVisible" message="@alertMsg">
</MessageSaveComponent>
<PageTitleComponent Title="Quality Evaluation"
                    Description="Here you can add and edit quality evaluation" IconName="QualityParameters.png">
</PageTitleComponent>


<form>
    <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
            <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

        <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
            </DropDownMenuItems>
        </SfSplitButton>
        </div>

    <div class="grid-columns-header grid-columns-6">


        <div><label class="sub-tile">@GetName("QualityReportType",new QualityEvaluation())</label></div>
        <div>
            <select @onchange="SelectItemDocumentType" class="select-style">

                @if (typeList != null && typeList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (typeList != null)
                {
                    @foreach (var item in typeList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                @if (QualityEvaluation != null && QualityEvaluation.QualityReportType != null)
                {
                    <option value="@QualityEvaluation.QualityReportType.Id" selected>@QualityEvaluation.QualityReportType.Name</option>
                }
            </select>
        </div>

        <div><label class="sub-tile">@GetName("SalesDocumentItemsDetailsId",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="false" TypeInt="false" @bind-ValueString="itemName"></InputTextDisable>

        <div><label class="sub-tile">@GetName("InspectionDate",new QualityEvaluation())</label></div>
        <div><input type="date" @bind-value="QualityEvaluation.InspectionDate" class="form-control" /></div>

        <div><label class="sub-tile">@GetName("QuantityToInspect",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="true" TypeInt="true" @bind-ValueDouble="QualityEvaluation.QuantityToInspect"></InputTextDisable>

        <div><label class="sub-tile">@GetName("QuantityInspected",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="true" TypeInt="true" @bind-ValueDouble="QualityEvaluation.QuantityInspected"></InputTextDisable>

        <div><label class="sub-tile">@GetName("QuantityWithIssues",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="true" TypeInt="true" @bind-ValueDouble="QualityEvaluation.QuantityWithIssues"></InputTextDisable>

        <div><label class="sub-tile">@GetName("Pack",new QualityEvaluation())</label></div>
        <InputTextDisable Enable="true" TypeInt="true" @bind-ValueDouble="QualityEvaluation.Pack"></InputTextDisable>

        <div><label class="sub-tile">@GetName("TrafficLightStatus",new QualityEvaluation())</label></div>
        <div>
            <select @onchange="SelectItemTrafficLightStatus" class="select-style">

                @if (trafficLightStatusList != null && trafficLightStatusList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (trafficLightStatusList != null)
                {
                    @foreach (var item in trafficLightStatusList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                @if (trafficLightStatusList != null && QualityEvaluation.TrafficLightStatus != null)
                {
                    <option value="@QualityEvaluation.TrafficLightStatus.Id" selected>@QualityEvaluation.TrafficLightStatus.Name</option>
                }
            </select>
        </div>


        <div><label class="sub-tile">@GetName("ActionToTake",new QualityEvaluation())</label></div>
        <div>
            <select @onchange="SelectItemTrafficLightStatus" class="select-style">

                @if (trafficLightStatusList != null && trafficLightStatusList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (trafficLightStatusList != null)
                {
                    @foreach (var item in trafficLightStatusList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                @if (trafficLightStatusList != null && QualityEvaluation.TrafficLightStatus != null)
                {
                    <option value="@QualityEvaluation.TrafficLightStatus.Id" selected>@QualityEvaluation.TrafficLightStatus.Name</option>
                }
            </select>
        </div>

        <div><label class="sub-tile">@GetName("OverKill",new QualityEvaluation())</label></div>
        <div>
            <SfSwitch @bind-Checked="@QualityEvaluation.OverKill"></SfSwitch>
        </div>

    </div>

    <hr />

    <SfTab Height="250px" CssClass="tab-adaptive" HeaderPlacement="HeaderPosition.Left">
        <TabAnimationSettings>
            <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
            <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
        </TabAnimationSettings>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("QualityEvaluationImages",new QualityEvaluation())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="container-item">
                        @if (true)
                        {

                            @if (isLoading)
                            {

                                <WaitingProcessIndicator loadingTopic="Quality Evaluation Detail"></WaitingProcessIndicator>

                            }
                            else
                            {
                                  if(QualityEvaluation.Id!=null || true){
                                <div class="detailsTitleContainer" style="width:100%;">
                                    <h3 class="subTitleDetailForm">@GetName("QualityEvaluationImages",new QualityEvaluation())</h3>
                                    <svg @onclick='()=>Add("QualityEvaluationImages")' style="margin-left:20px;" title="Add new Recipe Item" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style " viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                </div>
                                }

                                if (QualityEvaluation.EvaluationParameters != null)
                                {
                                    <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        PageSize="20"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@QualityEvaluation.EvaluationParameters"
                                        TItem="QualityEvaluationDetail"
                                        ColumnWidth="300px"
                                        SelectionMode="DataGridSelectionMode.Single"
                                        LogicalFilterOperator="LogicalFilterOperator.Or"
                                        CellContextMenu="@ShowContextMenuTransactionalItem">
                                        <Columns>

                                            <RadzenDataGridColumn TItem="QualityEvaluation" Property="QualityReportType.Name" Title="@GetName("Parameter", new QualityEvaluationDetail() )" Width="158px" />
                                            <RadzenDataGridColumn TItem="QualityEvaluation" Property="IsPresent" Title="@GetName("IsPresent", new QualityEvaluationDetail() )" Filterable="false" Sortable="false" Width="158px">
                                                <Template>
                                                    @{
                                                        var item = (bool)context.GetType().GetProperty(nameof(QualityEvaluationDetail.IsPresent)).GetValue(context);
                                                        <input type="checkbox" checked="@item" />
                                                    }
                                                </Template>
                                            </RadzenDataGridColumn>

                                        </Columns>
                                    </RadzenDataGrid>
                                }
                            }

                        }
                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("EvaluationParameters",new QualityEvaluation())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="container-item">

                        @if (isLoading)
                        {

                            <WaitingProcessIndicator loadingTopic="Quality Evaluation Images"></WaitingProcessIndicator>

                        }
                        else
                        {
                            if (QualityEvaluation.Id != null || true)
                            {
                            <div class="detailsTitleContainer" style="width:100%;">
                                    <h3 class="subTitleDetailForm">@GetName("EvaluationParameters",new QualityEvaluation())</h3>
                                    <svg @onclick='()=>Add("QualityEvaluationDetailItem")' style="margin-left:20px;" title="Add new Recipe Item" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style " viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>
                            }

                            if (QualityEvaluation.QualityEvaluationImages != null)
                            {
                                <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        PageSize="20"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@QualityEvaluation.QualityEvaluationImages"
                                        TItem="QualityEvaluationPhoto"
                                        ColumnWidth="300px"
                                        SelectionMode="DataGridSelectionMode.Single"
                                        LogicalFilterOperator="LogicalFilterOperator.Or"
                                        CellContextMenu="@ShowContextMenuTransactionalItem">
                                    <Columns>

                                        <RadzenDataGridColumn TItem="QualityEvaluationPhoto" Property="@nameof(QualityEvaluationPhoto.ImageName)" Title="@GetName("ImageName", new QualityEvaluationPhoto() )" Width="158px" />
                                        <RadzenDataGridColumn TItem="QualityEvaluationPhoto" Property="ParameterGroup.Name" Title="@GetName("ParameterGroup", new QualityEvaluationPhoto() )" Width="158px" />

                                    </Columns>
                                </RadzenDataGrid>

                            }
                        }
                    </div>
                </ContentTemplate>
            </TabItem>

        </TabItems>
    </SfTab>


</form>




@code {
    [Parameter]
    public string qualityEvaluationId { get; set; }
    [Parameter]
    public string filter { get; set; }



    string alertMsg = "";
    string SearcherValue = "";
    string msg = "";
    bool isLoading = false;
    bool isVisible = false;
    MessageSaveComponent? referAlert;
    TextToSpeech textToSpeech;
    public QualityEvaluation QualityEvaluation = new();

    #region Status

    #endregion Status

    #region Input3
    List<QualityReportType> typeList { get; set; }
    List<QualityTrafficLight> trafficLightStatusList { get; set; }

    public string itemName { get; set; }

    #endregion Input3



    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {

        isLoading = true;
        StateHasChanged();
        LoadQualityEvaluation();
        if (qualityEvaluationId != null)
        {
            QualityEvaluation = await QualityEvaluationServices.GetItemQualityEvaluationById(qualityEvaluationId);

            if (QualityEvaluation.SalesDocumentItemsDetailsId != null)
            {
                var   transactionalItem = await transactionalService.GetTransactionalItemById(QualityEvaluation.SalesDocumentItemsDetailsId);
                if (transactionalItem != null) itemName = transactionalItem.Name;
            }
        }

        typeList = await QualityEvaluationServices.GetQualityReportTypeList("all", 1, 20);

        LoadQualityEvaluation();
        isLoading = false;
        StateHasChanged();
    }

    public async void ItemSelected(MenuEventArgs e)
    {
        string msg = Validate();
        if (msg == "")
        {
            StateHasChanged();
            string tile = e.Item != null ? e.Item.Text : "";
            if (tile == "Save")
            {
                LoadQualityEvaluation();
                var result = await QualityEvaluationServices.SaveQualityEvaluation(QualityEvaluation);
                if (result != null)
                {
                    alert("Saved", 0);
                    QualityEvaluation = result;
                }
                else
                {
                    alert("No saved", 1);
                }

            }
        }
        else
        {
            alert("Saved", 1);
        }

        StateHasChanged();

    }



    public void SelectItemDocumentType(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        QualityEvaluation.QualityReportType = typeList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }

    public void SelectItemTrafficLightStatus(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        QualityEvaluation.TrafficLightStatus = trafficLightStatusList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }


    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();
        StateHasChanged();
    }

    public void EventIdSelectionAndId(TransactionalItem item)
    {

    }

    #region grid


    void ShowContextMenuTransactionalItem(DataGridCellMouseEventArgs<QualityEvaluationPhoto> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        QualityEvaluationPhoto argObj = (QualityEvaluationPhoto)args.Value;
        Navigation.NavigateTo($"QualityEvaluationPhotoItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    void ShowContextMenuTransactionalItem(DataGridCellMouseEventArgs<QualityEvaluationDetail> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick1">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
        </RadzenMenu>
    );


    void OnMenuItemClick1(MenuItemEventArgs args)
    {
        QualityEvaluationDetail argObj = (QualityEvaluationDetail)args.Value;
        Navigation.NavigateTo($"QualityEvaluationPhotoItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    #endregion grid


    public void Add(string value)
    {
        EventIdSelectionMenuItem(value);
    }


    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");

    }

    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        alertMsg = _msg;
        StateHasChanged();
    }



    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/QualityControlPanel/{paramFilter}");
        Navigation.NavigateTo($"/QualityControlPanel");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }



    public string Validate()
    {
        string msg = "";
        if (QualityEvaluation.QualityReportType == null) msg = "required fields Quality Report Type";
        return msg;
    }


    #region Load

    public void LoadQualityEvaluation()
    {
        if (QualityEvaluation == null) QualityEvaluation = new();
        if (QualityEvaluation.QualityEvaluationImages == null) QualityEvaluation.QualityEvaluationImages = new();
        if (QualityEvaluation.TrafficLightStatus == null) QualityEvaluation.TrafficLightStatus = new();
        if (QualityEvaluation.ActionToTake == null) QualityEvaluation.ActionToTake = new();
        if (QualityEvaluation.EvaluationParameters == null) QualityEvaluation.EvaluationParameters = new();
        if (QualityEvaluation.InspectionDate == DateTime.MinValue) QualityEvaluation.InspectionDate = DateTime.Now;
       
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
