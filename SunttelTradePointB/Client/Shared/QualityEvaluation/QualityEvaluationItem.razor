@page "/QualityEvaluationItem"
@page "/QualityEvaluationItem/{QualityEvaluationId}/{filter}"
@page "/QualityEvaluationItem/{QualityEvaluationId}"


@using SunttelTradePointB.Shared.Quality;
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Sales.CommercialDocument;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@using SunttelTradePointB.Client.Shared.QualityEvaluation.SubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.QualityEvaluationServices.QualityEvaluationServices QualityEvaluationServices
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactionalService;
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }


    .e-tab .e-tab-header.e-vertical .e-toolbar-item .e-tab-text {
        font-size: 12px;
        width: 150px;
    }
</style>


<MessageSaveComponent isVisible="isVisible" message="@alertMsg">
</MessageSaveComponent>


@if (page == "addImage")
{
    <QualityEvaluationPhotoSubComponent AddQualityEvaluationImages="AddQualityEvaluationImages"
                                    PageVisible="Page">

    </QualityEvaluationPhotoSubComponent>
}
else
{
    <form>
        <PageTitleComponent Title="Quality Evaluation"
                        Description="Here you can add and edit quality evaluation" IconName="QualityParameters.png">
        </PageTitleComponent>

        @if (page == "new")
        {

            <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
                <button @onclick="Home" type="button" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>
            </div>

            <div class="container-vertical">
                <div>
                    <div class="grid-columns-header grid-columns-6 style-color">

                        <div><label class="info-text-size">@GetName("Buyer",new CommercialDocument())</label></div>
                        <InputTextDisable Enable="false" TypeInt="true" @bind-ValueString="commercialDocument.Buyer.Name"></InputTextDisable>

                        <div><label class="info-text-size">@GetName("Vendor",new CommercialDocument())</label></div>
                        <InputTextDisable Enable="false" TypeInt="true" @bind-ValueString="commercialDocument.Vendor.Name"></InputTextDisable>

                        <div><label class="info-text-size">@GetName("TrackingNumber",new CommercialDocument())</label></div>
                        <InputTextDisable Enable="false" TypeInt="true" @bind-ValueString="commercialDocument.TrackingNumber"></InputTextDisable>

                        <div><label class="info-text-size">@GetName("ShipDate",new CommercialDocument())</label></div>
                        <div><input type="date" value="@commercialDocument.ShipDate" class="form-control" disabled /></div>

                        <div><label class="info-text-size">@GetName("ArrivalDate",new CommercialDocument())</label></div>
                        <div><input type="date" value="@commercialDocument.ArrivalDate" class="form-control" disabled /></div>


                    </div>
                    <br />
                    <div class="div-container-flex">
                        <div class="grid-columns-header grid-columns-6">

                            <div><label class="info-text-size">@GetName("QualityReportType",new QualityEvaluation())</label></div>
                            <div>
                                <select @onchange="SelectItemDocumentType" class="select-style input-style info-text-size">

                                    @if (typeList != null && typeList.Count() > 0)
                                    {
                                        <option value="0" selected>Select</option>
                                    }
                                    @if (typeList != null)
                                    {
                                        @foreach (var item in typeList)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    }
                                    @if (QualityEvaluation != null && QualityEvaluation.QualityReportType != null)
                                    {
                                        <option value="@QualityEvaluation.QualityReportType.Id" selected>@QualityEvaluation.QualityReportType.Name</option>
                                    }
                                </select>
                            </div>

                            <div><label class="info-text-size">@GetName("ActionToTake",new QualityEvaluation())</label></div>
                            <div>
                                <select @onchange="SelectItemActionToTake" class="select-style info-text-size">

                                    @if (actionToTakeList != null)
                                    {
                                        @foreach (var item in actionToTakeList)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    }

                                    @if (actionToTakeList != null && actionToTakeList.Count() > 0)
                                    {
                                        <option value="0" selected>Select</option>
                                    }

                                    @if (QualityEvaluation != null && QualityEvaluation.ActionToTake != null)
                                    {
                                        <option value="@QualityEvaluation.ActionToTake.Id" selected>@QualityEvaluation.ActionToTake.Name</option>
                                    }
                                </select>
                            </div>

                            <div><label class="info-text-size">@GetName("InspectionDate",new QualityEvaluation())</label></div>
                            <div><input type="date" @bind-value="QualityEvaluation.InspectionDate" class="form-control" /></div>

                            <div><label class="info-text-size">@GetName("QuantityToInspect",new QualityEvaluation())</label></div>
                            <InputTextDisable Enable="true" TypeInt="true" @bind-ValueDouble="QualityEvaluation.QuantityToInspect"></InputTextDisable>

                            <div><label class="info-text-size">@GetName("QuantityInspected",new QualityEvaluation())</label></div>
                            <InputTextDisable Enable="true" TypeInt="true" @bind-ValueDouble="QualityEvaluation.QuantityInspected"></InputTextDisable>

                            <div><label class="info-text-size">@GetName("QuantityWithIssues",new QualityEvaluation())</label></div>
                            <InputTextDisable Enable="true" TypeInt="true" @bind-ValueDouble="QualityEvaluation.QuantityWithIssues"></InputTextDisable>

                            <div><label class="info-text-size">@GetName("Pack",new QualityEvaluation()): @QualityEvaluation.Pack</label></div>
                            <div><label class="info-text-size">@GetName("OverKill",new QualityEvaluation())</label> :  <SfSwitch @bind-Checked="@QualityEvaluation.OverKill"></SfSwitch> </div>


                        </div>


                    </div>
                </div>

                <TrafficLight trafficLight="QualityEvaluation.TrafficLightStatus"
                      trafficLightList="trafficLightStatusList"
                      NameStatus="@QualityEvaluation.TrafficLightStatus.Name"
                      SetTrafficLightStatus="SetTrafficLightStatus">
                </TrafficLight>

            </div>
            <div class="quality-parameter-group">
                @if (qualityParameterGroupList != null)
                {
                    @foreach (var item in qualityParameterGroupList)
                    {
                        <button type="button" class="btn" @onclick="()=>GroupList(item.Id)">
                            @item.Name
                        </button>
                    }
                }
            </div>

            <hr />

            <SfTab Height="250px" CssClass="tab-adaptive" HeaderPlacement="HeaderPosition.Left">
                <TabAnimationSettings>
                    <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                    <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
                </TabAnimationSettings>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName("EvaluationParameters",new QualityEvaluation())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="container-item">

                                @if (isLoading)
                                {

                                    <WaitingProcessIndicator loadingTopic="Quality Evaluation Detail"></WaitingProcessIndicator>

                                }
                                else
                                {

                                    if (QualityEvaluation.EvaluationParameters != null)
                                    {
                                        <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        PageSize="50"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@QualityEvaluation.EvaluationParameters"
                                        TItem="QualityEvaluationDetail"
                                        ColumnWidth="300px"
                                        SelectionMode="DataGridSelectionMode.Single"
                                        LogicalFilterOperator="LogicalFilterOperator.Or"
                                        CellContextMenu="@ShowContextMenuTransactionalItem">
                                            <Columns>

                                                <RadzenDataGridColumn TItem="QualityEvaluationDetail" Property="Parameter.Name" Title="@GetName("Parameter", new QualityEvaluationDetail() )" Width="158px" />

                                            </Columns>
                                        </RadzenDataGrid>
                                        <div class="container-total">
                                            <div class="item">
                                                <label>
                                                    @(
                                                        $"Records: {QualityEvaluation.EvaluationParameters.Count}"
                                                        )
                                                </label>
                                            </div>
                                        </div>

                                    }
                                }


                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName("QualityEvaluationImages",new QualityEvaluation())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="container-item">
                                @if (isLoading)
                                {
                                    <WaitingProcessIndicator loadingTopic="Quality Evaluation Images"></WaitingProcessIndicator>
                                }
                                else
                                {
                                    if (QualityEvaluation.Id != null || true)
                                    {
                                        <div class="detailsTitleContainer" style="width:100%;">
                                            <h3 class="subTitleDetailForm">@GetName("QualityEvaluationImages",new QualityEvaluation())</h3>
                                            <svg @onclick='()=>Page("addImage")' style="margin-left:20px;" title="Add new Recipe Item" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style " viewBox="0 0 16 16">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                            </svg>
                                        </div>
                                    }

                                    if (QualityEvaluation.QualityEvaluationImages != null)
                                    {
                                        <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        PageSize="50"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@QualityEvaluation.QualityEvaluationImages"
                                        TItem="QualityEvaluationPhoto"
                                        ColumnWidth="300px"
                                        SelectionMode="DataGridSelectionMode.Single"
                                        LogicalFilterOperator="LogicalFilterOperator.Or"
                                        CellContextMenu="@ShowContextMenuTransactionalItem">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="QualityEvaluationPhoto" Property="ParameterGroup.Name" Title="@GetName("ParameterGroup", new QualityEvaluationPhoto() )" Width="158px" />
                                                <RadzenDataGridColumn TItem="QualityEvaluationPhoto" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="60px">
                                                    <Template Context="data">
                                                        <RadzenImage Path="@(GetFullPathPhoto(data.ImageName))" style="width: 40px; height: 40px; border-radius: 8px;" />
                                                    </Template>
                                                </RadzenDataGridColumn>
                                            </Columns>
                                        </RadzenDataGrid>
                                        <div class="container-total">
                                            <div class="item">
                                                <label>
                                                    @(
                                                        $"Records: {QualityEvaluation.QualityEvaluationImages.Count}"
                                                        )
                                                </label>
                                            </div>
                                        </div>

                                    }
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>

                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName("Notes",new CommercialDocument())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="container-item">
                                <div><label class="info-text-size">@GetName("Notes",new CommercialDocument())</label></div>
                                <textarea @bind="commercialDocument.Notes" disabled></textarea>
                            </div>
                        </ContentTemplate>
                    </TabItem>

                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName("SpecsNotes",new CommercialDocument())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="container-item">
                                <div><label class="info-text-size">@GetName("SpecsNotes",new CommercialDocument())</label></div>
                                <textarea @bind="commercialDocument.SpecsNotes" disabled></textarea>
                            </div>
                        </ContentTemplate>
                    </TabItem>

                </TabItems>
            </SfTab>
        }


        @if (page == "group")
        {

            <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
                <button @onclick='()=>Page("new")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
            </div>

            <div class="container-parameter-list">
                <div class="list">
                    @if (qualityAssuranceParameterList != null && qualityAssuranceParameterList.Count() > 0)
                    {
                        @foreach (var item in qualityAssuranceParameterList)
                        {
                            <div class="item">
                                <input type="checkbox" @onclick="()=>checkboxList(item.Id)" checked='@(checkboxValidation(@item.Id))'><label>@item.Name</label>
                            </div>
                        }
                    }
                    else
                    {
                        <label>
                            there are no parameters
                        </label>
                    }

                </div>
            </div>
        }

    </form>
}



@code {
    [Parameter]
    public string qualityEvaluationId { get; set; }
    [Parameter]
    public EventCallback PageHome { get; set; }
    [Parameter]
    public string filter { get; set; }



    string alertMsg = "";
    string SearcherValue = "";
    string msg = "";
    string page = "new";
    bool isLoading = false;
    bool isVisible = false;
    bool checkboxUpdate = true;
    MessageSaveComponent? referAlert;
    TextToSpeech textToSpeech;
    public QualityEvaluation QualityEvaluation = new();

    #region Status

    #endregion Status

    #region Input3
    List<QualityReportType> typeList { get; set; }
    List<QualityTrafficLight> trafficLightStatusList { get; set; }
    List<QualityAction> actionToTakeList { get; set; }
    public CommercialDocument commercialDocument = new();
    List<QualityParameterGroup>? qualityParameterGroupList { get; set; }
    List<QualityAssuranceParameter>? qualityAssuranceParameterList { get; set; }
    public string itemName { get; set; }

    #endregion Input3



    protected override void OnParametersSet()
    {

        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        LoadQualityEvaluation();
        if (qualityEvaluationId != null)
        {
            QualityEvaluation = await QualityEvaluationServices.GetItemQualityEvaluationById(qualityEvaluationId);

            if (QualityEvaluation != null && QualityEvaluation.SalesDocumentItemsDetailsId != null)
            {
                var transactionalItem = await transactionalService.GetTransactionalItemById(QualityEvaluation.SalesDocumentItemsDetailsId);
                if (transactionalItem != null) itemName = transactionalItem.Name;
            }
        }
        qualityParameterGroupList = await QualityEvaluationServices.GetQualityParameterGrouplList("all", 1, 20);
        LoadQualityEvaluation();
        StateHasChanged();
        LoadParameter();

    }




    public async Task LoadParameter()
    {

        isLoading = true;
        StateHasChanged();
        actionToTakeList = await QualityEvaluationServices.GetQualityActionList("all", 1, 80);
        trafficLightStatusList = await QualityEvaluationServices.GetQualityTrafficLightList("all", 1, 20);
        typeList = await QualityEvaluationServices.GetQualityReportTypeList("all", 1, 20);
        qualityAssuranceParameterList = await QualityEvaluationServices.GetQualityAssuranceParameterlList("all", 1, 20);
        isLoading = false;
        StateHasChanged();
    }

    public async void ItemSelected(MenuEventArgs e)
    {
        string msg = Validate();
        if (msg == "")
        {
            StateHasChanged();
            string tile = e.Item != null ? e.Item.Text : "";
            if (tile == "Save")
            {
                LoadQualityEvaluation();
                var result = await QualityEvaluationServices.SaveQualityEvaluation(QualityEvaluation);
                if (result != null)
                {
                    alert("Saved", 0);
                    QualityEvaluation = result;
                }
                else
                {
                    alert("No saved", 1);
                }

            }
        }
        else
        {
            alert("Saved", 1);
        }

        StateHasChanged();

    }

    public void AddQualityEvaluationImages(QualityEvaluationPhoto qualityEvaluationPhoto)
    {
        if (QualityEvaluation.QualityEvaluationImages == null) QualityEvaluation.QualityEvaluationImages = new();

        QualityEvaluation.QualityEvaluationImages.Add(qualityEvaluationPhoto);
        StateHasChanged();
    }


    public async void checkboxList(string Id)
    {
        if (checkboxUpdate)
        {
            checkboxUpdate = false;
            var item = qualityAssuranceParameterList.Where(s => s.Id == Id).FirstOrDefault();
            if (QualityEvaluation == null) QualityEvaluation = new();
            if (QualityEvaluation.EvaluationParameters == null) QualityEvaluation.EvaluationParameters = new();

            if (item != null)
            {
                var itemTemp = QualityEvaluation.EvaluationParameters.Where(s => s.Parameter.Id == item.Id).FirstOrDefault();

                if (itemTemp != null)
                {
                    QualityEvaluation.EvaluationParameters.Remove(itemTemp);
                }
                else
                {
                    QualityEvaluation.EvaluationParameters.Add(new QualityEvaluationDetail
                            {
                                Parameter = item

                            });
                }
            }

            checkboxUpdate = true;

            StateHasChanged();
        }
    }


    public bool checkboxValidation(string Id)
    {

        if (QualityEvaluation.EvaluationParameters != null)
        {
            var itemTemp = QualityEvaluation.EvaluationParameters.Where(s => s.Parameter.Id == Id).FirstOrDefault();

            if (itemTemp != null)
            {
                return true;
            }
            else
            {
                return false;

            }
        }
        else
        {
            return false;
        }

    }

    public void SetTrafficLightStatus(String Id)
    {
        QualityEvaluation.TrafficLightStatus = trafficLightStatusList.Where(s => s.Id == Id).FirstOrDefault();
        LoadQualityEvaluation();
        StateHasChanged();
    }


    public void SelectItemDocumentType(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        QualityEvaluation.QualityReportType = typeList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        StateHasChanged();
    }

    public void SelectItemActionToTake(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        QualityEvaluation.ActionToTake = actionToTakeList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        StateHasChanged();
    }


    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();

        StateHasChanged();
    }

    public void EventIdSelectionAndId(TransactionalItem item)
    {

    }

    public async void GroupList(string Id)
    {
        await LoadParameter();
        qualityAssuranceParameterList = qualityAssuranceParameterList.Where(s => s.ParameterGroup.Id == Id).ToList();
        Page("group");
    }

    public string GetFullPathPhoto(string imgName)
    {
        return UIClientGlobalVariables._pathQualityEvaluationImages + "/" + imgName;
    }

    public void Page(string value)
    {
        page = value;
        StateHasChanged();
    }


    #region grid


    void ShowContextMenuTransactionalItem(DataGridCellMouseEventArgs<QualityEvaluationPhoto> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
        );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        QualityEvaluationPhoto argObj = (QualityEvaluationPhoto)args.Value;
        Navigation.NavigateTo($"QualityEvaluationPhotoItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    void ShowContextMenuTransactionalItem(DataGridCellMouseEventArgs<QualityEvaluationDetail> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick1">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick1(MenuItemEventArgs args)
    {
        QualityEvaluationDetail argObj = (QualityEvaluationDetail)args.Value;
        Navigation.NavigateTo($"QualityEvaluationPhotoItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    #endregion grid


    //public void Add(string value)
    //{
    //    EventIdSelectionMenuItem(value);
    //}


    //public void EventIdSelectionMenuItem(string name)
    //{
    //    Js.InvokeAsync<object>("open", name, "_blank");

    //}

    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        alertMsg = _msg;
        StateHasChanged();
    }

    public void Home()
    {
        // string paramFilter = filter != null ? filter : "";
        //if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/QualityControlPanel/{paramFilter}");
        PageHome.InvokeAsync("grid");
        // Navigation.NavigateTo($"/QualityControlPanel");
        StateHasChanged();
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }



    public string Validate()
    {
        string msg = "";
        if (QualityEvaluation.QualityReportType == null) msg = "required fields Quality Report Type";
        return msg;
    }


    #region Load

    public void LoadQualityEvaluation()
    {
        if (QualityEvaluation == null) QualityEvaluation = new();
        if (QualityEvaluation.QualityEvaluationImages == null) QualityEvaluation.QualityEvaluationImages = new();
        if (QualityEvaluation.TrafficLightStatus == null) QualityEvaluation.TrafficLightStatus = new();
        if (QualityEvaluation.ActionToTake == null) QualityEvaluation.ActionToTake = new();
        if (QualityEvaluation.EvaluationParameters == null) QualityEvaluation.EvaluationParameters = new();
        if (QualityEvaluation.InspectionDate == DateTime.MinValue) QualityEvaluation.InspectionDate = DateTime.Now;

        if (commercialDocument == null) commercialDocument = new();
        if (commercialDocument.Buyer == null) commercialDocument.Buyer = new();
        if (commercialDocument.Buyer.Name == null) commercialDocument.Buyer.Name = "";

        if (commercialDocument.Vendor == null) commercialDocument.Vendor = new();
        if (commercialDocument.Vendor.Name == null) commercialDocument.Vendor.Name = "";


    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
