@page "/QualityEvaluationPhotoItem"
@page "/QualityEvaluationPhotoItem/{qualityEvaluationPhotoId}/{filter}"


@using SunttelTradePointB.Shared.Quality;
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.QualityEvaluationServices.QualityEvaluationServices QualityEvaluationServices
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactionalService;
@inject IJSRuntime Js

<MessageSaveComponent isVisible="isVisible" message="@alertMsg">
</MessageSaveComponent>
<PageTitleComponent Title="Quality Evaluation Detail"
                    Description="Here you can add and edit quality evaluation detail" IconName="QualityParameters.png">
</PageTitleComponent>


<form>
    <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
        <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

        <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
            </DropDownMenuItems>
        </SfSplitButton>
    </div>

    <div class="grid-columns-header grid-columns-6">

        <div><label class="sub-tile">@GetName("ImageName",new QualityEvaluationPhoto())</label></div>
        <InputTextDisable Enable="true" TypeInt="false" @bind-ValueString="qualityEvaluationPhoto.ImageName"></InputTextDisable>
        
        <div><label class="sub-tile">@GetName("ImageName",new QualityEvaluationPhoto())</label></div>
        <InputTextDisable Enable="true" TypeInt="false" @bind-ValueString="qualityEvaluationPhoto.Notes"></InputTextDisable>


        <div><label class="sub-tile">@GetName("ParameterGroup",new QualityEvaluationPhoto())</label></div>
        <InputTextSelector3 styleCaption="width:180px" style="right:-100px;" TItem="QualityParameterGroup"
                            Id="Season"
                            caption="@(qualityEvaluationPhoto.ParameterGroup !=null ? qualityEvaluationPhoto.ParameterGroup?.Name:"" )"
                            Items="qualityParameterGroupList">
        </InputTextSelector3>
             
    </div>

    <hr />



</form>




@code {
    [Parameter]
    public string qualityEvaluationPhotoId { get; set; }
    [Parameter]
    public string filter { get; set; }



    string alertMsg = "";
    string SearcherValue = "";
    string msg = "";
    bool isLoading = false;
    bool isVisible = false;
    MessageSaveComponent? referAlert;
    TextToSpeech textToSpeech;
    public QualityEvaluationPhoto qualityEvaluationPhoto = new();

    #region Status

    #endregion Status

    #region Input3

    List<QualityParameterGroup> qualityParameterGroupList { get; set; }


    #endregion Input3



    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {

        isLoading = true;
        StateHasChanged();
        LoadQualityEvaluation();
        if (qualityEvaluationPhotoId != null)
        {
            // qualityEvaluationDetail = await QualityEvaluationServices.GetQualityActionById(qualityEvaluationDetaild);

        }

        LoadQualityEvaluation();
        isLoading = false;
        StateHasChanged();
    }

    public async void ItemSelected(MenuEventArgs e)
    {
        string msg = Validate();
        if (msg == "")
        {
            StateHasChanged();
            string tile = e.Item != null ? e.Item.Text : "";
            if (tile == "Save")
            {
                LoadQualityEvaluation();
                //var result = false; //await QualityEvaluationServices.SaveQualityPaction(qualityEvaluationDetail);
                //if (result != null)
                //{
                //    alert("Saved", 0);
                //    qualityEvaluationDetail = result;
                //}
                //else
                //{
                //    alert("No saved", 1);
                //}

            }
        }
        else
        {
            alert("Saved", 1);
        }

        StateHasChanged();

    }





    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        alertMsg = _msg;
        StateHasChanged();
    }



    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/QualityEvaluationItem/{paramFilter}");
        Navigation.NavigateTo($"/QualityEvaluationItem");
    }



    public string Validate()
    {
        string msg = "";

        return msg;
    }


    #region Load

    public void LoadQualityEvaluation()
    {
        if (qualityEvaluationPhoto == null) qualityEvaluationPhoto = new();

    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
