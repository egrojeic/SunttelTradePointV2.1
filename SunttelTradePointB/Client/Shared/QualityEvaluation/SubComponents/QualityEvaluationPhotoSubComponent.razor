@page "/QualityEvaluationPhotoItem"
@page "/QualityEvaluationPhotoItem/{qualityEvaluationPhotoId}/{filter}"


@using SunttelTradePointB.Shared.Quality;
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.QualityEvaluationServices.QualityEvaluationServices QualityEvaluationServices
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactionalService;
@inject IJSRuntime Js

<MessageSaveComponent isVisible="isVisible" message="@alertMsg">
</MessageSaveComponent>
<PageTitleComponent Title="Quality Evaluation Detail"
                    Description="Here you can add and edit quality evaluation detail" IconName="QualityParameters.png">
</PageTitleComponent>

@if (page == "new")
{
    <form>
        <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
            <button @onclick='()=>PageVisibleMode("new")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Add" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>
        </div>

        <div class="grid-columns-header grid-columns-6">

            <div><label class="info-text-size">@GetName("ParameterGroup",new QualityEvaluationPhoto())</label></div>
          
            <div>
                <select @onchange="SelectItemParameterGroup" class="select-style">

                    @if (qualityParameterGroupList != null && qualityParameterGroupList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @if (qualityParameterGroupList != null)
                    {
                        @foreach (var item in qualityParameterGroupList)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                    @if (qualityEvaluationPhoto != null && qualityEvaluationPhoto.ParameterGroup != null)
                    {
                        <option value="@qualityEvaluationPhoto.ParameterGroup.Id" selected>@qualityEvaluationPhoto.ParameterGroup.Name</option>
                    }
                </select>
            </div>


            <div><label class="info-text-size">Add image</label></div>
            <img @onclick='()=>Page("img")' class="btn-img" src="@(qualityEvaluationPhoto.ImageName !=null ?GetFullPathPhoto(qualityEvaluationPhoto.ImageName):"/images//add-image.png")">

        </div>


        <hr />



    </form>
}

@if (page == "img")
{
    <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
        <button @onclick='()=>Page("new")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
    </div>
    <SunttelTradePointB.Client.Shared.EntityShareComponents.ActorImage Id="64085f220314820de346988b"
                                                                   uploadingFileType="2"
                                                                   BtnBackEnable="false"
                                                                   EventCallbackNameImg="SetIcoGroup"
                                                                   EventCallbackOpenClosedPage="OpentPage"
                                                                   Page="addIco" Component="true">
    </SunttelTradePointB.Client.Shared.EntityShareComponents.ActorImage>

}




@code {
    [Parameter]
    public string qualityEvaluationPhotoId { get; set; }
    [Parameter]
    public string filter { get; set; }
    [Parameter]
    public EventCallback<QualityEvaluationPhoto> AddQualityEvaluationImages { get; set; }
    [Parameter]
    public EventCallback<string> PageVisible { get; set; }

    string page = "new";
    string alertMsg = "";
    string SearcherValue = "";
    string msg = "";
    bool isLoading = false;
    bool isVisible = false;
    MessageSaveComponent? referAlert;
    TextToSpeech textToSpeech;
    public QualityEvaluationPhoto qualityEvaluationPhoto = new();

    #region Status

    #endregion Status

    #region Input3

    List<QualityParameterGroup> qualityParameterGroupList { get; set; }


    #endregion Input3



    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {

        isLoading = true;
        StateHasChanged();
        LoadQualityEvaluation();
        if (qualityEvaluationPhotoId != null)
        {
           // qualityEvaluationDetail = await QualityEvaluationServices.GetQualityActionById(qualityEvaluationDetaild);
        }
        qualityParameterGroupList = await QualityEvaluationServices.GetQualityParameterGrouplList("all", 1, 40);
        LoadQualityEvaluation();
        isLoading = false;
        StateHasChanged();
    }

    public async void ItemSelected(MenuEventArgs e)
    {
        string msg = Validate();
        if (msg == "")
        {
            StateHasChanged();
            string tile = e.Item != null ? e.Item.Text : "";
            if (tile == "Add")
            {
                LoadQualityEvaluation();
                await AddQualityEvaluationImages.InvokeAsync(qualityEvaluationPhoto);
                alert("Saved", 0);
            }
        }
        else
        {
            alert("No saved", 1);
        }

        StateHasChanged();

    }

    public void SelectItemParameterGroup(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        qualityEvaluationPhoto.ParameterGroup = qualityParameterGroupList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
        StateHasChanged();
    }

  

    public string GetFullPathPhoto(string imgName)
    {
        return UIClientGlobalVariables.PathTransactionalItemsImages + "/" + imgName;
    }

    protected void SetIcoGroup(string value)
    {
        qualityEvaluationPhoto.ImageName = value;
        StateHasChanged();
    }
    protected void OpentPage(string page)
    {

        StateHasChanged();
    }
    protected void ClosedPage(string page)
    {

        StateHasChanged();
    }

    private void Page(string name)
    {
        page = name;
        StateHasChanged();
    }
    
    
    private void PageVisibleMode(string name)
    {
        PageVisible.InvokeAsync(name);
        StateHasChanged();
    }

    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        alertMsg = _msg;
        StateHasChanged();
    }



    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/QualityEvaluationItem/{paramFilter}");
        Navigation.NavigateTo($"/QualityEvaluationItem");
    }



    public string Validate()
    {
        string msg = "";
        if (qualityEvaluationPhoto == null) msg = "You must fill in all the information";
        if (qualityEvaluationPhoto.ImageName == null) msg = "You must fill in all the information, image";
        return msg;
    }


    #region Load

    public void LoadQualityEvaluation()
    {
        if (qualityEvaluationPhoto == null) qualityEvaluationPhoto = new();

    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
