@using SunttelTradePointB.Shared.Communications
@inject CommunicationService communicationService


<div class="content-msg">
    @if (modeMsg == "messageHistory" )
    {      
        btnBackMsg = true;
    }
    @foreach (var msg in communicationsMessages)
    {
        @if (msg.SenderEntity == null) msg.SenderEntity = new();
        @if (msg.SenderEntity.Id != null)
        {

            <div class="msg-responder">
              
                @{
                    if (msg.ParentMessageId != null && modeMsg != "messageHistory")
                    {

                        <ChatMsg msg="@GetMsgResponder(msg.ParentMessageId)"
                             communicationsMessages="@communicationsMessages"
                             SetResponder="SetResponder"
                             countMsg="@(GetCountMsg(GetMsgResponder(msg.ParentMessageId)))"
                             SetMsgRecordViewModel="SetMsgRecordView" ChildrenMessage="true">
                        </ChatMsg>

                    }
                }


                @{
                    if (modeMsg == "messageHistory")
                {
                    @*class="messageHistory"*@
                    <div >
                       @if (btnBackMsg)
                        {
                                <button class="color-btn btn-back-msg "  @onclick="ToBackMsgHistory" ><i class="fa-sharp fa-solid fa-circle-arrow-left"></i</button>
                                btnBackMsg = false;
                            }
                        <ChatMsg msg="@msg"
                                 communicationsMessages="@communicationsMessages"
                                 SetResponder="SetResponder"
                                 SetMsgRecordViewModel="SetMsgRecordView"
                                  countMsg="@(GetCountMsg(msg.Id))"
                                 viewHistory="true"
                        style="box-shadow: 0px 0px 5px">
                        </ChatMsg>
                    </div>
                   
                }
                else
                {
                   
                    <ChatMsg msg="@msg"
                             communicationsMessages="@communicationsMessages"
                             SetResponder="SetResponder"
                             SetMsgRecordViewModel="SetMsgRecordView"
                              countMsg="@(GetCountMsg(msg.Id))"
                             ChildrenMessage="true"
                   style="box-shadow: 0px 0px 5px"
                  >
                    </ChatMsg>
                   
                }
               
                }

            </div>




        }
    }
    @{modeMsg="";}


</div>



@code {
    [Parameter]
    public EventCallback<CommunicationsMessage> TextMessageChanged { get; set; }
    [Parameter]
    public List<CommunicationsMessage> communicationsMessages { get; set; } = new();
    [Parameter]
    public EventCallback<CommunicationsMessage> SetMsgResponder { get; set; }
    [Parameter]
    public EventCallback<CommunicationsMessage> SetMsgRecord { get; set; }
    [Parameter]
    public string modeMsg { get; set; }


    public Stack<CommunicationsMessage> communicationsMessagesRecord { get; set; } = new();
    public CommunicationsMessage communicationsMessageRecord { get; set; } = new();


    string SelectionId = "";
    string SenderEntityId = "1";
    string pathimages = "";
    bool viewMenu1 = true;   
    bool communicationsMessagesRecordStatusBack = true;
    bool btnBackMsg = true;

    protected override void OnInitialized()
    {
        LoadObj();
        SenderEntityId = UIClientGlobalVariables.EntityUserId;

        // communicationsMessages = (from m in communicationsMessages orderby m.SendDateTime.Day ascending orderby m.SendDateTime.Hour ascending orderby m.SendDateTime.Minute ascending orderby m.SendDateTime.Second ascending select m).ToList();

        pathimages = UIClientGlobalVariables.PathEntityImages + "/";
        string g = modeMsg;
    }


    protected override void OnParametersSet()
    {

    }

    public void ViewModalMenu(string id, string _reques)
    {
        SelectionId = id;
        if (_reques == "menu-1") viewMenu1 = true;

    }

    public string GetColorMessageIconName(string item)
    {
        if (item == "warning") { return "#ff8040"; }
        if (item == "danger") { return "#ff0000"; }
        if (item == "success") { return "#80ff00"; }
        return "#00ff00";
    }

    public void SetColorMessageIconName(string value, string id)
    {
        foreach (var item in communicationsMessages)
        {
            if (id == item.Id) item.MessageIconName = value;
        }
        StateHasChanged();
    }

    public void SetResponder(string? Id)
    {
        CommunicationsMessage msg = null;
        if (Id != null) msg = communicationsMessages.Where(s => s.Id == Id).FirstOrDefault();        
        if (msg != null) SetMsgResponder.InvokeAsync(msg);
        if( communicationsMessages !=null &&  communicationsMessages.Count()>0)SetMsgRecordView(msg.Id);

    }

    public void SetMsgRecordView(string? Id)
    {
        CommunicationsMessage msg = null;
        if (Id != null) msg = communicationsMessages.Where(s => s.Id == Id).FirstOrDefault();
        if (msg != null) communicationsMessagesRecord.Push(msg);
        modeMsg = "messageHistory";
        SetMsgRecord.InvokeAsync(msg);
    }
    public void ToBackMsgHistory()
    {
        CommunicationsMessage msg = null;
        if(communicationsMessagesRecordStatusBack)communicationsMessagesRecord.Pop();
        if (communicationsMessagesRecord !=null && communicationsMessagesRecord.Count() > 0)
        {
            msg = communicationsMessagesRecord.Pop();
            communicationsMessagesRecordStatusBack = false;
        }
        else
        {
            communicationsMessagesRecord.Clear();
        }
        modeMsg = "messageHistory";
        SetMsgRecord.InvokeAsync(msg);
    }

    public CommunicationsMessage GetMsgResponder(string? Id)
    {
        CommunicationsMessage msg = null;
        if (Id != null) msg = communicationsMessages.Where(s => s.Id == Id).FirstOrDefault();
        return msg;
    }

    public int GetCountMsg(string msgId)
    {
        int count = 0;
        if(communicationsMessages!=null)  count =  communicationsMessages.Where(s => s.ParentMessageId !=null && s.ParentMessageId.Trim() == msgId.Trim()).ToList().Count();

        return count;
    }

     public int GetCountMsg(CommunicationsMessage msg)
    {
        int count = 0;
        if(communicationsMessages!=null && msg!=null)  count =  communicationsMessages.Where(s => s.ParentMessageId !=null && s.ParentMessageId.Trim() == msg.Id.Trim()).ToList().Count();

        return count;
    }

    public void LoadObj()
    {
        if (communicationsMessages == null) communicationsMessages = new();
    }

}

