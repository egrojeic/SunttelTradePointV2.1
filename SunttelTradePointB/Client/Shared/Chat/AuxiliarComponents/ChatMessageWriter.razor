@using Syncfusion.Blazor.Inputs
@using SunttelTradePointB.Shared.Communications
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject CommunicationService communicationService



<div class="content">
    @if (msgResponder != null && msgResponder.Message!=null )
    {
       
        <div class="msg-responder"  style="display:@(msgResponder.Message!=""?"block":"none");">
            <p> <img @onclick='()=>ClosedAlert("responder")' class="ico-to-closed" src="/images//close.svg"> 
                @(msgResponder.SenderEntity!=null?(msgResponder.SenderEntity.Name != null ? msgResponder.SenderEntity.Name : ""):"")</p>
            <p>@(msgResponder.Message != null ? msgResponder.Message:"")</p>
        </div>
    }
    <div class="sub-content">

        @if (msg != "")
        {
            <div class="msg" @onclick='()=>ClosedAlert("alert")' style="display:@(msg!=""?"block":"none");">@msg</div>
        }

        <div class="content-input">

            <SfTextBox @ref="input" Placeholder="Type a message"
                       Enabled="@(groupEnable.Id!=null)"
                       Multiline="true"
                       @bind-Value="message"
                       @oninput="OnTyping"
                       CssClass="input-text">
            </SfTextBox>

        </div>
        <div class="content-img">
            <img @onclick="SendMsg" src="/images//send.png" />
        </div>

    </div>
</div>


@code {
    [Parameter]
    public EventCallback<CommunicationsMessage> TextMessageChanged { get; set; }
    [Parameter]
    public List<CommunicationsMessage> communicationsMessages { get; set; } = new();
    [Parameter]
    public EventCallback<string> EventCallRefresh { get; set; }
    [Parameter]
    public ChannelCommunicationsGroup groupEnable { get; set; } = new();
    [Parameter]
    public CommunicationsMessage msgResponder { get; set; } 
    [Parameter]
    public EventCallback<CommunicationsMessage> SetMsgResponder { get; set; }

    public CommunicationsMessage communicationsMessage { get; set; } = new();



    SfTextBox? input;
    bool modeEnter = false;
    bool onWrite = true;

    string message = "";
    string msg = "";
    string enter = "";
    protected override void OnParametersSet()
    {
        if (groupEnable.Id != null) msg = "";
        var f = communicationsMessage;
        StateHasChanged();
    }

    protected async override void OnInitialized()
    {
        if (communicationService.communicationsMessages == null) communicationService.communicationsMessages = new();
        string n = UIClientGlobalVariables.UserSkinImage;
        StateHasChanged();
        onWrite = true;


    }

    public async void SendMsg()
    {
        Loading();
        ClosedAlert("alert");
        communicationsMessage = new CommunicationsMessage()
            {
                MessageTypeId = CommunicationsMessageType.ChatMessage,
                Message = message,
                ParentMessageId = msgResponder.Id,
                SenderEntity = new EntityNodeCommunications
                {
                    Id = UIClientGlobalVariables.EntityUserId != null ? (UIClientGlobalVariables.EntityUserId != "" ? UIClientGlobalVariables.EntityUserId : "000000000000000000000001") : "000000000000000000000001",
                    Name = UIClientGlobalVariables.UserName != null ? (UIClientGlobalVariables.UserName != "" ? UIClientGlobalVariables.UserName : "Name") : "Name",
                    SkinImageName = UIClientGlobalVariables.UserSkinImage != null ? (UIClientGlobalVariables.UserSkinImage != "" ? UIClientGlobalVariables.UserSkinImage : null) : null
                },
                DestinyGroupChannel = new EntityNodeCommunications
                {
                    Id = groupEnable.Id != null ? groupEnable.Id : "",
                    SkinImageName = groupEnable.SkinImageName,
                    Name = groupEnable.Name != null ? groupEnable.Name : "Group"
                }

            };

        msg = Validationbj();

        if (onWrite && message != null && message != "" && msg == "")
        {
            onWrite = false;
            TextMessageChanged.InvokeAsync(communicationsMessage);

            communicationsMessage = new();

            StateHasChanged();
            ClosedAlert("responder");
            onWrite = true;
            message = "";
            message =
            enter = "";
        }

    }

    private string Validationbj()
    {
        if (communicationsMessage.Message == null || communicationsMessage.Message == "") msg = "Required message";
        if (groupEnable == null || groupEnable.Id == null) { msg = " You must select a group "; }
        return msg;
    }

    private void OnTyping(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {

        if (args != null)
        {
            message = args.Value.ToString();
            enter = args.Value.ToString();
            if (message.Contains("."))
            {
                if (message.Contains("\n".ToString()))
                {
                    SendMsg();

                }
            }
        }

    }

    public void ClosedAlert(string value)
    {
        if (value == "alert") msg = "";
        if (value == "responder") { msgResponder.Message = ""; msgResponder.Id = null; msgResponder.Message = ""; };
        SetMsgResponder.InvokeAsync(msgResponder);
       
        StateHasChanged();
    }

    private void Loading()
    {
        //if (communicationsMessages == null) communicationsMessages = new();
        if (communicationsMessage.SenderEntity == null) communicationsMessage.SenderEntity = new();
        if (communicationsMessage.DestinyGroupChannel == null) communicationsMessage.DestinyGroupChannel = new();
        if (groupEnable == null) groupEnable = new();
    }


    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {


        }

    }

    public void KeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == " ") modeEnter = true;


        if (args.Key == "Enter")
        {

            communicationsMessages.Add(communicationsMessage);
            TextMessageChanged.InvokeAsync(communicationsMessage);
            //  communicationsMessage = new();

            modeEnter = false;
        }

    }



}
