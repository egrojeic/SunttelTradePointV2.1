@page "/NewGroup"
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Shared.Communications
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Grids
@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive


<MessageSaveComponent isVisible="@isVisible" message="@msg">

</MessageSaveComponent>


@if (modeForm)
{
    <div class="conten-vertical-center">
        <div class="content grid-columns-2 width box-shadow-mode">
            <div>
                <label class="control-label col-md-12 text-dark">Group Name</label>
            </div>
            <div>
                <input type="text" class="form-control" @bind-value="channelCommunicationsGroup.Name" required />
            </div>
            <div>
                <label class="control-label col-md-12 .text-dark ">@GetName("Participants", new ChannelCommunicationsGroup())</label>
            </div>
          
                <InputTextSelector3 TItem="EntityActor"
                                Id="Participant"
                                EventSearcherValueAndId="EventSearcherValueAndId"
                                EventIdSelectionAndId="SelectionMade"
                                Items="entityActorList">
                </InputTextSelector3>
          
        </div>

        @if (@channelCommunicationsGroup.Participants != null)
        {
            <div class="flex-horizontal-center ">

                <RadzenDataGrid AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowAlternatingRows="true"
                        FilterMode="FilterMode.Advanced"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true"
                        AllowPaging="true"
                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        Data="entityActorList"
                        TItem="EntityActor"
                        ColumnWidth="100%"
                        SelectionMode="DataGridSelectionMode.Single"
                        LogicalFilterOperator="LogicalFilterOperator.Or"
                        CellContextMenu="@ShowContextMenuWithContent"
                        PageNumbersCount="100"
                        PageSize="50">

                    <Columns>
                        <RadzenDataGridColumn TItem="EntityActor" Property="EntityActor.Name" Title="@GetName("Name", new AtomConcept())" Width="80px" />
                        <RadzenDataGridColumn TItem="EntityActor" Property="EntityActor.Code" Title="@GetName("Code", new AtomConcept())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                        <RadzenDataGridColumn TItem="EntityActor" Property="EntityActor.Name" Title="@GetName( "FullClassName", new EntityActor())" Width="80px" />
                        <RadzenDataGridColumn TItem="EntityActor" Property="EntityActor.Status" Title="@GetName("Status", new LabelStyle())" Width="180px" TextAlign="Radzen.TextAlign.Center" />

                    </Columns>
                </RadzenDataGrid>


            </div>
        }

        <div class="content-img">
            <a @onclick='()=>ClosedPage("addIco")'>             
                <img class="img" src="@( channelCommunicationsGroup.SkinImageName !=null ? pathimages  + channelCommunicationsGroup.SkinImageName:"/images//defaultImage.png")" />
            </a>
            <div> <label class="control-label col-md-12">@GetName("SkinImageName", new EntityNodeCommunications()) </label></div>
        </div>

        <div class="py-2">
            <button type="button" @onclick="Save" class="size-btn color-btn" style="float:right"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
            <button type="button" class="btn" style="float:right" @onclick='()=>SetNewPage("")'><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
        </div>
    </div>
}
else
{
    <SunttelTradePointB.Client.Shared.EntityShareComponents.ActorImage Id="64085f220314820de346988b"
                                                                   EventCallbackNameImg="SetIcoGroup"
                                                                   EventCallbackOpenClosedPage="OpentPage"
                                                                   Page="addIco" Component="true">
    </SunttelTradePointB.Client.Shared.EntityShareComponents.ActorImage>
}




@* </CardContent>*@






@code {
    [Parameter]
    public bool ViewSelect { get; set; } = false;
    [Parameter]
    public EventCallback<string> EventCallNewPage { get; set; }
    [Parameter]
    public EventCallback<string> EventCallRefresh { get; set; }

    ChannelCommunicationsGroup channelCommunicationsGroup = new ChannelCommunicationsGroup();


    SfChip? referChip;
    InputTextSelector? inputTextSelector;
    List<EntityActor> entityActorList = new List<EntityActor>();

    bool modeForm = true;

    bool isVisible = false;
    string msg = "";
    int status = 0;
    public bool participants = false;
    public string imgUrl = "";
    public string SearchValueMode = "";
    public int ParamCountResul = 0;
    public bool viewControlNodeCommunications = false;
    protected string pathimages = "";

    protected override void OnInitialized()
    {
        pathimages = UIClientGlobalVariables.PathEntityImages + "/";

    }


    public async void Save()
    {

        if (UIClientGlobalVariables.UserId != null)
        {
            var entityActor = await actorsNodeServive.GetEntityActor(UIClientGlobalVariables.UserId);
            if (entityActor != null)
            {
                channelCommunicationsGroup.Owner = new EntityNodeCommunications
                    {
                        Name = entityActor.Name != null ? entityActor.Name : "",
                        Id = entityActor.Id != null ? entityActor.Id : "",
                        SkinImageName = entityActor.SkinImageName != null ? entityActor.SkinImageName : ""
                    };
            }

        }
        //&& channelCommunicationsGroup.Owner != null
        if (channelCommunicationsGroup.Participants != null && channelCommunicationsGroup.Name != null )
        {
            var resul = await actorsNodeServive.SaveChannelCommunicationsGroup(channelCommunicationsGroup);
            if (resul != null && resul.Id != null)
            {
                Msg("Saved " + resul.Name, 0);
            }
            else
            {
                Msg("No saved", 1);
            }
        }
        StateHasChanged();

    }




    protected async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearchValueMode = arg.IdControl;
        if (SearchValueMode == "Participant")
        {
            entityActorList = await actorsNodeServive.GetEntityActorFaceList(arg.value);
        }
        await Refresh();
    }

    public void SelectionMade(EntityActor arg)
    {
        if (channelCommunicationsGroup.Participants == null) channelCommunicationsGroup.Participants = new();
        entityActorList.Add(arg);
        channelCommunicationsGroup.Participants.Add(new CommunicationsGroupParticipant
        {
            IsActive = true,
            Participant = new EntityNodeCommunications
            {
                Name = arg.Name,
                SkinImageName = arg.SkinImageName,
                Id = arg.Id
            }
        });
        StateHasChanged();
    }



    public async Task Refresh()
    {
        if (inputTextSelector != null) await inputTextSelector.Refresh();
        StateHasChanged();
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        if (channelCommunicationsGroup.Participants == null) channelCommunicationsGroup.Participants = new();
        channelCommunicationsGroup.Participants?.RemoveAt(args.Index);
        StateHasChanged();
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/ChatGeneral");
    }
    private void Navigation(string page)
    {
        navigationManager.NavigateTo(page);
    }
    public void SetNewPage(string Page)
    {
        EventCallNewPage.InvokeAsync(Page);
        StateHasChanged();

    }


    protected void SetIcoGroup(string value)
    {
        channelCommunicationsGroup.SkinImageName = value;
        StateHasChanged();
    }
    protected void OpentPage(string page)
    {
        if (page == "addIco") modeForm = true;
        StateHasChanged();
    }
    protected void ClosedPage(string page)
    {
        if (page == "addIco") modeForm = false;
        StateHasChanged();
    }

    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<EntityActor> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        EntityActor argObj = (EntityActor)args.Value;

    }

    #endregion Grid


    public void Msg(string _msg, int _status)
    {
        msg = _msg;
        status = _status;
        isVisible = true;
    }

   
    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}