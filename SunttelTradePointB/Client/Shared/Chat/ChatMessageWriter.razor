@using Syncfusion.Blazor.Inputs
@using SunttelTradePointB.Shared.Communications
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager




<div class="content">
    <div class="sub-content">
        <div class="content-input">

            <SfTextBox @ref="input" Placeholder="Type a message"
                       Enabled="true"
                       Multiline="true"
                       @bind-Value="message"
                       @oninput="OnTyping"
                       CssClass="input-text">
            </SfTextBox>


            @* <SfTextBox @ref="input" Placeholder="Enter an address"
            Enabled="true"
            @bind-Value="communicationsMessage.Message"
            @onkeypress="@KeyPressed"
            Multiline="true"
            CssClass="input-text"></SfTextBox>*@

        </div>
        <div class="content-img">
            <img @onclick="SendMsg" src="/images//send.png" />
        </div>

    </div>
</div>


@code {
    [Parameter]
    public EventCallback<CommunicationsMessage> TextMessageChanged { get; set; }
    [Parameter]
    public List<CommunicationsMessage> communicationsMessages { get; set; } = new();
    [Parameter]
    public EventCallback<string> EventCallRefresh { get; set; }
    [Parameter]
    public ChannelCommunicationsGroup groupEnable { get; set; } = new();
    public CommunicationsMessage communicationsMessage { get; set; } = new();


    int NumberOfConnectedUsers = 0;
    private HubConnection? hubConnection;

    SfTextBox? input;
    bool modeEnter = false;
    bool onWrite = true;

    string message = "";

    protected override void OnParametersSet()
    {
        var f = communicationsMessage;
    }





    protected async override void OnInitialized()
    {

        // Initializing hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/userHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(UIClientGlobalVariables.UserId);
            })
            .Build();

        hubConnection.On<string>("updateConnectedUsers", (usersConnectedCount) =>
        {
            Console.WriteLine(usersConnectedCount);

            NumberOfConnectedUsers = int.Parse(usersConnectedCount);

            StateHasChanged();
        });

        hubConnection.On<string, CommunicationsMessage>("ReceiveMessage", (user, message) =>
        {
           
                TextMessageChanged.InvokeAsync(communicationsMessage);
                //  EventCallRefresh.InvokeAsync();
           

        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error connecting: {e.Message}");
        }
        StateHasChanged();
        Loading();
    }


    public async void SendMsg()
    {
        Loading();
        string msg = Validationbj();
        if (onWrite && message != null && message != "")
        {
            onWrite = false;

            communicationsMessage = new CommunicationsMessage()
                {
                    MessageTypeId = CommunicationsMessageType.ChatMessage,
                    Message = message,
                    SenderEntity = new EntityNodeCommunications
                    {
                        Id = groupEnable.Id != null ? groupEnable.Id : "",
                        SkinImageName = groupEnable.SkinImageName,
                        Name = groupEnable.Name != null ? groupEnable.Name : "Group"
                    }

            };
          
        communicationsMessages.Add(communicationsMessage);

            if (msg == "") await hubConnection.SendAsync("SendMessage", "User a", communicationsMessage);
            StateHasChanged();
            onWrite = true;
        }

    }


    private string Validationbj()
    {
        string msg = "";
        if (communicationsMessage.Message == null && communicationsMessage.Message == "") msg = "Required message";
        if (communicationsMessage.DestinyGroupChannel.Id == null && communicationsMessage.DestinyGroupChannel.Id == "") msg = "Required message";

        return msg;
    }


    private void OnTyping(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string enter = "";
        if (args != null)
        {
            message = args.Value.ToString();
            enter = args.Value.ToString();
            if (message.Contains("."))
            {
                if (message.Contains("\n".ToString()))
                {
                    SendMsg();
                    enter = "";
                }
            }
        }

    }


    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {


        }

    }


    public void KeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == " ") modeEnter = true;


        if (args.Key == "Enter")
        {

            communicationsMessages.Add(communicationsMessage);
            TextMessageChanged.InvokeAsync(communicationsMessage);
            //  communicationsMessage = new();

            modeEnter = false;
        }

    }



    private void Loading()
    {
        if (communicationsMessages == null) communicationsMessages = new();
        if (communicationsMessage.SenderEntity == null) communicationsMessage.SenderEntity = new();
        if (communicationsMessage.DestinyGroupChannel == null) communicationsMessage.DestinyGroupChannel = new();
        if (groupEnable == null) groupEnable = new();
    }
}
