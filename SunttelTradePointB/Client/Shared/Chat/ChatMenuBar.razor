@using SunttelTradePointB.Shared.Communications

@inject ActorsNodeService actorsNodeServide
@inject CommunicationService communicationService

<style>
    .iconStyle {
        color: ghostwhite;
    }
</style>

<section>
    <div>
        <div class="h4 iconStyle">General Chats
            <div class="btn-group dropend" style="float:right">
                <button type="button" class="btn dropdown-toggle iconStyle" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fa-regular fa-comment icono"></i>
                </button>
                <ul class="dropdown-menu">
                    <li><span @onclick="optionNewGroup"><i class="fa-solid fa-user-group"></i>New Group</span></li>
                </ul>
            </div>
        </div>
        @{
            @if (newGroup)
            {
                <div class="input-group">
                  <input type="text" class="form-control" placeholder="Group Name" aria-label="Group Name" aria-describedby="button-addon2" @bind-value="communicationsGroup.Name">
                  <button class="btn btn-outline-secondary mt-2" type="button" id="button-addon2" @onclick="(() => addGroup(communicationsGroup.Name))"><i class="fa-solid fa-circle-plus"></i></button>
                </div>
            }
        }
        <div class="small fw-light">Search Chat</div>
        <div class="input-group">
            <input class="form-control border rounded-pill" type="search" placeholder="search" id="example-search-input">
        </div>
        <div style="height: 660px; overflow-y: auto;">
            @foreach (var group in channelCommunicationsGroup)
            {
                @if (group != null)
                {
                    <ul class="list-unstyled mb-0">
                        <li class="p-2 border-bottom" style="background-color: #eee;">
                            <div class="d-flex justify-content-between" style="cursor:pointer;" @onclick="@(() => selectedChatGroup(group.SkinImageName, group.Name))">
                                <div class="d-flex flex-row">
                                    @if (group.SkinImageName != "")
                                    {
                                        <img src="@image" alt="avatar"
                                        class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="60">
                                    }
                                    else
                                    {
                                        <img src="@image" alt="avatar"
                                        class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="60">
                                    }

                                    <div class="pt-1">
                                        <p class="fw-bold mb-0">@group.Name</p>
                                        <p class="small text-muted">Hello, Are you there?</p>
                                    </div>
                                </div>
                                <div class="pt-1">
                                    <p class="small text-muted mb-1"></p>
                                    <span class="badge bg-danger float-end">1</span>
                                </div>
                            </div>
                        </li>
                    </ul>

                }
            }
        </div>
        


    </div>
</section>

@code {
    private string image { get; set; } = "";
    private bool newGroup { get; set; } = false;
    public string selectedGroup { get; set; } = "";
    public string groupImage { get; set; } = "";

    public bool selected { get; set; } 


    ChannelCommunicationsGroup communicationsGroup = new ChannelCommunicationsGroup();
    List<ChannelCommunicationsGroup> channelCommunicationsGroup = new List<ChannelCommunicationsGroup>();

    protected override Task OnInitializedAsync()
    {
        var imageRoute = actorsNodeServide.Host;
        image = imageRoute + "/avatar_male_man_person_user_icon.png";
        return base.OnInitializedAsync();
    }

    private void selectedChatGroup(string image, string groupName)
    {
        groupImage = image;
        selectedGroup = groupName;
        selected = true;
        StateHasChanged();
    }

    private void optionNewGroup()
    {
        newGroup = true;
    }

    private void addGroup(string groupName)
    {
        var participant = new CommunicationsGroupParticipant()
        {
            Participant = new EntityNodeCommunications()
            {
                Name = UIClientGlobalVariables.UserName,
                SkinImageName = ""
            },
            InvitationRequestAnswered = false,
            InvitationRequestApprovedByOwner = false,
            InvitationRequestApprovedByParticipant = false,
            InvitationRequestSent = false,
            IsActive = false
        };
        ChannelCommunicationsGroup communicationsGroup = new ChannelCommunicationsGroup()
        {
            Name = groupName,
            Owner = new EntityNodeCommunications()
            {
                Id = UIClientGlobalVariables.UserId,
                Name = UIClientGlobalVariables.UserName,
                SkinImageName = ""
            },
            Participants = new List<CommunicationsGroupParticipant>()
            {
                participant
            }
        };

        //communicationService.SaveChannelCommunicationsGroup(communicationsGroup);

        channelCommunicationsGroup.Add(new ChannelCommunicationsGroup
        {
            SkinImageName = image,
            Name = groupName
        });
        communicationsGroup.Name = "";
        newGroup = false;
    }

}
