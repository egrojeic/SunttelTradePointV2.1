@page "/NewGroup"
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Shared.Communications

@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive



<SfCard>
    @* <CardHeader Title="New Group" />
    <CardContent>*@

    <div class="content grid-columns-4">
        <div>
            <label class="control-label col-md-12">Group Name: </label>
            <input type="text" class="form-control" @bind-value="channelCommunicationsGroup.Name" required />
        </div>

        <div >
            <div>
                <label for="ComercialGroup">Participants</label>
                <button type="button" @onclick='() => SetViewElement("Participant")' class="btn btn-color"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>

            </div>

            <div class="position-input">
                <InputTextSelector @ref="inputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectorInput" EventClosed="EventClosedInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="participants">
                    @{
                        if (entityActorList != null)
                        {
                            foreach (var entity in entityActorList)
                            {
                                <option value="@entity?.Id">@entity?.Name</option>
                            }

                        }

                    }
                </InputTextSelector>
            </div>



        </div>
    </div>




    <div class="content-img">
        <a href="@($"/Image/{UIClientGlobalVariables.UserId}/NewGroup")" target="_blank">
            @if (entityActor == null) entityActor = new();
            <img class="img" src="@(entityActor.SkinImageName !=null ? actorsNodeServive.Host+entityActor.SkinImageName:"/images//ActorsIco.png")" />
        </a>
        <div> <label class="control-label col-md-12">@GetName("SkinImageName", new EntityNodeCommunications()): </label></div>
    </div>


    <div class="py-2">
        <button type="submit" class="size-btn color-btn" style="float:right"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
        <button type="button" class="btn" style="float:right" @onclick='()=>SetNewPage("")'><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
    </div>


    @* </CardContent>*@
</SfCard>





@code {
    [Parameter]
    public bool ViewSelect { get; set; } = false;
    [Parameter]
    public EventCallback<string> EventCallNewPage { get; set; }
    ChannelCommunicationsGroup channelCommunicationsGroup = new ChannelCommunicationsGroup();
    List<EntityActor> participantList = new List<EntityActor>();


    SfChip? referChip;
    InputTextSelector? inputTextSelector;
    EntityActor entityActor = new EntityActor();
    List<EntityActor> entityActorList = new List<EntityActor>();

    public bool participants = false;
    public string imgUrl = "";
    public string SearchValueMode = "";
    public int ParamCountResul = 0;
    public bool viewControlNodeCommunications = false;

    public void SetViewElement(string Element)
    {
        EventClosedInput();
        SearchValueMode = Element;
        if (Element == "Participant") { participants = true; }
        if (Element == "EntityNodeCommunications") { viewControlNodeCommunications = true; }

        Refresh();
        StateHasChanged();
    }

    protected async void EventSearcherValue(string participant)
    {

        if (SearchValueMode == "Participant")
        {
            entityActorList = await actorsNodeServive.GetEntityActorFaceList(participant);
            ParamCountResul = entityActorList.Count();
        }
        if (ParamCountResul > 0)
        {
            ViewSelect = true;
        }
        else
        {
            ViewSelect = false;
        }
        await Refresh();
    }

    protected async void EventIdSelectorInput(string selectionId)
    {
        if (SearchValueMode == "Participant")
        {
            participantList.Add(entityActorList.Where(c => c.Id == selectionId).FirstOrDefault());
        }
        await Refresh();
    }

    public async Task Refresh()
    {
        if (inputTextSelector != null) await inputTextSelector.Refresh();
        StateHasChanged();
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        participantList?.RemoveAt(args.Index);
        StateHasChanged();
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/ChatGeneral");
    }
    private void Navigation(string page)
    {
        navigationManager.NavigateTo(page);
    }
    public void SetNewPage(string Page)
    {
        EventCallNewPage.InvokeAsync(Page);
        StateHasChanged();

    }

    public void EventClosedInput()
    {
        ViewSelect = false;
        ParamCountResul = 0;
        participants = false;
        viewControlNodeCommunications = false;
    }







    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}