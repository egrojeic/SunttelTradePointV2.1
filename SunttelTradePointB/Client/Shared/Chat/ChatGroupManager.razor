@page "/NewGroup"
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Shared.Communications
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.Grids

@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive


<MessageSaveComponent isVisible="@isVisible" message="@msg">

</MessageSaveComponent>

@* <CardHeader Title="New Group" />
    <CardContent>*@

@if (modeForm)
{
    <div class="conten-vertical-center">
        <div class="content grid-columns-4">
            <div>
                <label class="control-label col-md-12">Group Name: </label>
            </div>
            <div>
                <input type="text" class="form-control" @bind-value="channelCommunicationsGroup.Name" required />
            </div>

            <div style="position:relative;">
                <div>
                    <label for="ComercialGroup">Participants</label>
                    <button type="button" @onclick='() => SetViewElement("Participant")' class="btn btn-color"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>

                </div>
                <div class="position-chat">
                    <InputTextSelector @ref="inputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectorInput" EventClosed="EventClosedInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="participants">
                        @{
                            if (entityActorList != null)
                            {
                                foreach (var entity in entityActorList)
                                {
                                    <option value="@entity?.Id">@entity?.Name</option>
                                }
                            }
                        }
                    </InputTextSelector>
                </div>
            </div>
        </div>

        @if (@participantList != null)
        {
            <div class="flex-horizontal-center ">
                <DataGrid TParameter="EntityActor"
                  parameterList="participantList"
                  GridColumnsList="ListGridParticipant"
                  Width="100%"
                  Height="200">
                </DataGrid>
            </div>
        }

        <div class="content-img">
            <a @onclick='()=>ClosedPage("addIco")'>
                @if (entityActor == null) entityActor = new();
                <img class="img" src="@( channelCommunicationsGroup.SkinImageName !=null ? pathimages  + channelCommunicationsGroup.SkinImageName:"/images//defaultImage.png")" />
            </a>
            <div> <label class="control-label col-md-12">@GetName("SkinImageName", new EntityNodeCommunications()) </label></div>
        </div>

        <div class="py-2">
            <button type="button" @onclick="Save" class="size-btn color-btn" style="float:right"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
            <button type="button" class="btn" style="float:right" @onclick='()=>SetNewPage("")'><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
        </div>
    </div>
}
else
{
    <SunttelTradePointB.Client.Shared.EntityShareComponents.ActorImage Id="64085f220314820de346988b"
                                                                   EventCallbackNameImg="SetIcoGroup"
                                                                   EventCallbackOpenClosedPage="OpentPage"
    Page="addIco"                                                               Component="true"
    >
    </SunttelTradePointB.Client.Shared.EntityShareComponents.ActorImage>
}




@* </CardContent>*@






@code {
    [Parameter]
    public bool ViewSelect { get; set; } = false;
    [Parameter]
    public EventCallback<string> EventCallNewPage { get; set; }
    [Parameter]
    public EventCallback<string> EventCallRefresh { get; set; }
   
    ChannelCommunicationsGroup channelCommunicationsGroup = new ChannelCommunicationsGroup();
    List<EntityActor> participantList = new List<EntityActor>();

    List<GridColumn> ListGridParticipant = new();

    SfChip? referChip;
    InputTextSelector? inputTextSelector;
    EntityActor entityActor = new EntityActor();
    List<EntityActor> entityActorList = new List<EntityActor>();

    bool modeForm = true;

    bool isVisible = false;
    string msg = "";
    int status = 0;
    public bool participants = false;
    public string imgUrl = "";
    public string SearchValueMode = "";
    public int ParamCountResul = 0;
    public bool viewControlNodeCommunications = false;
    protected string pathimages ="";

    protected override void OnInitialized()
    {
        pathimages = UIClientGlobalVariables.PathEntityImages+"/";
        ListGridParticipant = new List<GridColumn>
        {
               new GridColumn() { Field=nameof(EntityActor.Name) ,  HeaderText = @GetName( "Name", new AtomConcept()) , Width="300" },
                 new GridColumn() { Field=nameof(EntityActor.Code) ,  HeaderText = @GetName( "Code", new AtomConcept()), Width="80px"  },
                  new GridColumn() { Field=nameof(EntityActor.FullClassName) ,  HeaderText = @GetName( "FullClassName", new EntityActor())  },
                   new GridColumn() { Field=nameof(EntityActor.Status) ,  HeaderText = @GetName( "Status", new LabelStyle())  }



        };

    }


    public async void Save()
    {

        if (entityActor == null || entityActor?.Id == null)
        {
            entityActor = await actorsNodeServive.GetEntityActor(UIClientGlobalVariables.UserId);
            // if (entityActor == null) entityActor = new();
        }

        if (channelCommunicationsGroup != null && channelCommunicationsGroup.Name != null)
        {

            if (channelCommunicationsGroup.Participants == null) channelCommunicationsGroup.Participants = new();
            if (channelCommunicationsGroup.Owner == null) channelCommunicationsGroup.Owner = new();
            foreach (var item in participantList)
            {
                channelCommunicationsGroup.Participants.Add(new CommunicationsGroupParticipant
                    {
                        Participant = new EntityNodeCommunications
                        {
                            Id = item.Id,
                            Name = item.Name,
                            SkinImageName = item.SkinImageName

                        },
                        IsActive = true
                    });
            }
            if (entityActor != null)
            {
                channelCommunicationsGroup.Owner = new EntityNodeCommunications
                    {
                        Name = entityActor.Name != null ? entityActor.Name : "",
                        Id = entityActor.Id != null ? entityActor.Id : "",
                        SkinImageName = entityActor.SkinImageName != null ? entityActor.SkinImageName : ""

                    };
            }


            var resul = await actorsNodeServive.SaveChannelCommunicationsGroup(channelCommunicationsGroup);
            if (resul != null && resul.Id !=null)
            {
                Msg("Saved " + resul.Name, 0);
            }
            else
            {
                Msg("No saved", 1);
            }
        }
        StateHasChanged();

    }


    public void SetViewElement(string Element)
    {
        EventClosedInput();
        SearchValueMode = Element;
        if (Element == "Participant") { participants = true; }
        if (Element == "EntityNodeCommunications") { viewControlNodeCommunications = true; }

        Refresh();
        StateHasChanged();
    }

    protected async void EventSearcherValue(string participant)
    {

        if (SearchValueMode == "Participant")
        {
            entityActorList = await actorsNodeServive.GetEntityActorFaceList(participant);
            ParamCountResul = entityActorList.Count();
        }
        if (ParamCountResul > 0)
        {
            ViewSelect = true;
        }
        else
        {
            ViewSelect = false;
        }
        await Refresh();
    }

    protected async void EventIdSelectorInput(string selectionId)
    {
        if (SearchValueMode == "Participant")
        {
            participantList.Add(entityActorList.Where(c => c.Id == selectionId).FirstOrDefault());
        }
        await Refresh();
    }

    public async Task Refresh()
    {
        if (inputTextSelector != null) await inputTextSelector.Refresh();
        StateHasChanged();
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        participantList?.RemoveAt(args.Index);
        StateHasChanged();
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/ChatGeneral");
    }
    private void Navigation(string page)
    {
        navigationManager.NavigateTo(page);
    }
    public void SetNewPage(string Page)
    {
        EventCallNewPage.InvokeAsync(Page);
        StateHasChanged();

    }


    protected void SetIcoGroup(string value)
    {
        channelCommunicationsGroup.SkinImageName = value;
        StateHasChanged();
    }
    protected void OpentPage(string page)
    {
        if (page == "addIco") modeForm = true;
        StateHasChanged();
    }
    protected void ClosedPage(string page)
    {
        if (page == "addIco") modeForm = false;
        StateHasChanged();
    }

    public void EventClosedInput()
    {
        ViewSelect = false;
        ParamCountResul = 0;
        participants = false;
        viewControlNodeCommunications = false;
    }




    public void Msg(string _msg, int _status)
    {
        msg = _msg;
        status = _status;
        isVisible = true;
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}