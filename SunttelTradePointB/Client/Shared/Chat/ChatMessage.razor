@using SunttelTradePointB.Shared.Communications
@inject CommunicationService communicationService


<div class="content-msg">
    @foreach (var msg in communicationsMessages)
    {
        @if (msg.SenderEntity == null) msg.SenderEntity = new();
        @if (msg.SenderEntity.Id != null || true)
        {
            @if (msg.SenderEntity.Id != SenderEntityId && false)
            {

                <div class="msg-responder color-2">
                    @{
                        var _msgResponder = GetMsgResponder(msg.ParentMessageId);
                        if (_msgResponder != null)
                        {
                            <div class="item-responder">
                                <p class="text">@(_msgResponder.SenderEntity != null ? (_msgResponder.SenderEntity.Name != null ? _msgResponder.SenderEntity.Name : "") : "")</p>
                                <p class="text">@_msgResponder.Message</p>
                            </div>
                        }
                    }
                    <div class="msg-mode-client-1 color-2">

                        <div class="content-ico-1 color-2">
                          
                           
                            @if (msg.MessageTypeId == CommunicationsMessageType.SystemMessage)
                            {
                                
                                
                                <div class="c-ico"><img src="@(msg.SenderEntity.SkinImageName!=null?pathimages+msg.SenderEntity.SkinImageName: "/images/ActorIco.png")"></div>
                                <p class="hour-style">@msg.SendDateTime</p>
                                <img class="ico-menu" src="/images//robot.svg">
                            }
                            else
                            {
                                
                                
                                <div class="c-ico"><img src="@(msg.SenderEntity.SkinImageName!=null?pathimages+msg.SenderEntity.SkinImageName: "/images/ActorIco.png")"></div>
                                <p class="name">@msg.SenderEntity?.Name</p>
                                <p class="hour-style">@msg.SendDateTime</p>
                            }
                            <img style="background-color:@(GetColorMessageIconName(msg.MessageIconName))" class="ico-menu-alert" src="/images//exclamation.svg">
                        </div>



                    </div>
                    <div class="container-msg">
                        <p class="text">@msg.Message</p>
                    </div>
                    <div class="msg-menu">
                        <div class="content-msg-menu">
                            <img @onclick='()=>SetResponder(msg.Id)' class="ico-menu-menu" src="/images//responder.svg">
                            <img @onclick='()=>ViewModalMenu(msg.Id,"menu-1")' class="ico-menu-menu" src="/images//Reaction.svg">
                            <img @onclick='()=>SetMsgRecord(msg.Id)' class="ico-menu-1" src="/images//chat-menu.svg">
                            @if (viewMenu1 && SelectionId == msg.Id)
                            {
                                <div class="menu-view-1">
                                    <img @onclick='()=>SetColorMessageIconName("warning",msg.Id)' class="ico-menu bg-warning" src="/images//exclamation.svg">
                                    <img @onclick='()=>SetColorMessageIconName("danger",msg.Id)' class="ico-menu bg-danger" src="/images//exclamation.svg">
                                    <img @onclick='()=>SetColorMessageIconName("success",msg.Id)' class="ico-menu bg-success" src="/images//exclamation.svg">
                                    <img @onclick='()=>ViewModalMenu("","")' class="ico-menu" src="/images//close.svg">
                                </div>

                            }
                        </div>
                    </div>
                </div>

            }
            else
            {


                <div class="msg-responder" syle=" @(SelectionId == msg.Id?"position:sticky; top:-10px;":"") ">
                    @{
                        var _msgResponder = GetMsgResponder(msg.ParentMessageId);
                        if (_msgResponder != null)
                        {
                            <div class="item-responder">
                                <p class="text">@(_msgResponder.SenderEntity != null ? (_msgResponder.SenderEntity.Name != null ? _msgResponder.SenderEntity.Name : "") : "")</p>
                                <p class="text">@_msgResponder.Message</p>
                            </div>
                        }
                    }
                    <div class="msg-mode-client-2">

                        <div class="content-ico">

                            <img style="background-color:@(GetColorMessageIconName(msg.MessageIconName))" class="ico-menu-alert" src="/images//exclamation.svg">
                            @if (msg.MessageTypeId == CommunicationsMessageType.SystemMessage)
                            {
                                <img class="ico-menu" src="/images//robot.svg">
                                <p class="hour-style">@msg.SendDateTime</p>
                                <div class="c-ico"><img src="@(msg.SenderEntity.SkinImageName!=null?pathimages+msg.SenderEntity.SkinImageName: "/images/ActorIco.png")"></div>
                            }
                            else
                            {
                                <p class="hour-style">@msg.SendDateTime</p>
                                <p class="name">@msg.SenderEntity?.Name</p>
                                <div class="c-ico"><img src="@(msg.SenderEntity.SkinImageName!=null?pathimages+msg.SenderEntity.SkinImageName: "/images/ActorIco.png")"></div>
                            }

                        </div>


                        
                    </div>
                    <div class="container-msg">
                        <p class="text">@msg.Message</p>
                    </div>
                    <div class="msg-menu">
                        <div class="content-msg-menu">
                            <img @onclick='()=>SetResponder(msg.Id)' class="ico-menu" src="/images//responder.svg">
                            <img @onclick='()=>ViewModalMenu(msg.Id,"menu-1")' class="ico-menu-1" src="/images//Reaction.svg">
                            <img @onclick='()=>SetMsgRecord(msg.Id)' class="ico-menu-1" src="/images//chat-menu.svg">
                            @if (viewMenu1 && SelectionId == msg.Id)
                            {
                                <div class="menu-view-1">
                                    <img @onclick='()=>SetColorMessageIconName("warning",msg.Id)' class="ico-menu bg-warning" src="/images//exclamation.svg">
                                    <img @onclick='()=>SetColorMessageIconName("danger",msg.Id)' class="ico-menu bg-danger" src="/images//exclamation.svg">
                                    <img @onclick='()=>SetColorMessageIconName("success",msg.Id)' class="ico-menu bg-success" src="/images//exclamation.svg">
                                    <img @onclick='()=>ViewModalMenu("","")' class="ico-menu" src="/images//close.svg">

                                </div>

                            }
                        </div>
                    </div>
                </div>
            }

        }
    }



</div>



@code {
    [Parameter]
    public EventCallback<CommunicationsMessage> TextMessageChanged { get; set; }
    [Parameter]
    public List<CommunicationsMessage> communicationsMessages { get; set; } = new();
    [Parameter]
    public EventCallback<CommunicationsMessage> SetMsgResponder { get; set; }
    [Parameter]
    public EventCallback<CommunicationsMessage> SetMsgRecord { get; set; }

    public Stack<CommunicationsMessage> communicationsMessagesRecord { get; set; } = new ();
    public CommunicationsMessage communicationsMessageRecord { get; set; } = new();


    string SelectionId = "";
    string SenderEntityId = "1";
    string pathimages = "";
    bool viewMenu1 = true;


    protected override void OnInitialized()
    {
        LoadObj();

        // communicationsMessages = (from m in communicationsMessages orderby m.SendDateTime.Day ascending orderby m.SendDateTime.Hour ascending orderby m.SendDateTime.Minute ascending orderby m.SendDateTime.Second ascending select m).ToList();

        pathimages = UIClientGlobalVariables.PathEntityImages + "/";
    }


    protected override void OnParametersSet()
    {

    }

    public void ViewModalMenu(string id, string _reques)
    {
        SelectionId = id;
        if (_reques == "menu-1") viewMenu1 = true;

    }

    public string GetColorMessageIconName(string item)
    {
        if (item == "warning") { return "#ff8040"; }
        if (item == "danger") { return "#ff0000"; }
        if (item == "success") { return "#80ff00"; }
        return "#00ff00";
    }

    public void SetColorMessageIconName(string value, string id)
    {
        foreach (var item in communicationsMessages)
        {
            if (id == item.Id) item.MessageIconName = value;
        }
        StateHasChanged();
    }

    public void SetResponder(string? Id)
    {
        CommunicationsMessage msg = null;
        if (Id != null) msg = communicationsMessages.Where(s => s.Id == Id).FirstOrDefault();
        if (msg != null) SetMsgResponder.InvokeAsync(msg);
    }   

    public void GetMsgRecord()
    {
       communicationsMessageRecord =  communicationsMessagesRecord.Pop();
    }

    public CommunicationsMessage GetMsgResponder(string? Id)
    {
        CommunicationsMessage msg = null;
        if (Id != null) msg = communicationsMessages.Where(s => s.Id == Id).FirstOrDefault();
        return msg;
    }

    public void LoadObj()
    {
        if (communicationsMessages == null) communicationsMessages = new();
    }

}

