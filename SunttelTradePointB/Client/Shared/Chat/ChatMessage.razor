@using SunttelTradePointB.Shared.Communications

<div class="content-msg">
    @foreach (var msg in communicationsMessages)
    {
        @if (msg.SenderEntity == null) msg.SenderEntity = new();
        @if (msg.SenderEntity.Id != null || true)
        {
            @if (msg.SenderEntity.Id != SenderEntityId)
            {
                <div class="msg-mode-client-1">
                    <div class="label-color" style="background-color:@(GetColorMessageIconName(msg.MessageIconName))"></div>
                    <div class="content-ico">
                        @if (msg.MessageTypeId == CommunicationsMessageType.SystemMessage)
                        {
                            <img class="ico-menu" src="/images//robot.svg">
                        }
                        else
                        {
                            <div class="c-ico"><img src="@(msg.SenderEntity.SkinImageName!=null?msg.SenderEntity.SkinImageName: "/images/ActorIco.png")"></div>
                            <p class="name">@msg.SenderEntity.Name</p>
                            <p class="hour-style">@msg.SendDateTime</p>
                        }
                        <img class="ico-menu bg-warning" src="@msg.MessageIconName">
                    </div>
                    <p class="text">@msg.Message</p>
                    <div class="msg-menu">
                        <div class="content-msg-menu">
                            <img class="ico-menu" src="/images//responder.svg">
                            <img class="ico-menu" src="/images//responder.svg">
                            <img @onclick="()=>ViewModalMenu(1)" class="ico-menu-3" src="/images//Reaction.svg">
                            <div class="menu-view-1" style="@(viewMenu1?"block":"none")" >
                                <img class="ico-menu bg-warning" src="/images//exclamation.svg">
                                <img class="ico-menu bg-danger" src="/images//exclamation.svg">
                                <img class="ico-menu bg-success" src="/images//exclamation.svg">
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {

                <div class="msg-mode-client-2">
                    <div class="content-ico">

                        @if (msg.MessageTypeId == CommunicationsMessageType.SystemMessage)
                        {
                            <img class="ico-menu" src="/images//robot.svg">
                        }
                        else
                        {
                            <p class="hour-style">@msg.SendDateTime</p>
                            <p class="name">@msg.SenderEntity?.Name</p>
                            <div class="c-ico"><img src="@(msg.SenderEntity.SkinImageName!=null?msg.SenderEntity.SkinImageName: "/images/ActorIco.png")"></div>
                        }
                       
                    </div>
                    <p class="text">@msg.Message</p>
                    <div class="msg-menu">
                        <div class="content-msg-menu">
                            <img class="ico-menu" src="/images//reply.svg">
                            <img class="ico-menu" src="/images//Reaction.svg">
                            <img @onclick="()=>ViewModalMenu(1)" class="ico-menu-3" src="/images//Reaction.svg">
                            <div class="menu-view-1" style="@(viewMenu1?"block":"none")">
                                <img class="ico-menu" src="/images//responder.svg">
                                <img class="ico-menu" src="/images//responder.svg">
                                <img class="ico-menu" src="/images//Reaction.svg">
                            </div>
                        </div>
                    </div>
                </div>

            }

        }
    }



</div>



@code {
    [Parameter]
    public EventCallback<CommunicationsMessage> TextMessageChanged { get; set; }
    [Parameter]
    public List<CommunicationsMessage> communicationsMessages { get; set; } = new();
    string SenderEntityId = "1";
    bool viewMenu1 = true;
    protected override void OnParametersSet()
    {

        StateHasChanged();
    }

    public void  ViewModalMenu(int menu){
        viewMenu1 = false;
        if (menu==1) viewMenu1  = true;
        StateHasChanged();
    }
    public string GetColorMessageIconName(string value)
    {
        int item = Convert.ToInt32(value);
        if (item == 0) { return "#00ff00"; }
        if (item == 1) { return "#ff8040"; }
        if (item == 2) {return "#ee042e"; }
    return "#00ff00";
    }

}
