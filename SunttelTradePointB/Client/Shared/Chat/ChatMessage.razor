@using SunttelTradePointB.Shared.Communications
@inject CommunicationService communicationService


<div class="content-msg">
    @foreach (var msg in communicationsMessages)
    {
        @if (msg.SenderEntity == null) msg.SenderEntity = new();
        @if (msg.SenderEntity.Id != null || true)
        {
            @if (msg.SenderEntity.Id != SenderEntityId && false)
            {
                <div class="msg-mode-client-1">
                    <div class="label-color" style="background-color:@(GetColorMessageIconName(msg.MessageIconName))"></div>
                    <div class="content-ico">
                        @if (msg.MessageTypeId == CommunicationsMessageType.SystemMessage)
                        {
                            <img class="ico-menu" src="/images//robot.svg">
                        }
                        else
                        {
                            <div class="c-ico"><img src="@(msg.SenderEntity.SkinImageName!=null?msg.SenderEntity.SkinImageName: "/images/ActorIco.png")"></div>
                            <p class="name">@msg.SenderEntity.Name</p>
                            <p class="hour-style">@msg.SendDateTime</p>
                        }
                        <img style="background-color:@(GetColorMessageIconName(msg.MessageIconName))" class="ico-menu-alert" src="/images//exclamation.svg">
                    </div>
                    <div class="container-text-1">
                        @{
                            foreach (var item in @msg.Message.Split("\n".ToString()))
                            {
                                if (item != null)
                                {
                                    <p class="text">@item</p>
                                }
                            }
                        }
                    </div>
                    <div class="msg-menu">
                        <div class="content-msg-menu">
                            <img class="ico-menu" src="/images//responder.svg">
                            <img class="ico-menu" src="/images//responder.svg">
                            <img @onclick="()=>ViewModalMenu(1)" class="ico-menu-3" src="/images//Reaction.svg">
                            <div class="menu-view-1" style="@(viewMenu1?"block":"none")">
                                <img @onclick='()=>SetColorMessageIconName("warning")' class="ico-menu bg-warning" src="/images//exclamation.svg">
                                <img @onclick='()=>SetColorMessageIconName("danger")' class="ico-menu bg-danger" src="/images//exclamation.svg">
                                <img @onclick='()=>SetColorMessageIconName("success")' class="ico-menu bg-success" src="/images//exclamation.svg">
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {

                <div class="msg-mode-client-2">
                    <div class="content-ico">
                        <div class="label-color" style="background-color:@(GetColorMessageIconName(msg.MessageIconName))"></div>
                        <img style="background-color:@(GetColorMessageIconName(msg.MessageIconName))" class="ico-menu-alert" src="/images//exclamation.svg">
                        @if (msg.MessageTypeId == CommunicationsMessageType.SystemMessage)
                        {
                            <img class="ico-menu" src="/images//robot.svg">
                        }
                        else
                        {
                            <p class="hour-style">@msg.SendDateTime</p>
                            <p class="name">@msg.SenderEntity?.Name</p>
                            <div class="c-ico"><img src="@(msg.SenderEntity.SkinImageName!=null?pathimages+msg.SenderEntity.SkinImageName: "/images/ActorIco.png")"></div>
                        }

                    </div>
                    <div class="container-text-2">
                        @{
                            if (@msg.Message != null)
                            {
                                foreach (var item in @msg.Message.Split("\n".ToString()))
                                {
                                    if (item != null)
                                    {
                                        <p class="text">@item</p>
                                    }
                                }
                            }
                        }
                    </div>
                  
                    <div class="msg-menu">
                        <div class="content-msg-menu">
                            <img @onclick="()=>ViewModalMenu(1)" class="ico-menu-3" src="/images//Reaction.svg">
                            <img class="ico-menu" src="/images//responder.svg">
                            <img class="ico-menu" src="/images//responder.svg">

                            <div class="menu-view-1">
                                <img @onclick='()=>SetColorMessageIconName("warning")' class="ico-menu bg-warning" src="/images//exclamation.svg">
                                <img @onclick='()=>SetColorMessageIconName("danger")' class="ico-menu bg-danger" src="/images//exclamation.svg">
                                <img @onclick='()=>SetColorMessageIconName("success")' class="ico-menu bg-success" src="/images//exclamation.svg">
                            </div>
                        </div>
                    </div>
                </div>
            }

        }
    }



</div>



@code {
    [Parameter]
    public EventCallback<CommunicationsMessage> TextMessageChanged { get; set; }
    [Parameter]
    public List<CommunicationsMessage> communicationsMessages { get; set; } = new();

    string SenderEntityId = "1";
    string pathimages = "";
    bool viewMenu1 = true;


    protected override void OnInitialized()
    {
        LoadObj();
      
    // communicationsMessages = (from m in communicationsMessages orderby m.SendDateTime.Day ascending orderby m.SendDateTime.Hour ascending orderby m.SendDateTime.Minute ascending orderby m.SendDateTime.Second ascending select m).ToList();
       
        pathimages = UIClientGlobalVariables.PathEntityImages + "/";
    }


    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    public void ViewModalMenu(int menu)
    {
        viewMenu1 = false;
        if (menu == 1) viewMenu1 = true;
        StateHasChanged();
    }
    public string GetColorMessageIconName(string item)
    {
        if (item == "warning") { return "#ff8040"; }
        if (item == "danger") { return "#ff0000"; }
        if (item == "success") { return "#80ff00"; }
        return "#00ff00";
    }
    public void SetColorMessageIconName(string value)
    {
        foreach (var item in communicationsMessages)
        {
            item.MessageIconName = value;
        }
        StateHasChanged();
    }


    public void LoadObj()
    {
        if (communicationsMessages == null) communicationsMessages = new();
    }

}

