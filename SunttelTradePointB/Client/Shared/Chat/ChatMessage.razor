@using SunttelTradePointB.Shared.Communications
@inject CommunicationService communicationService


<div class="content-msg">
    @if (modeMsg == "messageHistory" && communicationsMessages.Count()>1)
    {
        <div class="margin-top"></div>
    }
    @foreach (var msg in communicationsMessages)
    {
        @if (msg.SenderEntity == null) msg.SenderEntity = new();
        @if (msg.SenderEntity.Id != null)
        {

            <div class="msg-responder">
                @{
                    if (msg.ParentMessageId != null && modeMsg != "messageHistory")
                    {

                        <ChatMsg msg="@GetMsgResponder(msg.ParentMessageId)"
                             communicationsMessages="@communicationsMessages"
                             SetResponder="SetResponder"
                             SetMsgRecordViewModel="SetMsgRecordView" ChildrenMessage="true">
                        </ChatMsg>

                    }
                }


                @if (msg.ParentMessageId == null && modeMsg == "messageHistory")
                {
                    <div class="messageHistory">

                        <ChatMsg msg="@msg"
                     communicationsMessages="@communicationsMessages"
                     SetResponder="SetResponder"
                     SetMsgRecordViewModel="SetMsgRecordView"
                     viewHistory="true">
                        </ChatMsg>

                    </div>
                    modeMsg = "";
                }
                else
                {
                  <ChatMsg msg="@msg"
                 communicationsMessages="@communicationsMessages"
                 SetResponder="SetResponder"
                 SetMsgRecordViewModel="SetMsgRecordView"
                 ChildrenMessage="true">
                    </ChatMsg>
                    modeMsg = "";
                }
               


            </div>




        }
    }



</div>



@code {
    [Parameter]
    public EventCallback<CommunicationsMessage> TextMessageChanged { get; set; }
    [Parameter]
    public List<CommunicationsMessage> communicationsMessages { get; set; } = new();
    [Parameter]
    public EventCallback<CommunicationsMessage> SetMsgResponder { get; set; }
    [Parameter]
    public EventCallback<CommunicationsMessage> SetMsgRecord { get; set; }

    public Stack<CommunicationsMessage> communicationsMessagesRecord { get; set; } = new();
    public CommunicationsMessage communicationsMessageRecord { get; set; } = new();


    string SelectionId = "";
    string SenderEntityId = "1";
    string pathimages = "";
    bool viewMenu1 = true;
    string modeMsg = "";


    protected override void OnInitialized()
    {
        LoadObj();
        SenderEntityId = UIClientGlobalVariables.EntityUserId;

        // communicationsMessages = (from m in communicationsMessages orderby m.SendDateTime.Day ascending orderby m.SendDateTime.Hour ascending orderby m.SendDateTime.Minute ascending orderby m.SendDateTime.Second ascending select m).ToList();

        pathimages = UIClientGlobalVariables.PathEntityImages + "/";
    }


    protected override void OnParametersSet()
    {

    }

    public void ViewModalMenu(string id, string _reques)
    {
        SelectionId = id;
        if (_reques == "menu-1") viewMenu1 = true;

    }

    public string GetColorMessageIconName(string item)
    {
        if (item == "warning") { return "#ff8040"; }
        if (item == "danger") { return "#ff0000"; }
        if (item == "success") { return "#80ff00"; }
        return "#00ff00";
    }

    public void SetColorMessageIconName(string value, string id)
    {
        foreach (var item in communicationsMessages)
        {
            if (id == item.Id) item.MessageIconName = value;
        }
        StateHasChanged();
    }

    public void SetResponder(string? Id)
    {
        CommunicationsMessage msg = null;
        if (Id != null) msg = communicationsMessages.Where(s => s.Id == Id).FirstOrDefault();
        if (msg != null) SetMsgResponder.InvokeAsync(msg);
    }

    public void SetMsgRecordView(string? Id)
    {
        CommunicationsMessage msg = null;
        if (Id != null) msg = communicationsMessages.Where(s => s.Id == Id).FirstOrDefault();
        if (msg != null) communicationsMessagesRecord.Push(msg);
        modeMsg = "messageHistory";
        SetMsgRecord.InvokeAsync(msg);
    }

    public void GetMsgRecord()
    {
        communicationsMessageRecord = communicationsMessagesRecord.Pop();
    }



    public CommunicationsMessage GetMsgResponder(string? Id)
    {
        CommunicationsMessage msg = null;
        if (Id != null) msg = communicationsMessages.Where(s => s.Id == Id).FirstOrDefault();
        return msg;
    }

    public void LoadObj()
    {
        if (communicationsMessages == null) communicationsMessages = new();
    }

}

