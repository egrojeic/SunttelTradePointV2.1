@using System;
@using System.Timers;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<style>
    .spans-container span {
        display: inline-block;
        margin-right: 10px;
    }
</style>

<div id ="ChatConatainerDiv">
    <ChatUpperControl NumerCount="@NumberOfConnectedUsers">

    </ChatUpperControl>
    
    <div class="card-body" data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px">
        @foreach(var text in addedTexts)
        {
            <div class="d-flex justify-content-between">
                <p class="small mb-1">User Name</p>
            </div>
            <div class="d-flex flex-row justify-content-start">
                <img src="https://localhost:7186/uploads/entityImages/avatar_male_man_person_user_icon.png"
                     alt="avatar 1" style="width: 45px; height: 100%;">
                <div>
                    
                    <p class="small p-2 ms-3 mb-3 rounded-3" style="background-color: #f5f6f7;">
                        @text
                        <br>
                        <span class="small mb-1 text-muted">@CurrentDate.ToString("dd/mm/yy")</span>
                        <span class="small mb-1 text-muted">@currentTime</span>
                    </p>
                    
                </div>
            </div>    
        }
        
        @foreach(var text2 in addedTextsPerson2)
        {
            <div class="d-flex justify-content-between">
                <p class="small mb-1 text-muted"></p>
                <p class="small mb-1">Johny Bullock</p>
            </div>
            <div class="d-flex flex-row justify-content-end mb-4 pt-1">
                <div>
                    <p class="small p-2 me-3 mb-3 text-white rounded-3 bg-warning">
                        @text2
                        <br>
                        <span class="small mb-1 text-muted">@CurrentDate.ToString("dd/mm/yy")</span>
                        <span class="small mb-1 text-muted">@currentTime</span>
                    </p>
                </div>
                <img src="https://localhost:7186/uploads/entityImages/avatar_user_woman_female_person_icon.png"
                     alt="avatar 1" style="width: 45px; height: 100%;">
            </div>    
        }
    </div>




    <ChatMessageWriter @bind-TextMessage="@entitiesFilter">

    </ChatMessageWriter>
</div>

@code {

    private HubConnection? hubConnection;
    int NumberOfConnectedUsers = 0;

    private List<string> addedTexts = new List<string>();
    private List<string> addedTextsPerson2 = new List<string>();
    string _textMessage = "";
    private string userName { get; set; } = "";

    public DateTime CurrentDate { get; set; } = DateTime.Now;
    private string currentTime { get; set; } = DateTime.Now.ToString("hh:mm:ss");

    protected override async Task OnInitializedAsync()
    {
        userName = UIClientGlobalVariables.UserName;
        // Initializing hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/userHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(UIClientGlobalVariables.UserId);
            })
            .Build();

        hubConnection.On<string>("updateConnectedUsers", (usersConnectedCount) =>
        {
            Console.WriteLine(usersConnectedCount);

            NumberOfConnectedUsers = int.Parse(usersConnectedCount);
            StateHasChanged();
        });

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            addedTexts.Add($"{message}");
            addedTextsPerson2.Add($"{message}");
            StateHasChanged();
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error connecting: {e.Message}");
        }   
        
    }

    public string? entitiesFilter
    {
        get { return _textMessage; }
        set
        {
            _textMessage = value;
            addMessage(_textMessage);
        }
    }


    private async void addMessage(string messageChat) {

        await hubConnection.SendAsync("SendMessage", "User a", messageChat);

    }
}
