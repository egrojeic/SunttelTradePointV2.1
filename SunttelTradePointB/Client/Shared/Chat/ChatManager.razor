@using System;
@using System.Timers;
@using Microsoft.AspNetCore.SignalR.Client
@using SunttelTradePointB.Shared.Communications
@using SunttelTradePointB.Client.Shared.Chat.AuxiliarComponents
@using System.Text.RegularExpressions;


@inject NavigationManager NavigationManager
@inject ActorsNodeService actorsNodeService
@inject CommunicationService communicationService
@inject AuthenticationStateProvider AuthenticationStateProvider



<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
    </symbol>
</svg>


<div id="ChatConatainerDiv">

    <ChatUpperControl NumerCount="@NumberOfConnectedUsers"
                      EventCallbackFilter="EventCallbackFilter"
                      communicationsMessages="communicationsMessages">

    </ChatUpperControl>

    @if (newPage == "newGroup")
    {
        <ChatGroupManager EventCallNewPage="SetNewPage" EventCallRefresh="EventCallRefresh"></ChatGroupManager>
    }
    else
    {
        <div class="col-md-12">
            <div class="@modeMenu">
                <div style="background-color:white;">
                    <ChatMenuGroup EventCallModeMenu="SetModeMenu"
                               modeMenu="@modeMenu"
                               EventCallNewPage="SetNewPage"
                               EventCallSetgroupEnable="EventCallSetgroupEnable"></ChatMenuGroup>
                </div>
                <div>
                    <ChatMessage communicationsMessages="communicationsMessages">

                    </ChatMessage>
                </div>
            </div>
        </div>
        <ChatMessageWriter @ref="refChatMessageWriter"
                       TextMessageChanged="TextWriteMessageChanged"
                       EventCallRefresh="EventCallRefresh"
                       groupEnable="groupEnable">
        </ChatMessageWriter>

    }


</div>

@code {
    ChatMessageWriter? refChatMessageWriter;
    ChatMenuGroup? chatMenuGroup;
    string modeMenu { get; set; } = "grid-columns-2-chat-min";
    public ChannelCommunicationsGroup groupEnable { get; set; } = new();

    #region write
    public List<CommunicationsMessage> communicationsMessages { get; set; } = new();
    #endregion write

    private HubConnection? hubConnection;
    int NumberOfConnectedUsers = 0;

    string newPage = "";



    protected override void OnInitialized()
    {

        LoadObj();
        base.OnInitialized();

    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (chatMenuGroup != null) chatMenuGroup.Reload();
    }


    #region write

    public void TextWriteMessageChanged(CommunicationsMessage communicationsMessage)
    {
        communicationsMessages.Add(communicationsMessage);
        StateHasChanged();
    }
    #endregion write

    #region Filter

    public async void EventCallbackFilter(string filter)
    {
        if (filter != "all") this.communicationsMessages = await communicationService.GetMessagesOfAnEntity("01/01/2023", filter);       
        if (filter == "all") this.communicationsMessages = await communicationService.GetMessagesOfAnEntity("01/01/2023", filter);
        if (communicationsMessages == null) communicationsMessages = new();
        StateHasChanged();
    }

    #endregion Filter

    #region group

    public void EventCallSetgroupEnable(ChannelCommunicationsGroup groupEnable)
    {
        this.groupEnable = groupEnable;
        StateHasChanged();
    }

    #endregion group

    public void SetModeMenu(string _modeMenu)
    {
        modeMenu = _modeMenu;
        StateHasChanged();
    }
    public void SetNewPage(string Page)
    {
        newPage = Page;
        StateHasChanged();

    }


    public void EventCallRefresh()
    {
       // StateHasChanged();
    }


    public void LoadObj()
    {
        if (groupEnable == null) groupEnable = new();
        if (communicationsMessages == null) communicationsMessages = new();
    }

}
