@page "/InventoryItem"
@page "/InventoryItem/{inventoryDetailId}"


@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.InvetoryModels
@using Syncfusion.Blazor.SplitButtons
@inject SunttelTradePointB.Client.Services.InventoryServices.Inventory InventoryServices
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactItemsService;
@inject NavigationManager Navigation
@inject WarehouseService warehouseService


<MessageSaveComponent isVisible="isVisible" message="@alertMsg">
</MessageSaveComponent>

<PageTitleComponent Title="Inventory Item" IconName="InventoryItem.png"
                    Description="With this tool you can create and edit inventory item">
</PageTitleComponent>

<div class="panelMenuContainer">
    <button type="button" @onclick='()=>SetNavigateTo("Inventory")' class="general-menu-button"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i> </button>

    <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
        <SplitButtonEvents ItemSelected="ItemSelected">
        </SplitButtonEvents>
        <DropDownMenuItems>
            <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
            <DropDownMenuItem Separator="true"></DropDownMenuItem>
            <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
            <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
            <DropDownMenuItem Separator="true"></DropDownMenuItem>
            <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
        </DropDownMenuItems>
    </SfSplitButton>

</div>
<div class="grid-columns-header grid-columns-6">
    <div>
        <label>
            @GetName("CurrentWarehouse",new InventoryDetail())
        </label>
    </div>
    <div>    
        <select @onchange="SelectItemVendorWarehous" class="select-style">
          
            @if (warehouseList != null && warehouseList.Count() > 0)
            {
                <option value="0" selected>Select</option>
            }
            @if (warehouseList != null)
            {
                @foreach (var item in warehouseList)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            }
            @if (inventoryDetail.CurrentWarehouse != null)
            {
                <option value="@inventoryDetail.CurrentWarehouse.Id" selected>@inventoryDetail.CurrentWarehouse.Name</option>
            }
        </select>
    </div>

    <div>
        <label>
            @GetName("InventoryItem",new InventoryDetail())
        </label>
    </div>
    <div class="InventoryItem">
        <InputTextSelector3 TItem="Concept"
                            Id="InventoryItem"
                            caption="@(inventoryDetail.InventoryItem !=null ? inventoryDetail.InventoryItem.Name:"")"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId"
                            styleCaption="min-width: 41vw;"
                            Items="inventoryItem">
        </InputTextSelector3>
    </div>


    <div><label>@GetName("Qty",new InventoryDetail())</label></div>
    <InputTextDisable Enable="true" style="font-size:15px; font-weight:none; " @bind-ValueDouble="@inventoryDetail.Qty"></InputTextDisable>   


    <div><label>@GetName("EntryDate",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.EntryDate" type="date" class="form-control" disabled />

    <div><label>@GetName("ItemBox",new InventoryDetail())</label></div>
    <InputTextSelector3 TItem="Box"
                        Id="ItemBox"
                        caption="@(inventoryDetail.ItemBox !=null ? inventoryDetail.ItemBox.Name:"")"
                        Items="boxList"
                        EventIdSelectionAndId="EventIdSelectionAndId"
                        EventSearcherValueAndId="EventSearcherValueAndId"
                        style="left:-150px;">
    </InputTextSelector3>

    <div><label>@GetName("Pack",new InventoryDetail())</label></div>
    <InputTextDisable Min="1" Enable="true" ChangedUpdate="ChangedUpdate" style="font-size:15px; font-weight:none;" @bind-ValueDouble="@inventoryDetail.Pack"></InputTextDisable>


    <div><label>@GetName("BoxCode",new InventoryDetail())</label></div>
    <InputTextDisable Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueString="@inventoryDetail.BoxCode"></InputTextDisable>


    <div><label>@GetName("CustomerReservedFor",new InventoryDetail())</label></div>


    <InputTextSelector3 TItem="EntityActor"
                        Id="CustomerReservedFor"
                        caption="@(inventoryDetail.CustomerReservedFor !=null ? inventoryDetail.CustomerReservedFor.Name:"")"
                        EventIdSelectionAndId="EventIdSelectionAndId"
                        EventSearcherValueAndId="EventSearcherValueAndId"
                        Items="customerList"
                        style="left:-150px;">
    </InputTextSelector3>
      

    <div><label>@GetName("UnitCost",new InventoryDetail())</label></div>
   <InputTextDisable Enable="false" @bind-ValueDouble="inventoryDetail.UnitCost"> </InputTextDisable>
    <div><label>@GetName("BasicUnitsQty",new InventoryDetail())</label></div>
    <InputTextDisable Enable="false" @bind-ValueDouble="inventoryDetail.BasicUnitsQty"> </InputTextDisable>
    <div></div><div></div>
    <div><label>@GetName("InventoryBusinessLine",new CommercialDocument())</label></div>


    <div class="InventoryBusinessLine">
        <select @onchange="SelectItemBusinessLineDoc" class="select-style">
            @if (inventoryDetail.InventoryBusinessLine != null)
            {
                <option value="@inventoryDetail.InventoryBusinessLine.Id" selected>@inventoryDetail.InventoryBusinessLine.Name</option>
            }
            @if (businessLineDocList != null && businessLineDocList.Count() > 0)
            {
                <option value="0" selected>Select</option>
            }
            @foreach (var item in businessLineDocList)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>

</div>



@code {
    [Parameter]
    public string inventoryDetailId { get; set; }
    [Parameter]
    public string _filterItems { get; set; }
    public InventoryDetail inventoryDetail { get; set; }


    bool isVisible = false;
    string alertMsg = "";


    string searcherValue = "";
    #region List

    List<Warehouse> warehouseList = new();
    List<Concept> inventoryItem = new();

    List<Box> boxList = new();   
    List<EntityActor> customerList { get; set; }
    public List<BusinessLine> businessLineDocList = new();
    #endregion List




    protected async override void OnInitialized()
    {
        Load();
        if (inventoryDetailId != null)
        {
            var result = await InventoryServices.GetInventoryById(inventoryDetailId);

            if (result != null)
            {
                inventoryDetail = result;
            }

        }

       
        StateHasChanged();
    }




    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {

            var result = await InventoryServices.SaveInventoryItem(inventoryDetail);
            if (result != null)
            {
                inventoryDetail = result;
                alert("Saved", 0);
            }
            else
            {
                alert("No saved", 11);
            }

        }

        StateHasChanged();

    }


    public void SelectItemBusinessLineDoc(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        inventoryDetail.InventoryBusinessLine = businessLineDocList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();

    }

    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        searcherValue = arg.IdControl;
        if (searcherValue == "InventoryItem")
        {
            var list = await InventoryServices.GetTransactionalItemsList(1, 20, arg.value.ToString());
            inventoryItem = new();
            foreach (var item in list)
            {
                inventoryItem.Add(item);
            }

        };

        if (searcherValue == "CustomerReservedFor")
        {
            customerList = await InventoryServices.GetEntityActorFaceList(arg.value.ToString());
        };

        if (searcherValue == "ItemBox")
        {
            var list = await InventoryServices.GetBoxes(arg.value.ToString());

            boxList = list;
        };





        StateHasChanged();

    }

    public void EventIdSelectionAndId(Concept item)
    {
        if (searcherValue == "InventoryItem")
        {
            inventoryDetail.InventoryItem = item;
            AditProduct(item.Id);
        };
        StateHasChanged();
    }

    public void EventIdSelectionAndId(EntityActor item)
    {
        if (searcherValue == "CustomerReservedFor")
        {
            inventoryDetail.CustomerReservedFor = new BasicConcept
                {
                    Id = item.Id,
                    Name = item.Name
                };

        };
        StateHasChanged();
    }

    public void EventIdSelectionAndId(Box item)
    {
        if (searcherValue == "ItemBox")
        {
            inventoryDetail.ItemBox = item;
        };
        StateHasChanged();
    }





    public async void SelectItemVendorWarehous(ChangeEventArgs arg)
    {       
        Warehouse _warehouse = new Warehouse();
        _warehouse =  await warehouseService.GetWarehouseById(arg.Value.ToString());
        if (_warehouse != null)
        {       
            inventoryDetail.CurrentWarehouse = _warehouse;
        }
        StateHasChanged();
    }



    public void SetNavigateTo(string name)
    {
        Navigation.NavigateTo(name);
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    public async void AditProduct(string productId)
    {
        var item = await InventoryServices.GetTransactionalItemById(productId);
        if (item != null)
        {
            try
            {
                inventoryDetail.UnitCost = item.PriceOverridenByPriceList.ItemPrice.UnitPrice;
            }
            catch { }
        }

    }



    public void Load()
    {
        if (inventoryDetail == null) inventoryDetail = new();
        if (inventoryDetail.CurrentWarehouse == null) inventoryDetail.CurrentWarehouse = new();
        if (inventoryDetail.InventoryItem == null) inventoryDetail.InventoryItem = new();
        if (inventoryDetail.CustomerReservedFor == null) inventoryDetail.CustomerReservedFor = new();
        if (inventoryDetail.InventoryBusinessLine == null) inventoryDetail.InventoryBusinessLine = new();
        if (inventoryDetail.EntryDate == DateTime.MinValue) inventoryDetail.EntryDate = DateTime.Today;
    }


    public void alert(string msg, int status)
    {
        isVisible = true;
        alertMsg = msg;
    }


    public string GetValidateNull(object item)
    {
        var Id = (string)item.GetType().GetProperty("Id").GetValue(item);

        if (Id == null) return "visible";
        return "hidden";
    }

    public void ChangedUpdate()
    {
        StateHasChanged();
    }

}
