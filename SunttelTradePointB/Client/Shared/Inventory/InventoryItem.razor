@page "/InventoryItem"


@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.InvetoryModels
@using SunttelTradePointB.Client.Shared.Inventory.InventorySubComponents
@using Syncfusion.Blazor.SplitButtons
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject ContextMenuService ContextMenuService
@inject TransactionalItemsService transactItemsService;
@inject NavigationManager Navigation

<PageTitleComponent Title="Inventory Item" IconName="InventoryItem.png"
                    Description="With this tool you can create and edit inventory item">
</PageTitleComponent>

<div class="panelMenuContainer">
    <button type="button" @onclick='()=>SetNavigateTo("Inventory")' class="general-menu-button"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i> </button>
    
    <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
     </SfSplitButton>

</div>
<div class="grid-columns-header grid-columns-6">
    <div><b class="c-red">*</b><label>@GetName("CurrentWarehouse",new InventoryDetail())</label></div>
    <div>
        <select @onchange="SelectItemVendorWarehous" class="select-style">
            @if (inventoryDetail.CurrentWarehouse != null)
            {
                <option value="@inventoryDetail.CurrentWarehouse.Id" selected>@inventoryDetail.CurrentWarehouse.Name</option>
            }
            @if (warehouseList != null && warehouseList.Count() > 0)
            {
                <option value="0" selected>Select</option>
            }
            @if (warehouseList != null)
            {
                @foreach (var item in warehouseList)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            }
        </select>
    </div>

    <div><b class="c-red">*</b><label>@GetName("InventoryItem",new InventoryDetail())</label></div>
    <InputTextSelector3 TItem="Concept"
                        Id="InventoryItem"
                        caption="@(inventoryDetail.InventoryItem !=null ? inventoryDetail.InventoryItem.Name:"")"
                        EventIdSelectionAndId="EventIdSelectionAndId"
                        EventSearcherValueAndId="EventSearcherValueAndId">
    </InputTextSelector3>

    <div><b class="c-red">*</b><label>@GetName("Qty",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.Qty" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("QtyAvailable",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.QtyAvailable" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("QtyReserved",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.QtyReserved" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("QtyOnHand",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.QtyOnHand" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("QtyOnOrder",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.QtyOnOrder" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("QtyOnPurchaseOrder",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.QtyOnPurchaseOrder" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("QtyOnSalesOrder",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.QtyOnSalesOrder" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("QtyOnTransferOrder",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.QtyOnTransferOrder" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("QtyOnProductionOrder",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.QtyOnProductionOrder" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("EntryScannedQty",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.EntryScannedQty" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("EntryDate",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.EntryDate" type="date" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("InventoryItem",new InventoryDetail())</label></div>
    <InputTextSelector3 TItem="Box"
                        Id="ItemBox"
                        caption="@(inventoryDetail.ItemBox !=null ? inventoryDetail.ItemBox.Name:"")">
    </InputTextSelector3>

    <div><b class="c-red">*</b><label>@GetName("Pack",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.Pack" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("BoxCode",new InventoryDetail())</label></div>
    <input @bind-value="@inventoryDetail.BoxCode" type="number" class="form-control" />

    <div><b class="c-red">*</b><label>@GetName("CustomerReservedFor",new InventoryDetail())</label></div>
    <div>
        <select class="select-style">
            @if (inventoryDetail.CustomerReservedFor != null)
            {
                <option value="@inventoryDetail.CustomerReservedFor.Id" selected>@inventoryDetail.CustomerReservedFor.Name</option>
            }
            @if (ListCustomerReservedFor != null && ListCustomerReservedFor.Count() > 0)
            {
                <option value="0" selected>Select</option>
            }
            @if (ListCustomerReservedFor != null)
            {
                @foreach (var item in ListCustomerReservedFor)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            }
        </select>
    </div>


    <div><b class="c-red">*</b><label>@GetName("BoxCode",new InventoryDetail())</label></div>
    <InputTextDisable @bind-ValueDouble="inventoryDetail.UnitCost"> </InputTextDisable>


    <div><b class="c-red">*</b><label>@GetName("BusinessLineDoc",new CommercialDocument())</label></div>
    <div>
        <select @onchange="SelectItemBusinessLineDoc" class="select-style">
            @if (inventoryDetail.InventoryBusinessLine != null)
            {
                <option value="@inventoryDetail.InventoryBusinessLine.Id" selected>@inventoryDetail.InventoryBusinessLine.Name</option>
            }
            @if (businessLineDocList != null && businessLineDocList.Count() > 0)
            {
                <option value="0" selected>Select</option>
            }
            @foreach (var item in businessLineDocList)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>

</div>



@code {
    public InventoryDetail inventoryDetail { get; set; }

    string searcherValue = "";
    #region List
    List<BasicConcept> ListCustomerReservedFor = new();
    List<Warehouse> warehouseList = new();
    List<Concept> inventoryItem = new();
    public List<BusinessLine> businessLineDocList = new();
    #endregion List


    protected async override void OnInitialized()
    {
        Load();
        LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {

        // inventoryItem = await DocumentServices.GetCommercialDocumentDetails(_filterItems != null ? _filterItems : "all");


    }


    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {
          

        }

        StateHasChanged();

    }


    public void SelectItemBusinessLineDoc(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        inventoryDetail.InventoryBusinessLine = businessLineDocList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();

    }


    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        searcherValue = arg.IdControl;
        if (searcherValue == "InventoryItem")
        {
            inventoryDetail.InventoryItem = new();
        };

    }

    public void EventIdSelectionAndId(Concept item)
    {
        if (searcherValue == "InventoryItem")
        {
            inventoryDetail.InventoryItem = item;
        };
    }


    public void SelectItemVendorWarehous(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        inventoryDetail.CurrentWarehouse = warehouseList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }


    public void SetNavigateTo(string name)
    {
        Navigation.NavigateTo(name);
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    public void Load()
    {
        if (inventoryDetail == null) inventoryDetail = new();
        if (inventoryDetail.CurrentWarehouse == null) inventoryDetail.CurrentWarehouse = new();
        if (inventoryDetail.InventoryItem == null) inventoryDetail.InventoryItem = new();
        if (inventoryDetail.CustomerReservedFor == null) inventoryDetail.CustomerReservedFor = new();
        if (inventoryDetail.InventoryBusinessLine == null) inventoryDetail.InventoryBusinessLine = new();
    }


}
