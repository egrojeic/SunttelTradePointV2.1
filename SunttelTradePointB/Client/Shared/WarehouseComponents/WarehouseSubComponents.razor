@page "/WarehousesGeneral/NewWarehouse"
@page "/WarehousesGeneral/{id}/{Mode}"

@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common

@inject GeographicPlacesService geoPlaces
@inject NavigationManager navigationManager
@inject WarehouseService warehouseService
@inject ActorsNodeService actorsNodeServive
@inject TransactionalItemsService transactionalItemsService

@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}


<div class="control-section">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 container">
            <SfCard>
                <CardHeader Title="@($"{Mode} a  warehouse")" />
                <CardContent>
                    <form onsubmit="event.preventDefault();">
                        <div class="form-group row">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "Name")</label>
                                <div class="col">
                                    <input type="text" class="form-control" @bind-value="warehouse.Name" required />
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">                               
                                <div class="col">
                                    <div class="position:relative;">
                                        <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "WareHouseParent"): </label>
                                        <div class="item-edit">
                                            <label>@(warehouse.InventoryTransactionalItemType != null ? warehouse.InventoryTransactionalItemType?.Name : "")</label>
                                            <button type="button" style="float:right" @onclick='()=>SetViewElemnt("WareHouseParent")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>
                                        <InputTextSelector @ref="refInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" Visible="PopupViewWareHouseParent">
                                            @{
                                                if (warehouseList != null)
                                                {
                                                    foreach (var entity in warehouseList)
                                                    {
                                                        <option value="@entity?.Id">@entity?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>

                                </div>
                            </div>
                        </div>

                        <div class="PRUEBA">
                            <div class="form-group row py-2">
                                <div class="form-group row">
                                    <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "AssociatedEntity"): </label>
                                    <div class="position:relative;">
                                        <div class="item-edit">
                                            <label>@(warehouse.AssociatedEntity != null ? warehouse.AssociatedEntity?.Name : "")</label>
                                            <button type="button" style="float:right" @onclick='()=>SetViewElemnt("AssociatedEntity")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>
                                        <InputTextSelector @ref="refInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedControlInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" Visible="PopupViewAssociatedEntity">
                                            @{
                                                if (wareHouseParentListApi != null)
                                                {
                                                    foreach (var entity in wareHouseParentListApi)
                                                    {
                                                        <option value="@entity?.Id">@entity?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                            </div>
                            <div class="grid-columns-2">
                                <div class="form-group row py-2">
                                    <div class="form-group row">
                                        <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "IsExternal"): </label>
                                        <div class="col">
                                            <SfSwitch @bind-Checked="warehouse.IsExternal"></SfSwitch>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row py-2">
                                    <div class="form-group row">
                                        <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "IsTransformationFacility"): </label>
                                        <div class="col">
                                            <SfSwitch @bind-Checked="warehouse.IsTransformationFacility"></SfSwitch>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group row py-2">
                                    <div class="form-group row">
                                        <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "ScanSimulated"): </label>
                                        <div class="col">
                                            <SfSwitch @bind-Checked="warehouse.ScanSimulated"></SfSwitch>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group row py-2">
                                    <div class="form-group row">
                                        <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "IsInventoryControlled"): </label>
                                        <div class="col">
                                            <SfSwitch @bind-Checked="warehouse.IsInventoryControlled"></SfSwitch>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group row py-2">
                                    <div class="form-group row">
                                        <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "IsActive"): </label>
                                        <div class="col">
                                            <SfSwitch @bind-Checked="warehouse.IsActive"></SfSwitch>
                                        </div>
                                    </div>
                                </div>

                            </div>
                           

                          

                           

                            <div class="form-group row">
                                <div class="form-group row">
                                   
                                    <div class="col">
                                        <div class="position:relative;">
                                            <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "InventoryTransactionalItemType"): </label>
                                            <div class="item-edit">
                                                <label>@(warehouse.InventoryTransactionalItemType != null ? warehouse.InventoryTransactionalItemType?.Name : "")</label>
                                                <button type="button" style="float:right" @onclick='()=>SetViewElemnt("InventoryTransactionalItemType")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                            </div>
                                            <InputTextSelector @ref="refInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" Visible="PopupViewEntitiesInventory">
                                                @{
                                                    if (itemType != null)
                                                    {
                                                        foreach (var entity in itemType)
                                                        {
                                                            <option value="@entity?.Id">@entity?.Name</option>
                                                        }
                                                    }

                                                }
                                            </InputTextSelector>
                                        </div>

                                    </div>
                                </div>
                            </div>

                            <div class="form-group row py-2">
                                <div class="form-group row">
                                    <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "WarehouseAddress") </label>
                                    <div class="col">
                                        <AddressComponent  oldAddress="warehouse.WarehouseAddress"></AddressComponent>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group row">
                                <div class="form-group row">
                                    <div class="position:relative;">
                                        <label class="control-label col-md-12">@UICommonFunctions.GetDisplayName(new Warehouse(), "ContactPerson"): </label>
                                        <div class="item-edit">
                                            <label>@(warehouse.ContactPerson != null ? warehouse.ContactPerson?.Name : "")</label>
                                            <button type="button" style="float:right" @onclick='()=>SetViewElemnt("Contact")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>
                                        <InputTextSelector @ref="refInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" Visible="PopupViewEntitiesContact">
                                            @{
                                                if (ContactList != null)
                                                {
                                                    foreach (var entity in ContactList)
                                                    {
                                                        <option value="@entity?.Id">@entity?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                            </div>

                           
                        </div>

                    </form>

                </CardContent>
            </SfCard>
            <div class="py-2">
                <button type="submit" class="size-btn color-btn" style="float:right" @onclick="Save"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
                <button type="button" class="btn" style="float:right" @onclick="GoBack"><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public bool ViewSelect { get; set; } = false;
    [Parameter]
    public string Mode { get; set; } = "Add";

    bool viewMsg = false;
    string msg = "";
    int status = 0;
    public string SearcherValueMode = "";
    public bool PopupViewAssociatedEntity = false;
    public bool PopupViewEntitiesContact = false;
    public int ParamCountResul = 0;
    public bool PopupViewEntitiesInventory = false;
    public bool PopupViewWareHouseParent = false;

  


    Warehouse warehouse = new Warehouse();
    List<Warehouse> warehouseList = new List<Warehouse>();


    List<EntityActor> wareHouseParentListApi = new List<EntityActor>();
    List<EntityActor> ContactList = new List<EntityActor>();
    List<TransactionalItemType> itemType = new List<TransactionalItemType>();

    InputTextSelector? refInputTextSelector;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            warehouse = new();
            warehouse.WareHouseParent = new();
            warehouse.AssociatedEntity = new();
            warehouse.InventoryTransactionalItemType = new();
            warehouse.WarehouseAddress = new();
            warehouse.ContactPerson = new();
        }
        else
        {
            warehouse = await warehouseService.GetWarehouseById(Id);
        }

        StateHasChanged();
    }

    public async void Save()
    {
        Address adress = warehouse.WarehouseAddress != null ? warehouse.WarehouseAddress : new();
        if (warehouse.WarehouseAddress == null) warehouse.WarehouseAddress = new();
        warehouse.WarehouseAddress.CityAddress = adress.CityAddress != null ? adress.CityAddress : new() ;
        var resul = await warehouseService.SaveWarehuse(warehouse);
        if (resul)
        {
            Msg("Saved", 0);
        }
        else
        {
            Msg("No saved", 1);
        }
        StateHasChanged();
    }


 
    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        ClosedControlInput();
        SearcherValueMode = Element;
        if (Element == "AssociatedEntity") { PopupViewAssociatedEntity = true; }
        if (Element == "Contact") { PopupViewEntitiesContact = true; }
        if (Element == "WareHouseParent") { PopupViewWareHouseParent = true; }
        if (Element == "InventoryTransactionalItemType") { PopupViewEntitiesInventory = true; }

        StateHasChanged();
    }

    protected async void EventSearcherValue(string value)
    {
        ParamCountResul = 0;
        if (SearcherValueMode == "AssociatedEntity")
        {
            wareHouseParentListApi = await actorsNodeServive.GetEntityActorFaceList(value);
            ParamCountResul = wareHouseParentListApi != null ? wareHouseParentListApi.Count() : 0;
        }

        if (SearcherValueMode == "Contact")
        {
            ContactList = await actorsNodeServive.GetEntityActorFaceList(value);
            ParamCountResul = ContactList != null ? ContactList.Count() : 0;
        }
        if (SearcherValueMode == "WareHouseParent")
        {
            warehouseList = await warehouseService.GetWarehouseList("all");
            if (!value.ToLower().Contains("todo") && !value.ToLower().Contains("all")) { warehouseList = warehouseList.Where(s => s.Name != null != null && s.Name.ToLower().Contains(value.ToLower())).ToList(); }

            if (warehouse.WareHouseParent == null) warehouse.WareHouseParent = new();
            ParamCountResul = warehouseList != null ? warehouseList.Count() : 0;
        }
        if (SearcherValueMode == "InventoryTransactionalItemType")
        {
            itemType = await transactionalItemsService.GetSelectorListTransactionalItemTypes();
            if (!value.ToLower().Contains("todo") && !value.ToLower().Contains("all")) itemType = itemType.Where(s => s.Name != null != null && s.Name.ToLower().Contains(value.ToLower())).ToList();

            ParamCountResul = itemType != null ? itemType.Count() : 0;
        }



        if (ParamCountResul > 0) { ViewSelect = true; } else { ViewSelect = false; }
        StateHasChanged();
    }

    protected async void EventIdSelectionInput(string selectionId)
    {
        if (SearcherValueMode == "AssociatedEntity")
        {
            warehouse.AssociatedEntity = wareHouseParentListApi.Where(c => c.Id == selectionId).FirstOrDefault();
        }

        if (SearcherValueMode == "Contact")
        {
            warehouse.ContactPerson = ContactList.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "WareHouseParent")
        {
            warehouse.WareHouseParent = warehouseList.Where(s => s.Id != null && s.Id == selectionId).FirstOrDefault();
            if (warehouse.WareHouseParent == null) warehouse.WareHouseParent = new();
            ParamCountResul = ContactList != null ? ContactList.Count() : 0;
        }
        if (SearcherValueMode == "InventoryTransactionalItemType")
        {
            warehouse.InventoryTransactionalItemType = itemType.Where(s => s.Id != null && s.Id == selectionId).FirstOrDefault();
            if (warehouse.InventoryTransactionalItemType == null) warehouse.InventoryTransactionalItemType = new();
            ParamCountResul = ContactList != null ? ContactList.Count() : 0;
        }
        ClosedControlInput();
    }

    public void ClosedControlInput()
    {
        PopupViewEntitiesContact = false;
        PopupViewAssociatedEntity = false;
        PopupViewEntitiesInventory = false;
        PopupViewWareHouseParent = false;
        ViewSelect = false;
        ParamCountResul = 0;
        StateHasChanged();
    }
 





    private void GoBack()
    {
        navigationManager.NavigateTo($"/WarehousesGeneral");
    }

    public void Msg(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }





}