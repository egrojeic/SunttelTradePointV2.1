@page "/WarehousesGeneral/NewWarehouse"
@page "/WarehousesGeneral/{id}/Edit"

@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common

@inject NavigationManager navigationManager
@inject WarehouseService warehouseService
@inject ActorsNodeService actorsNodeServive
@inject TransactionalItemsService transactionalItemsService

<div class="control-section">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 container">
            <SfCard>
                <CardHeader Title="Add a new warehouse" />
                <CardContent>
                    <form onsubmit="event.preventDefault();">
                        <div class="form-group row">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblWareHouseParent: </label>
                                <div class="col">
                                    <input type="text" class="form-control" @bind-value="warehouse.Name"  required/>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblWareHouseParent: </label>
                                <div class="col">
                                    <SfDropDownList TValue="string" TItem="Warehouse" Placeholder="Select a associated entity" AllowFiltering="true" DataSource="@warehouseList" @bind-Value="WareHouseParent.Name">
                                        <DropDownListEvents TItem="Warehouse" TValue="string" ValueChange="@ValueChangeAssociationEntity"></DropDownListEvents>
                                        <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblAssociatedEntity: </label>
                                <div class="position:relative;">
                                    <div class="item-edit">
                                        <label>@(Parent != null ? Parent.Name : "")</label>
                                        <button type="button" style="float:right" @onclick='()=>SetViewElemnt("WareHouseParent")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="refInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEntitiesWarehouseParent">
                                        @{
                                            if (WareHouseParentList != null)
                                            {
                                                foreach (var entity in WareHouseParentList)
                                                {
                                                    <option value="@entity?.Id">@entity?.Name</option>
                                                }
                                            }

                                        }
                                    </InputTextSelector>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblIsExternal: </label>
                                <div class="col">
                                    <SfSwitch @bind-Checked="isExternal"></SfSwitch>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblIsTransformationFacility: </label>
                                <div class="col">
                                    <SfSwitch @bind-Checked="isTransformationFacility"></SfSwitch>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblScanSimulated: </label>
                                <div class="col">
                                    <SfSwitch @bind-Checked="scanSimulated"></SfSwitch>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblIsInventoryControlled: </label>
                                <div class="col">
                                    <SfSwitch @bind-Checked="isInventoryControlled"></SfSwitch>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblInventoryTransactionalItemType: </label>
                                <div class="col">
                                    <SfDropDownList TValue="string" TItem="TransactionalItemType" Placeholder="Select a item type" AllowFiltering="true" DataSource="@itemType" @bind-Value="transactionalItemType.Name">
                                        <DropDownListEvents TItem="TransactionalItemType" TValue="string" ValueChange="@ValueChangeItemType"></DropDownListEvents>
                                        <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblWarehouseAddress: </label>
                                <div class="col">
                                    <AddressComponent oldAddress="address"></AddressComponent>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="form-group row">
                                <div class="position:relative;">
                                    <label class="control-label col-md-12">@lblContactPerson: </label>
                                    <div class="item-edit">
                                        <label>@(Contact != null ? Contact.Name : "")</label>
                                        <button type="button" style="float:right" @onclick='()=>SetViewElemnt("Contact")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="refInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEntitiesContact">
                                        @{
                                            if (ContactList != null)
                                            {
                                                foreach (var entity in ContactList)
                                                {
                                                    <option value="@entity?.Id">@entity?.Name</option>
                                                }
                                            }

                                        }
                                    </InputTextSelector>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblIsActive: </label>
                                <div class="col">
                                    <SfSwitch @bind-Checked="isActive"></SfSwitch>
                                </div>
                            </div>
                        </div>

                        <MessageSaveComponent message="Electronic Address Saved" isVisible="visible"></MessageSaveComponent>

                        <div class="py-2">
                            <button type="submit" class="size-btn color-btn" style="float:right" @onclick="(() => SaveWareHouse(Id, warehouse))"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
                            <button type="button" class="btn" style="float:right" @onclick="GoBack"><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
                        </div>
                    </form>

                </CardContent>
            </SfCard>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public bool ViewSelect { get; set; } = false;

    Warehouse warehouse = new Warehouse();
    AtomConcept Parent = new AtomConcept();
    AtomConcept Contact = new AtomConcept();
    Warehouse WareHouseParent = new Warehouse();
    List<EntityActor> WareHouseParentList = new List<EntityActor>();
    List<EntityActor> ContactList = new List<EntityActor>();
    List<Warehouse> warehouseList = new List<Warehouse>();
    TransactionalItemType transactionalItemType = new TransactionalItemType();
    List<TransactionalItemType> itemType = new List<TransactionalItemType>();
    InputTextSelector? refInputTextSelector;

    private string lblWareHouseParent = "";
    private string lblAssociatedEntity = "";
    private string lblIsExternal = "";
    private string lblIsTransformationFacility = "";
    private string lblScanSimulated = "";
    private string lblIsInventoryControlled = "";
    private string lblInventoryTransactionalItemType = "";
    private string lblWarehouseAddress = "";
    private string lblContactPerson = "";
    private string lblIsActive = "";

    public string SearcherValueMode = "";
    public bool PopupViewEntitiesWarehouseParent = false;
    public bool PopupViewEntitiesContact = false;
    public int ParamCountResul = 0;

    private bool visible { get; set; } = false;

    private bool isExternal { get; set; } = false;
    private bool isTransformationFacility { get; set; } = false;
    private bool scanSimulated { get; set; } = false;
    private bool isInventoryControlled { get; set; } = false;
    private bool isActive { get; set; } = false;

    private Address address { get; set; } = new Address();

    protected override async Task OnInitializedAsync()
    {
        lblWareHouseParent = UICommonFunctions.GetDisplayName(new Warehouse(), "WareHouseParent");
        lblAssociatedEntity = UICommonFunctions.GetDisplayName(new Warehouse(), "AssociatedEntity");
        lblIsExternal = UICommonFunctions.GetDisplayName(new Warehouse(), "IsExternal");
        lblIsTransformationFacility = UICommonFunctions.GetDisplayName(new Warehouse(), "IsTransformationFacility");
        lblScanSimulated = UICommonFunctions.GetDisplayName(new Warehouse(), "ScanSimulated");
        lblIsInventoryControlled = UICommonFunctions.GetDisplayName(new Warehouse(), "IsInventoryControlled");
        lblInventoryTransactionalItemType = UICommonFunctions.GetDisplayName(new Warehouse(), "InventoryTransactionalItemType");
        lblWarehouseAddress = UICommonFunctions.GetDisplayName(new Warehouse(), "WarehouseAddress");
        lblContactPerson = UICommonFunctions.GetDisplayName(new Warehouse(), "ContactPerson");
        lblIsActive = UICommonFunctions.GetDisplayName(new Warehouse(), "IsActive");
        if (Id != null)
        {
            await GetWarehouseById(Id);

        }

        warehouseList = await warehouseService.GetWarehouseList("all");
        itemType = await transactionalItemsService.GetSelectorListTransactionalItemTypes();

    }

    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        SearcherValueMode = Element;
        if (Element == "WareHouseParent" && !PopupViewEntitiesWarehouseParent) { PopupViewEntitiesWarehouseParent = true; }
        if (Element == "Contact" && !PopupViewEntitiesContact) { PopupViewEntitiesContact = true; }
        StateHasChanged();
    }

    protected async void EventSearcherValue(string value)
    {
        if (SearcherValueMode == "WareHouseParent")
        {
            WareHouseParentList = await actorsNodeServive.GetEntityActorFaceList(value);
            ParamCountResul = WareHouseParentList != null ? WareHouseParentList.Count() : 0;
        }

        if (SearcherValueMode == "Contact")
        {
            ContactList = await actorsNodeServive.GetEntityActorFaceList(value);
            ParamCountResul = ContactList != null ? ContactList.Count() : 0;
        }

        if (ParamCountResul > 0) { ViewSelect = true; } else { ViewSelect = false; }
        await Refresh();
    }

    protected async void EventIdSelectionInput(string selectionId)
    {
        if (SearcherValueMode == "WareHouseParent")
        {
            Parent = WareHouseParentList.Where(c => c.Id == selectionId).FirstOrDefault();
        }

        if (SearcherValueMode == "Contact")
        {
            Contact = ContactList.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        Reload();
        await Refresh();
    }


    public async Task Refresh()
    {
        if (refInputTextSelector != null) await refInputTextSelector.Refresh();
        StateHasChanged();
    }


    private void Reload()
    {
        PopupViewEntitiesWarehouseParent = false;
        PopupViewEntitiesContact = false;
    }

    private void ValueChangeAssociationEntity(ChangeEventArgs<string, Warehouse> args)
    {
        WareHouseParent = args.ItemData;
    }

    private void ValueChangeItemType(ChangeEventArgs<string, TransactionalItemType> args)
    {
        transactionalItemType = args.ItemData;
    }

    private async Task GetWarehouseById(string warehouseId)
    {
        if (warehouseId != "" && warehouseId != "NewWarehouse")
        {
            var warehouseById = await warehouseService.GetWarehouseById(warehouseId);
            if (warehouseById != null)
            {
                warehouse.Name = warehouseById.Name;
                WareHouseParent = warehouseById.WareHouseParent;
                Parent = warehouseById.WareHouseParent;
                isExternal = warehouseById.IsExternal;
                isTransformationFacility = warehouseById.IsTransformationFacility;
                scanSimulated = warehouseById.ScanSimulated;
                isInventoryControlled = warehouseById.IsInventoryControlled;
                Contact = warehouseById.ContactPerson;
                isActive = warehouseById.IsActive;
                transactionalItemType.Name = warehouseById.InventoryTransactionalItemType.Name;
                address = warehouseById.WarehouseAddress;
                StateHasChanged();
            }
        }
    }

    private async void SaveWareHouse(string warehouseId, Warehouse warehouse)
    {
        if((warehouseId == null || warehouseId != null ) && warehouse != null)
        {
            if (Id != "" || Id != "NewWarehouse")
                warehouse.Id = Id;
            var city = actorsNodeServive.tempCity;
            var region = actorsNodeServive.tempRegion;
            var country = actorsNodeServive.tempCountry;
            var address = actorsNodeServive.tempAddress;
            //if (city != null)
            //    warehouse.WarehouseAddress = city.Id;
            if (address != null)
            {
                if(city != null && region != null && country != null)
                {
                    address.CityAddressRef = city.Id;
                    address.CityAddress = city;
                    address.CityAddress.RegionCity = region;
                    address.CityAddress.RegionCity.CountryRegion = country;
                    warehouse.WarehouseAddress = address;
                }
            }
            warehouse.WareHouseParent = WareHouseParent;
            warehouse.AssociatedEntity = Parent;
            warehouse.IsExternal = isExternal;
            warehouse.IsTransformationFacility = isTransformationFacility;
            warehouse.ScanSimulated = scanSimulated;
            warehouse.InventoryTransactionalItemType = transactionalItemType;
            warehouse.ContactPerson = Contact;
            warehouse.IsActive = isActive;
            await warehouseService.SaveWarehuse(warehouse);
            StateHasChanged();
        }
        
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/WarehousesGeneral");
    }


}