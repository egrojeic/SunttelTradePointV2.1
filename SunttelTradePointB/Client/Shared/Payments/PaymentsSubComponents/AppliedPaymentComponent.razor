@page "/AppliedPayment"
@page "/AppliedPayment/{_filterItems}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Accounting
@using Syncfusion.Blazor.SplitButtons
@inject SunttelTradePointB.Client.Services.PaymentServices.PaymentServices PaymentServices
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<MessageSaveComponent isVisible="isVisible" message="@msg">
</MessageSaveComponent>

<PageTitleComponent Title="Payment Vias" IconName="Payments.png"
                    Description="With this tool you can create and edit payment vias ">
</PageTitleComponent>




 <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
        <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

        <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
            </DropDownMenuItems>
        </SfSplitButton>


    </div>


    <div class="flex-horizontal-center">
        <div class="grid-mode-row grid-colum">
        <div><label>@GetName("InvoiceCode",new AppliedPayment())</label></div>
              <InputTextDisable TypeInt="false" Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueString="@appliedPayment.InvoiceCode"></InputTextDisable>

        <div><label>@GetName("InvoicePO",new AppliedPayment())</label></div>
        <InputTextDisable TypeInt="false" Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueString="@appliedPayment.InvoicePO"></InputTextDisable>

     
        <div><label>@GetName("InvoiceDate",new AppliedPayment())</label></div>
        <input type="date" class="" @bind-value="@appliedPayment.InvoiceDate" />

        <div><label class="sub-tile">@GetName("InvoiceBuyer",new Payment())</label></div>
        <div>
            <InputTextSelector3 TItem="Concept"
                                Id="Receiver"
                                caption="@(appliedPayment.InvoiceBuyer !=null ?appliedPayment.InvoiceBuyer?.Name:"" )"
                                Items="InvoiceBuyerList"
                                EventIdSelectionAndId="EventIdSelectionAndId"
                                EventSearcherValueAndId="EventSearcherValueAndId">
            </InputTextSelector3>
        </div>


        <div><label>@GetName("AppliedAmount",new AppliedPayment())</label></div>
        <InputTextDisable TypeInt="true" Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueDouble="@appliedPayment.AppliedAmount"></InputTextDisable>

        <div><label>@GetName("AppliedAmount",new AppliedPayment())</label></div>
        <InputTextDisable TypeInt="true" Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueDouble="@appliedPayment.AppliedAmount"></InputTextDisable>
      
        <div><label>@GetName("Discount",new AppliedPayment())</label></div>
        <InputTextDisable TypeInt="true" Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueDouble="@appliedPayment.Discount"></InputTextDisable>
       
        <div><label>@GetName("Credit",new AppliedPayment())</label></div>
        <InputTextDisable TypeInt="true" Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueDouble="@appliedPayment.Credit"></InputTextDisable>


        </div>
    </div>


@code {
    [Parameter]
    public string _filterItems { get; set; }
    public AppliedPayment appliedPayment { get; set; }

    string SearcherValue = "";
    string msg = ""; 
    bool isLoading = false;
    bool isVisible = false;


    #region List
    List<Concept> InvoiceBuyerList {get; set; }

    #endregion List 


    protected async override void OnInitialized()
    {       
        base.OnInitialized();

    }


    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void Add()
    {

    }


    public async void ItemSelected(MenuEventArgs e)
    {

        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {


            var result = await PaymentServices.SaveAppliedPayment(appliedPayment);
            if (true)
            {

                alert("Saved", 0);
                appliedPayment = result;
            }
            else
            {
                alert("No saved", 1);
            }

        }


        StateHasChanged();

    }



    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();

        if (SearcherValue == "Receiver")
        {          
            InvoiceBuyerList = await PaymentServices.GetReceiverList(arg.value, false);
        }      

        StateHasChanged();
    }


    public void EventIdSelectionAndId(Concept item)
    {

        if (SearcherValue == "Receiver")
        {
            var arg =  new BuyerInfoForPayment();
            arg.Name = item != null ? item?.Name : "";
            arg.Code = item != null ? item?.Code : "";
            arg.Id = item != null ? item?.Id : "";
            appliedPayment.InvoiceBuyer = arg;
        }
    }

    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        msg = _msg;

        StateHasChanged();
    }

    public void alert(string _msg)
    {
        isVisible = true;
        msg = _msg;

        StateHasChanged();
    }


    public void Home()
    {            
        Navigation.NavigateTo($"/PaymentItem");
    }

    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");

    }

}
