@page "/PaymentItem"
@page "/PaymentItem/{PaymentItemId}"
@page "/PaymentItem/{PaymentItemId}/{filter}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@using SunttelTradePointB.Shared.Accounting
@using SunttelTradePointB.Client.Shared.Payments.PaymentsSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.PaymentServices.PaymentServices PaymentServices

@inject ContextMenuService ContextMenuService

@*@inject IJSRuntime Js*@

<MessageSaveComponent isVisible="isVisible" message="@msg">
</MessageSaveComponent>
<PageTitleComponent Title=" Payment"
                    Description="Here you can add payment" IconName="Payments.png">
</PageTitleComponent>


<form>





    <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
        <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

        <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
            </DropDownMenuItems>
        </SfSplitButton>


    </div>



    <div class="grid-columns-header grid-columns-6">

        <div><label class="sub-tile">@GetName("DocumentType",new CommercialDocument())</label></div>
        <div>
            <select @onchange="SelectItemDocumentType" class="select-style">

                @if (documentTypeList != null && documentTypeList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (documentTypeList != null)
                {
                    @foreach (var item in documentTypeList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                @if (payment != null && payment.DocumentType != null)
                {
                    <option value="@payment.DocumentType.Id" selected>@payment.DocumentType.Name</option>
                }
            </select>
        </div>

        <div><label>@GetName("Code",new Payment())</label></div>
        <InputTextDisable Enable="true" style="font-size:15px; font-weight:none; " @bind-ValueString="@payment.Code"></InputTextDisable>


        <div><label>@GetName("PaymentRef",new Payment())</label></div>
        <InputTextDisable Enable="true" style="font-size:15px; font-weight:none; " @bind-ValueString="@payment.PaymentRef"></InputTextDisable>

        <div><label>@GetName("Payer",new Payment())</label></div>
        <input type="data" @bind-value="@payment.PaymentDate" class="form-control" />

        <div><label class="sub-tile">@GetName("Payer",new Payment())</label></div>
        <div>
            <InputTextSelector3 TItem="Concept"
                                Id="Payer"
                                caption="@(payment.Payer !=null ?payment.Payer?.Name:"" )"
                                Items="@PayerList"
                                EventIdSelectionAndId="EventIdSelectionAndId"
                                EventSearcherValueAndId="EventSearcherValueAndId">

            </InputTextSelector3>
        </div>

        <div><label class="sub-tile">@GetName("Receiver",new Payment())</label></div>
        <div>
            <InputTextSelector3 TItem="Concept"
                                Id="Receiver"
                                caption="@(payment.Receiver !=null ?payment.Receiver?.Name:"" )"
                Items="ReceiverList"
                EventIdSelectionAndId="EventIdSelectionAndId"
                EventSearcherValueAndId="EventSearcherValueAndId">
            </InputTextSelector3>
        </div>

        <div><label class="sub-tile">@GetName("DocPaymentMode",new Payment())</label></div>
        <div>
            <select @onchange="SelectItemDocumentType" class="select-style">

                @if (docPaymentModeList != null && docPaymentModeList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (docPaymentModeList != null)
                {
                    @foreach (var item in docPaymentModeList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                @if (payment != null && payment.DocumentType != null)
                {
                    <option value="@payment.DocPaymentMode.Id" selected>@payment.DocPaymentMode.Name</option>
                }
            </select>
        </div>

        <div><label class="sub-tile">@GetName("Status",new Payment())</label></div>
        <Status Name="@(payment.Status !=null ? payment.Status.Name:"")"></Status>

        <div><label class="sub-tile">@GetName("DocPaymentVia",new Payment())</label></div>
        <div>
            <select @onchange="SelectItemDocumentType" class="select-style">

                @if (docPaymentModeList != null && docPaymentModeList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (docPaymentViaList != null)
                {
                    @foreach (var item in docPaymentViaList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                @if (payment != null && payment.DocPaymentVia != null)
                {
                    <option value="@payment.DocPaymentVia.Id" selected>@payment.DocPaymentVia.Name</option>
                }
            </select>
        </div>

        <div><label>@GetName("Surplus",new Payment())</label></div>
        <InputTextDisable Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueDouble="@payment.Surplus"></InputTextDisable>

        <div><label>@GetName("PaymentValue",new Payment())</label></div>
        <InputTextDisable Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueDouble="@payment.PaymentValue"></InputTextDisable>
          
        <div><label>@GetName("DiscountReason",new Payment())</label></div>
        <InputTextDisable Enable="true" style="font-size:15px; font-weight:none;" @bind-ValueDouble="@payment.PaymentValue"></InputTextDisable>
     

    </div>

    <hr />

    <SfTab Height="250px" CssClass="tab-adaptive" HeaderPlacement="HeaderPosition.Left">
        <TabAnimationSettings>
            <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
            <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
        </TabAnimationSettings>
        <TabItems>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("ImportFileRecords",new Payment())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="container-item">


                        @if (isLoading)
                        {

                            <WaitingProcessIndicator loadingTopic="Import File Records"></WaitingProcessIndicator>

                        }
                        else
                        {
                            <div class="detailsTitleContainer" style="width:100%;">
                                <h3 class="subTitleDetailForm">@GetName("ImportFileRecords",new Payment())</h3>
                                <svg style="margin-left:20px;" title="Add new Recipe Item" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style " viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                             @if (ImportFileRecordList != null)
                            {
                            <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        PageSize="50"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@ImportFileRecordList"
                                        TItem="PaymentImportFileRecord"
                                        ColumnWidth="300px"
                                        SelectionMode="DataGridSelectionMode.Single"
                                        LogicalFilterOperator="LogicalFilterOperator.Or"
                                        CellContextMenu="@ShowContextMenuCommercialDocument">
                                <Columns>

                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="PayerCode" Title="@GetName("PayerCode", new PaymentImportFileRecord())" Width="200px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="PaymentDocRef" Title="@GetName("PaymentDocRef", new PaymentImportFileRecord())" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="PaymentDocDate" Title="@GetName("PaymentDocDate", new PaymentImportFileRecord())" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="InvoiceToPay" Title="@GetName("InvoiceToPay", new PaymentImportFileRecord())" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="PaymentDocRef" Title="@GetName("PaymentDocRef", new PaymentImportFileRecord())" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="PONumberToPay" Title="@GetName("PONumberToPay", new PaymentImportFileRecord())" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="InvoiceTotalAmount" Title="@GetName("InvoiceTotalAmount", new PaymentImportFileRecord())" Filterable="false" Sortable="false" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="Discount" Title="@GetName("Discount", new PaymentImportFileRecord())" Filterable="false" Sortable="false" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="Credits" Title="@GetName("Credits", new PaymentImportFileRecord())" Filterable="false" Sortable="false" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="DiscountReason" Title="@GetName("DiscountReason", new PaymentImportFileRecord())" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="HasCustomerError" Title="@GetName("HasCustomerError", new PaymentImportFileRecord())" Width="208px" />
                                    <RadzenDataGridColumn TItem="PaymentImportFileRecord" Property="HasInvoiceError" Title="@GetName("HasInvoiceError", new PaymentImportFileRecord())" Width="208px" />

                                </Columns>
                            </RadzenDataGrid>
                            }
                        }

                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="@GetName("AppliedPayments",new Payment())"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div class="container-item">


                        @if (isLoading)
                        {

                            <WaitingProcessIndicator loadingTopic="App lied Payments"></WaitingProcessIndicator>

                        }
                        else
                        {
                            <div class="detailsTitleContainer" style="width:100%;">
                                <h3 class="subTitleDetailForm">@GetName("AppliedPayments",new Payment())</h3>
                                <svg @onclick='()=>EventIdSelectionMenuItem("AppliedPayment")' style="margin-left:20px;" title="Add new Recipe Item" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style " viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                            @if (appliedPaymentList != null)
                            {

                                <RadzenDataGrid AllowFiltering="true"
                                        AllowColumnResize="true"
                                        AllowAlternatingRows="true"
                                        FilterMode="FilterMode.Advanced"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowSorting="true"
                                        PageSize="50"
                                        AllowPaging="true"
                                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                        ShowPagingSummary="true"
                                        Data="@appliedPaymentList"
                                        TItem="AppliedPayment"
                                        ColumnWidth="300px"
                                        SelectionMode="DataGridSelectionMode.Single"
                                        LogicalFilterOperator="LogicalFilterOperator.Or"
                                        CellContextMenu="@ShowContextMenuCommercialDocument">
                                <Columns>


                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="InvoiceCode" Title="@GetName("InvoiceCode", new AppliedPayment())" Width="308px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="PaymentDocRef" Title="@GetName("PaymentDocRef", new AppliedPayment())" Width="208px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="InvoicePO" Title="@GetName("InvoicePO", new AppliedPayment())" Width="208px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="InvoiceDate" Title="@GetName("InvoiceDate", new AppliedPayment())" Width="208px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="InvoiceBuyer" Title="@GetName("InvoiceBuyer", new AppliedPayment())" Width="208px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="InvoiceTotalAmount" Title="@GetName("InvoiceTotalAmount", new AppliedPayment())" Filterable="false" Sortable="false" Width="208px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="AppliedAmount" Title="@GetName("AppliedAmount", new AppliedPayment())" Filterable="false" Sortable="false" Width="208px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="Discount" Title="@GetName("Discount", new AppliedPayment())" Filterable="false" Sortable="false" Width="208px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="Credit" Title="@GetName("Credit", new AppliedPayment())" Filterable="false" Sortable="false" Width="208px" />
                                    <RadzenDataGridColumn TItem="AppliedPayment" Property="DiscountReason" Title="@GetName("DiscountReason", new AppliedPayment())" Filterable="false" Sortable="false" Width="208px" />

                                </Columns>
                            </RadzenDataGrid>
                            }
                        }


                    </div>
                </ContentTemplate>
            </TabItem>

            <TabItem>
                <ChildContent>
                    <TabHeader Text="Payment With"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <PaymentWith></PaymentWith>
                </ContentTemplate>
            </TabItem>

        </TabItems>
    </SfTab>


</form>




@code {


    [Parameter]
    public string paymentItemId { get; set; }
    [Parameter]
    public string filter { get; set; }
    public Payment payment { get; set; }

    TextToSpeech textToSpeech;


    #region Status

    #endregion Status

    #region List
    public List<PaymentType> documentTypeList = new();
    public List<PaymentMode> docPaymentModeList { get; set; }
    public List<PaymentVia> docPaymentViaList { get; set; }
    public List<PaymentImportFileRecord> ImportFileRecordList { get; set; }
    public List<AppliedPayment> appliedPaymentList { get; set; }
    public List<Concept> PayerList { get; set; }
    public List<Concept> ReceiverList { get; set; }

    #endregion List


    MessageSaveComponent? referAlert;
    string msg = "";
    bool isLoading = false;
    string SearcherValue = "";
    bool isVisible = false;

   

    protected override async void OnInitialized()
    {

        //isLoading = true;

        Load();
        //if (paymentItemId != null)
        //{
        //    payment = await PaymentServices.GetPaymentById(paymentItemId);
        //}
        //Load();
        //documentTypeList = await PaymentServices.GetPaymentTypeList(0, 1, (filter != null ? filter : "all"));
        //docPaymentModeList = await PaymentServices.GetPaymentModesList(0, 1, (filter != null ? filter : "all"));
        //docPaymentViaList = await PaymentServices.GetPaymentViasList(0, 1, (filter != null ? filter : "all"));
        ////  PaymentStatustViatList =   await PaymentServices.GetPaymentStatusList(0,1,(filter != null ? filter : "all"));
        //isLoading = false;
        //Load();
        //StateHasChanged();
    }



    public async void ItemSelected(MenuEventArgs e)
    {
        string msg = Validate();
        if (msg == "")
        {
            StateHasChanged();
            string tile = e.Item != null ? e.Item.Text : "";
            if (tile == "Save")
            {
                Load();

                var result = await PaymentServices.SavePaymentItem(payment);
                if (true)
                {
                    alert("Saved", 0);

                }
                else
                {
                    alert("required fields", 1);
                }

            }
        }
        else
        {
            alert("Saved", 1);
        }

        StateHasChanged();

    }



    public void SelectItemDocumentType(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {

    }



    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();
        if (payment.DocumentType != null)
        {

            if (SearcherValue == "Payer" && payment.DocumentType !=null)
            {

                PayerList = await PaymentServices.GetPayerList(arg.value, payment.DocumentType.IsASale);
            }
            if (SearcherValue == "Receiver" && payment.DocumentType != null)
            {
                //payment.DocumentType.IsSale
                ReceiverList = await PaymentServices.GetReceiverList(arg.value, payment.DocumentType.IsASale);
            }
        }

        StateHasChanged();
    }


    public void EventIdSelectionAndId(Concept item)
    {
        if (SearcherValue == "Payer")
        {
            // payment.DocumentType.IsSale
            payment.Payer = item;
        }
        if (SearcherValue == "Receiver")
        {
            payment.Receiver = item;
        }
    }



    public void EventIdSelectionMenuItem(string name)
    {
        try{
            //Js.InvokeAsync<object>("open", name, "_blank");
        }
        catch
        {
            
        }
    }



    #region Grid

    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<AppliedPayment> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClickAppliedPayment">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
          );

    void OnMenuItemClickAppliedPayment(MenuItemEventArgs args)
    {
        AppliedPayment argObj = (AppliedPayment)args.Value;

        Navigation.NavigateTo($"SaleItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    void ShowContextMenuCommercialDocument(DataGridCellMouseEventArgs<PaymentImportFileRecord> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );


    void OnMenuItemClick(MenuItemEventArgs args)
    {
        PaymentImportFileRecord argObj = (PaymentImportFileRecord)args.Value;

        Navigation.NavigateTo($"SaleItem/{argObj.Id}");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    #endregion grid





    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        msg = _msg;

        StateHasChanged();
    }

    public void alert(string _msg)
    {
        isVisible = true;
        msg = _msg;

        StateHasChanged();
    }

    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/Payments/{paramFilter}");
        Navigation.NavigateTo($"/Payments");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }



    public string Validate()
    {
        string msg = "";

        return msg;
    }


    #region Load

    public void Load()
    {
        if (payment == null) payment = new();
        if (payment.DocPaymentMode == null) payment.DocPaymentMode = new();
        if (payment.DocPaymentVia == null) payment.DocPaymentVia = new();
        if (payment.DocumentType == null) payment.DocumentType = new();
        if (payment.ImportFileRecords == null) payment.ImportFileRecords = new();
        if (payment.Payer == null) payment.Payer = new();
        if (payment.PaymentWithCredits == null) payment.PaymentWithCredits = new();
        if (payment.PaymentWithOverpayments == null) payment.PaymentWithOverpayments = new();
        if (payment.PaymentWithOverplus == null) payment.PaymentWithOverplus = new();
        if (payment.Receiver == null) payment.Receiver = new();
        if (payment.ReturnInfo == null) payment.ReturnInfo = new();
        if (payment.Status == null) payment.Status = new();
        if (payment.PaymentDate == DateTime.MinValue) payment.PaymentDate = DateTime.Now;
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }

}
