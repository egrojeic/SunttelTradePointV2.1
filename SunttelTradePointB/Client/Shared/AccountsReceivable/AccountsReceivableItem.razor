@page "/AccountsReceivableippingItem"
@page "/AccountsReceivableippingItem/{accountsReceivableippingId}/{filter}"


@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Client.Shared.Sales.SaleItemSubComponents
@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeServive
@inject IJSRuntime Js

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }
</style>

<MessageSaveComponent isVisible="isVisible" message="@alertMsg">
</MessageSaveComponent>
<PageTitleComponent Title="Accounts Receivableipping"
                    Description="Here you can follow Accounts Receivableipping" IconName="commercialDocument.png">
</PageTitleComponent>


<form>

   

    @if (page == "")
    {

        <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
            <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>          
      
        </div>


        <SliderScrollAuto summary="@commercialDocument.FinanceSummary"></SliderScrollAuto>
        <TextToSpeech @ref="textToSpeech" Id="FinanceSummary" EventChange="EventChange" Class="speack">
        </TextToSpeech>
        <div class="grid-columns-header grid-columns-6">

            <div class="item-1">
                <div><label class="info-text-size">@GetName("ShippingStatusDocument",new CommercialDocument())</label></div>
                <Status color="#61c100" Name="@(commercialDocument.ShippingStatusDocument !=null ? commercialDocument.ShippingStatusDocument.Name:"")"></Status>

                <div><label class="info-text-size">@GetName("FinanceStatusDocument",new CommercialDocument())</label></div>
                <Status Name="@(commercialDocument.FinanceStatusDocument !=null ? commercialDocument.FinanceStatusDocument.Name:"")"></Status>

                <div><label class="info-text-size">@GetName("PrintingSatus",new CommercialDocument())</label></div>
                <StatusItem item="commercialDocument.PrintingSatus"></StatusItem>

                <div class="item-check">
                    <div><label class="info-text-size">@GetName("MarkedForQCInspection",new CommercialDocument())</label></div>
                    <div>
                        <SfSwitch @bind-Checked="@commercialDocument.MarkedForQCInspection"></SfSwitch>
                    </div>
                    <div><label class="info-text-size">@GetName("ToInvoice",new CommercialDocument())</label></div>
                    <div>
                        <SfSwitch @bind-Checked="@commercialDocument.ToInvoice"></SfSwitch>
                    </div>
                </div>

            </div>
            <div><label class="info-text-size">@GetName("DocumentType",new CommercialDocument())</label></div>

            <div>
                <select @onchange="SelectItemDocumentType" class="select-style info-text-size">

                    @if (documentTypeList != null && documentTypeList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @if (documentTypeList != null)
                    {
                        @foreach (var item in documentTypeList)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }
                    @if (commercialDocument != null && commercialDocument.DocumentType != null)
                    {
                        <option value="@commercialDocument.DocumentType.Id" selected>@commercialDocument.DocumentType.Name</option>
                    }
                </select>
            </div>



            <div><label class="info-text-size">@GetName("DocumentNumber",new CommercialDocument())</label></div>
            <InputTextDisable style="width:180px" Enable="@(commercialDocument.DocumentType !=null && commercialDocument.DocumentType.DocNumberAutogenerated !=null ? commercialDocument.DocumentType.DocNumberAutogenerated:false)"
                          TypeInt="true"
                          @bind-ValueInt="commercialDocument.DocumentNumber">
            </InputTextDisable>

            <div><label class="info-text-size">@GetName("PO",new CommercialDocument())</label></div>
            <InputTextDisable Enable="true" TypeInt="false" @bind-ValueString="commercialDocument.PO"></InputTextDisable>

            <div><label class="info-text-size">@GetName("ShipDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.ShipDate" class="form-control" /></div>

            <div><label class="info-text-size">@GetName("DeliveryDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.DeliveryDate" class="form-control" /></div>

            <div><label class="info-text-size">@GetName("ArrivalDate",new CommercialDocument())</label></div>
            <div><input type="date" @bind-value="commercialDocument.ArrivalDate" class="form-control" /></div>

            <div><label class="info-text-size">@GetName("Vendor",new CommercialDocument())</label></div>
            <div class="Vendor">
                <InputTextSelector3 styleCaption="min-width: 27vw;" TItem="Concept"
                                Id="Vendor"
                                caption="@(commercialDocument.Vendor !=null ? commercialDocument.Vendor?.Name:"" )"
                                Items="vendorList"
                                EventIdSelectionAndId="EventIdSelectionAndId"
                                EventSearcherValueAndId="EventSearcherValueAndId">

                </InputTextSelector3>
            </div>

            <div><label class="info-text-size">@GetName("Buyer",new CommercialDocument())</label></div>
            <div class="Buyer">
                <InputTextSelector3 styleCaption="min-width: 27vw;" TItem="Concept"
                                Id="Buyer"
                                caption="@(commercialDocument.Buyer !=null ? commercialDocument.Buyer?.Name:"" )"
                                Items="buyerList"
                                EventIdSelectionAndId="EventIdSelectionAndId"
                                EventSearcherValueAndId="EventSearcherValueAndId">

                </InputTextSelector3>
            </div>

            <div><label class="info-text-size">@GetName("SalesPerson",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px; " style="right:-110px;" TItem="Concept"
                            Id="SalesPerson"
                            caption="@(commercialDocument.SalesPerson !=null ? commercialDocument.SalesPerson?.Name:"" )"
                            Items="salesPersonList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">
            </InputTextSelector3>

            <div><label class="info-text-size">@GetName("DeliveryAddress",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemDeliveryAddress" class="select-style info-text-size">


                    @if (addressList != null && addressList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in addressList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                    @if (commercialDocument != null && commercialDocument.DeliveryAddress != null)
                    {
                        <option value="@commercialDocument.DeliveryAddress.Id" selected>@commercialDocument.DeliveryAddress.Name</option>
                    }
                </select>
            </div>

            <div><label class="info-text-size">@GetName("Season",new CommercialDocument())</label></div>
            <InputTextSelector3 styleCaption="width:180px" style="right:-100px;" TItem="SeasonBusiness"
                            Id="Season"
                            caption="@(commercialDocument.Season !=null ? commercialDocument.Season?.Name:"" )"
                            Items="seasonList"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId">
            </InputTextSelector3>

            <div><label class="info-text-size">@GetName("Carrier",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style info-text-size">

                    @if (carrierList != null && carrierList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in carrierList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                    @if (commercialDocument.Carrier != null)
                    {
                        <option value="@commercialDocument.Carrier.Id" selected>@commercialDocument.Carrier.Name</option>
                    }
                </select>
            </div>

            <div><label class="info-text-size">@GetName("TrackingNumber",new CommercialDocument())</label></div>
            <InputTextDisable Enable="true" TypeInt="false" @bind-ValueString="commercialDocument.TrackingNumber"></InputTextDisable>

            <div><label class="info-text-size">@GetName("VendorWarehouse",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style info-text-size">

                    @if (vendorWarehouseList != null && vendorWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in vendorWarehouseList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                    @if (commercialDocument.VendorWarehouse != null)
                    {
                        <option value="@commercialDocument.VendorWarehouse.Id" selected>@commercialDocument.VendorWarehouse.Name</option>
                    }
                </select>
            </div>

            <div><label class="info-text-size">@GetName("BuyerWarehouse",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemVendorWarehous" class="select-style info-text-size">

                    @if (buyerWarehouseList != null && buyerWarehouseList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in buyerWarehouseList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                    @if (commercialDocument.BuyerWarehouse != null)
                    {
                        <option value="@commercialDocument.BuyerWarehouse" selected>@commercialDocument.BuyerWarehouse.Name</option>
                    }
                </select>
            </div>

            <div><label class="info-text-size">@GetName("BusinessLineDoc",new CommercialDocument())</label></div>
            <div>
                <select @onchange="SelectItemBusinessLineDoc" class="select-style info-text-size">

                    @if (businessLineDocList != null && businessLineDocList.Count() > 0)
                    {
                        <option value="0" selected>Select</option>
                    }
                    @foreach (var item in businessLineDocList)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                    @if (commercialDocument.BusinessLineDoc != null)
                    {
                        <option value="@commercialDocument.BusinessLineDoc.Id" selected>@commercialDocument.BusinessLineDoc.Name</option>
                    }
                </select>
            </div>


        </div>

        <hr />

        <SfTab Height="250px" CssClass="tab-adaptive info-text-size" HeaderPlacement="HeaderPosition.Left">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>

                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("Items",new CommercialDocument())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="container-item">
                            @if (commercialDocument.Items != null)
                            {
                                <SalesDocumentItems items="@commercialDocument.Items" alert="alert" buyerId="@commercialDocument.Buyer.Id" commercialDocumentId="@commercialDocument.Id"></SalesDocumentItems>
                            }
                        </div>
                    </ContentTemplate>
                </TabItem>

                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("SpecsNotes",new CommercialDocument())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div>
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName("SpecsNotes",new CommercialDocument())</h3>
                            </div>
                            <textarea @bind="commercialDocument.SpecsNotes" class="textarea-control"></textarea>
                        </div>
                    </ContentTemplate>
                </TabItem>

            </TabItems>
        </SfTab>
    }

</form>




@code {
    [Parameter]
    public string accountsReceivableippingId { get; set; }
    [Parameter]
    public string filter { get; set; }


    TextToSpeech textToSpeech;

    string page = "";
    string alertMsg = "";
    string SearcherValue = "";
    bool menuVisible = false;
    bool isVisible = false;
    bool isASale = true;
    public CommercialDocument commercialDocument = new();
    // public SalesDocumentItemsDetails items = new();

    #region Status
    public List<ShippingStatus> shippingStatusDocumentList = new();
    public List<FinanceStatus> financeStatusDocumentList = new();
    #endregion Status

    #region Input3
    public List<CommercialDocumentType> documentTypeList = new();
    public List<BusinessLine> businessLineDocList = new();
    public List<Concept> salesPersonList = new();
    public List<Concept> vendorList = new();
    public List<Concept> carrierList = new();
    public List<Concept> buyerList = new();
    public List<SeasonBusiness> seasonList = new();
    public List<CommercialDocument> originDocument = new();
    public List<BasicConcept> vendorWarehouseList = new();
    public List<BasicConcept> buyerWarehouseList = new();
    public List<Address> addressList = new();

    #endregion Input3


    MessageSaveComponent? referAlert;
    string msg = "";
    bool isLoading = false;

    protected override void OnParametersSet()
    {
        var r = page;
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {

        isLoading = true;
        StateHasChanged();
        if (accountsReceivableippingId != null)
        {
            commercialDocument = await DocumentServices.GetItemCommercialDocumentById(accountsReceivableippingId);
            if( commercialDocument.Items==null) commercialDocument.Items = new();
            commercialDocument.Items = await DocumentServices.GetCommercialDocumentDetails(accountsReceivableippingId);
        }

        documentTypeList = await DocumentServices.GetCommercialDocumentTypes(isASale);
        businessLineDocList = await DocumentServices.GetCommercialBusinessLines("all");

        carrierList = await DocumentServices.GetCarrierList();
        LoadCommercialDocument();
        isLoading = false;
        StateHasChanged();
    }



    public async void ItemSelected(MenuEventArgs e)
    {
        string msg = Validate();
        if (msg == "")
        {
            StateHasChanged();
            string tile = e.Item != null ? e.Item.Text : "";
            if (tile == "Save")
            {
                LoadCommercialDocument();
                var result = await DocumentServices.SaveCommercialDocument(commercialDocument);
                if (result != null)
                {
                    alert("Saved", 0);
                    commercialDocument = result;
                }
                else
                {
                    alert("required fields", 1);
                }

            }
        }
        else
        {
            alert("Saved", 1);
        }

        StateHasChanged();

    }


    public void SelectItemVendorWarehous(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.VendorWarehouse = vendorWarehouseList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }

    public void SelectItemDeliveryAddress(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.DeliveryAddress = addressList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();

    }

    public void SelectItemBusinessLineDoc(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.BusinessLineDoc = businessLineDocList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();

    }

    public void SelectItemDocumentType(Microsoft.AspNetCore.Components.ChangeEventArgs arg)
    {
        commercialDocument.DocumentType = documentTypeList.Where(s => s.Id == arg.Value.ToString()).FirstOrDefault();
    }


    public string GetDeliveryAddress(Address address)
    {
        string _address = "";
        if (address != null)
        {
            _address = address.ZipCode;
            if (address.CityAddress != null && address.CityAddress.RegionCity != null && address.CityAddress.RegionCity.CountryRegion != null)
                _address += address.CityAddress.RegionCity.CountryRegion.Name;
        }
        return _address;
    }


    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();
        if (SearcherValue == "DocumentType")
        {
            documentTypeList = await DocumentServices.GetCommercialDocumentsTypes(arg.value, isASale);
        }
        if (SearcherValue == "Vendor")
        {
            vendorList = await DocumentServices.GetCommercialVendorList(arg.value, commercialDocument.DocumentType.IsASale);

        }
        if (SearcherValue == "SalesPerson")
        {
            salesPersonList = await DocumentServices.GetCommercialSalesPersonList(arg.value);
        }
        if (SearcherValue == "Buyer")
        {
            buyerList = await DocumentServices.GetCommercialBuyerList(arg.value, commercialDocument.DocumentType.IsASale);
        }
        if (SearcherValue == "Season")
        {
            seasonList = await DocumentServices.GetCommercialSeasonList(arg.value);
        }

        StateHasChanged();
    }


    public void EventIdSelectionAndId(CommercialDocumentType item)
    {
        commercialDocument.DocumentType = item;
    }

    public async void EventIdSelectionAndId(Concept item)
    {
        if (SearcherValue == "Vendor")
        {
            commercialDocument.Vendor = item;
            vendorWarehouseList = await DocumentServices.GetCommercialVendorWarehouseList(item.Id);

        }
        if (SearcherValue == "SalesPerson")
        {
            commercialDocument.SalesPerson = item;
        }
        if (SearcherValue == "Buyer")
        {
            commercialDocument.Buyer = item;
            buyerWarehouseList = await DocumentServices.GetCommercialBuyerWarehouseList(item.Id);
            addressList = await DocumentServices.GetEntityDetailsAddressList(item.Id);

        }
        LoadCommercialDocument();
        StateHasChanged();
    }

    public void EventIdSelectionAndId(SeasonBusiness item)
    {
        if (item != null)
        {
            commercialDocument.Season = item;
        }
    }


    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");
        CloseMenu(false);
    }

    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        alertMsg = _msg;

        StateHasChanged();
    }

    public void alert(string _msg)
    {
        isVisible = true;
        alertMsg = _msg;

        StateHasChanged();
    }

    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/Shipping/{paramFilter}");
        Navigation.NavigateTo($"/Shipping");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }

    public void CloseMenu(bool mode)
    {
        menuVisible = mode;
        StateHasChanged();
    }

    public string Validate()
    {
        string msg = "";
        if (commercialDocument == null) msg = "required fields";
        if (commercialDocument.DocumentType.Id == null) msg = "required fields";
        if (commercialDocument.Vendor.Id == null) msg = "required fields";
        if (commercialDocument.Buyer.Id == null) msg = "required fields";
        if (commercialDocument.SalesPerson.Id == null) msg = "required fields";
        if (commercialDocument.BusinessLineDoc.Id == null) msg = "required fields";
        return msg;
    }


    #region Load

    public void LoadCommercialDocument()
    {
        if (commercialDocument == null) commercialDocument = new();
        if (commercialDocument.DocumentType == null) commercialDocument.DocumentType = new();
        if (commercialDocument.BusinessLineDoc == null) commercialDocument.BusinessLineDoc = new();
        if (commercialDocument.Vendor == null) commercialDocument.Vendor = new();
        if (commercialDocument.Buyer == null) commercialDocument.Buyer = new();
        if (commercialDocument.SalesPerson == null) commercialDocument.SalesPerson = new();
        if (commercialDocument.Carrier == null) commercialDocument.Carrier = new();
        if (commercialDocument.DeliveryAddress == null) commercialDocument.DeliveryAddress = new();
        if (commercialDocument.ShippingStatusDocument == null) commercialDocument.ShippingStatusDocument = new();
        if (commercialDocument.FinanceStatusDocument == null) commercialDocument.FinanceStatusDocument = new();
        if (commercialDocument.OriginDocument == null) commercialDocument.OriginDocument = new();
        if (commercialDocument.VendorWarehouse == null) commercialDocument.VendorWarehouse = new();
        if (commercialDocument.BuyerWarehouse == null) commercialDocument.BuyerWarehouse = new();
        if (commercialDocument.Season == null) commercialDocument.Season = new();
        if (commercialDocument.PrintingSatus == null) commercialDocument.PrintingSatus = new();
        if (commercialDocument.FinanceSummary == null) commercialDocument.FinanceSummary = new();
        if (commercialDocument.Items == null) commercialDocument.Items = new();
        if (commercialDocument.ShipDate == DateTime.MinValue) commercialDocument.ShipDate = DateTime.Today;
        if (commercialDocument.ArrivalDate == DateTime.MinValue) commercialDocument.ArrivalDate = DateTime.Today;




        if (businessLineDocList == null) businessLineDocList = new();
        if (documentTypeList == null) documentTypeList = new();
        if (salesPersonList == null) salesPersonList = new();
        if (vendorList == null) vendorList = new();
        if (carrierList == null) carrierList = new();
        if (buyerList == null) buyerList = new();
        if (seasonList == null) seasonList = new();
        if (originDocument == null) originDocument = new();
        if (vendorWarehouseList == null) vendorWarehouseList = new();
        if (buyerWarehouseList == null) buyerWarehouseList = new();
        if (addressList == null) addressList = new();


    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }
    public void EventChange(string item)
    {
        string value = "";

        if (item == "FinanceSummary" && commercialDocument.FinanceSummary != null)
        {
            value = $@"Total, Amount, {commercialDocument.FinanceSummary.TotalAmount}.";
            value += $@"Total, Taxes, {commercialDocument.FinanceSummary.TotalTaxes}.";
            value += $@"Total, Discounts, {commercialDocument.FinanceSummary.TotalDiscounts}.";
            value += $@"Total, Costs, {commercialDocument.FinanceSummary.TotalCosts}.";
            textToSpeech.Speack(value);
        }
        else
        {
            textToSpeech.Speack("Valor nulo,");
        }
        StateHasChanged();
    }
}
