@using SunttelTradePointB.Client.Services
@using System.Globalization
@using System.Security.Claims
@using System.Text.Json;
@inject NavigationManager Navigation
@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject SQuadService squadService;
@inject HttpClient HttpClient

@inject IJSRuntime JS;


<RadzenContextMenu/>
<RadzenDialog/>

<AuthorizeView>
    <Authorized>
       <SpeechRecognition></SpeechRecognition>
        <div class="top-row">
           
            <div style="@(!collapseNavMenu?"margin-left:20px;":"")" id="tradePointInfoSup">
                    <div id="TradePointIdentifierDiv">
                        <img src="/images/logo.png" id="tradePintLogo" />
                        <a class="sunttelbrand" href="" id="SunttelBrand">Sunttel Software</a>
                    </div>
                </div>

            <h1 id="helloUser">Hello @context.User.Identity.Name</h1>
            
           @* <h1 id="squadName">@squd.Nombre</h1>*@

          @*  <h1 id="currentDate">Date: @currentDate</h1>*@

            <h1 id="currentWeek">Week: @weekDate</h1>


            <button type="button" class="btn btn-link ml-md-auto" @onclick="@LogoutClick">Logout</button>

        </div>


        <div class="page">

            <div @onclick="ToggleNavMenu">
                <img class="btn-menu-close @(collapseNavMenu?"btn-menu-width-open":"btn-menu-width-close") "  src="@(collapseNavMenu?"/images/close.svg":"images/menu-1.svg")">
            </div>

            <div class="@(NavMenuCssClass)">
                <NavMenu />
            </div>

            <div class="main">
                @Body
            </div>


        </div>

    </Authorized>
</AuthorizeView>

@functions{

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    [Parameter]
    public bool collapseNavMenu { get; set; } = true;
    private string? NavMenuCssClass => collapseNavMenu ? "sidebar" : "sidebar-on";

    string currentDate = "";
    int weekDate = 0;


    protected override void OnInitialized()
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!(await AuthenticationState).User.Identity.IsAuthenticated)
        {

            navigationManager.NavigateTo("/login");
        }
        else {


            if (UIClientGlobalVariables.UserId == null || UIClientGlobalVariables.UserId == "")
            {
                UIClientGlobalVariables.UserName = user.Identity.Name;
                UIClientGlobalVariables.UserId = user.FindFirst(ClaimTypes.NameIdentifier).Value;

            }

        }



        if (Navigation.Uri.Contains("SalesFromProductList")) collapseNavMenu = false;
        if (Navigation.Uri.Contains("SalesFromInventroy")) collapseNavMenu = false;
        if (Navigation.Uri.Contains("SalesFromProductionOrder")) collapseNavMenu = false;
      

        StateHasChanged();


        try
        {
            if (UIClientGlobalVariables.PublicIpAddress==""){
                var response = await HttpClient.GetStringAsync("https://api.ipify.org");
                if (response == null || response == "")
                    response = "127.0.0.0";

                UIClientGlobalVariables.PublicIpAddress = response;
            }

        }
        catch (Exception)
        {
            var currentUri = new Uri(navigationManager.Uri);
            var publicIpAddress = currentUri.Host;
            UIClientGlobalVariables.PublicIpAddress = publicIpAddress;
        } 



    }



    async Task LogoutClick()
    {
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/login");
    }
    protected override async Task OnInitializedAsync()
    {
        //squd = await squadService.SquadInfo();
        currentDate = DateTime.Now.ToString("MM/d/yyyy");
        weekDate = GetIso8601WeekOfYear(DateTime.Now);
        //await JS.InvokeVoidAsync("localStorage.setItem", "SquadName", squd.Nombre);

    }

    public static int GetIso8601WeekOfYear(DateTime time)
    {
        // Seriously cheat.  If its Monday, Tuesday or Wednesday, then it'll 
        // be the same week# as whatever Thursday, Friday or Saturday are,
        // and we always get those right
        DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);
        if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday)
        {
            time = time.AddDays(3);
        }

        // Return the week of our adjusted day
        return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
    } 

   
  
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        
        StateHasChanged();
    }
 

}