@using SunttelTradePointB.Shared.IA;
@using SunttelTradePointB.Client.Pages.SalesPages
@using SunttelTradePointB.Client.Pages.MasterTables
@inject SunttelTradePointB.Client.Services.IAServices.IARecognition Recognition
@inject NavigationManager Navigation
@inject IJSRuntime Js

<div class="container">
    <div style="display:@(resulRecognition!=""?"block":"none");" class="item-1">
        <p class="text">@resulRecognition</p>
    </div>
    <div class="item-2">
        <img @ondblclick="ActiveRecognition" @onclick="StartRecognition" class="img-mic" src="@(GetIco())" />
        <img style="display:@(setTextRecognition?"block":"none");" class="img-load" src="/images/loadingIco.gif" />
    </div>
</div>



@code {
    [Parameter]
    public EventCallback<string> SetFilter{ get; set; }

    bool status = true;
    bool onstartRecognition = false;
    bool setTextRecognition = false;
    bool ondblclickEnable = false;
    bool recognitionEnable = false;
    string resulRecognition = "";

   
    DotNetObjectReference<SpeechRecognition> _reference;
    public async void StartRecognition()
    {
        await Task.Delay(TimeSpan.FromSeconds(1));
        if (status && !ondblclickEnable)
        {
            status = false;
            resulRecognition = "";
            StateHasChanged();
            await Js.InvokeVoidAsync("Recognition", false);


        }

    }

    public async void ActiveRecognition()
    {

        if (ondblclickEnable)
        {
            status = true;
            ondblclickEnable = false;
            StateHasChanged();
        }
        else
        {
            if (status)
            {

                status = false;
                resulRecognition = "";
                ondblclickEnable = true;
                StateHasChanged();
                await Js.InvokeVoidAsync("Recognition", true);
            } }


    }


    [JSInvokable]
    public async void SetTextRecognition(string result)
    {
        setTextRecognition = true;
        if (result.ToLower().Contains("buscar")) SetFilter.InvokeAsync(result.Replace("buscar",""));
        var RecognitionItem = await Recognition.GetValueRecognition(result);
        if (RecognitionItem != null)
        {
            if (RecognitionItem.Command == "Create")
            {
                try
                {
                     Js.InvokeAsync<object>("open", RecognitionItem.Page, "_blank");
                }
                catch { }
            }
        }
        resulRecognition = result;
        setTextRecognition = false;
    }

    [JSInvokable]
    public void OnstartRecognition()
    {
        onstartRecognition = true;
        status = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnEndRecognition()
    {
        status = true;
        onstartRecognition = false;
        ondblclickEnable = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnerrorRecognition()
    {
        ondblclickEnable = false;
        onstartRecognition = false;
        status = true;
        StateHasChanged();
    }

    public string GetIco()
    {
        if (ondblclickEnable) return "/images//headset.svg";
        if (onstartRecognition) return "/images//mic-on.svg";
        return "/images//mic-off.svg";
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (status)
        {
            _reference = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("LoadReference", _reference);

        }
    }


}
