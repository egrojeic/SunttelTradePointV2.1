@page "/CreditDocumentsItem/{page}"
@page "/CreditDocumentsItem/{page}/{creditDocumentsItemId}"
@page "/CreditDocumentsItem/{page}/{creditDocumentsItemId}/{filter}"
@page "/ProviderCreditsItem/{page}"
@page "/ProviderCreditsItem/{page}/{creditDocumentsItemId}"
@page "/ProviderCreditsItem/{page}/{creditDocumentsItemId}/{filter}"
@using SunttelTradePointB.Shared.Sales;
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection
@using SunttelTradePointB.Shared.Accounting

@inject NavigationManager Navigation
@inject SunttelTradePointB.Client.Services.CreditDocumentServices.CreditDocumentServices CreditDocumentServices
@inject SunttelTradePointB.Client.Services.SalesServices.SalesDocuments DocumentServices
@inject GeographicPlacesService geoPlaces
@inject ActorsNodeService actorsNodeServive
@inject IJSRuntime Js

<MessageSaveComponent isVisible="isVisible" message="@alertMsg">
</MessageSaveComponent>
<PageTitleComponent Title="@namePage"
                    Description="@($"Here you can add and edit {namePage.ToLower()}")" IconName="@icoLogo">
</PageTitleComponent>


<form>


    <div class="panelMenuContainer scroll-vertical" style="max-width:95%;">
        <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

        <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
            </DropDownMenuItems>
        </SfSplitButton>


    </div>



    <div class="grid-columns-header grid-columns-6">

        <div>
            <label class="info-text-size">
                @GetName("CreditDocumentType",new CreditDocument())
            </label>
        </div>
        <div>
            <select @onchange="SelectItem" class="select-style info-text-size">

                @if (creditTypeList != null && creditTypeList.Count() > 0)
                {
                    <option value="0" selected>Select</option>
                }
                @if (creditTypeList != null)
                {
                    @foreach (var item in creditTypeList)
                    {
                        <option value="@item.Id">@item.Name</option>
                        // falta .Name
                    }
                }
                @if (creditDocument.CreditDocumentType != null)
                {
                    <option value="@creditDocument.CreditDocumentType.Id" selected>@creditDocument.CreditDocumentType.Name</option>
                }
            </select>
        </div>


        <div><label class="info-text-size">@GetName("Code",new CreditDocument())</label></div>
        <InputTextDisable TypeInt="false" Enable="true" style=" font-weight:none; " @bind-ValueString="@creditDocument.Code"></InputTextDisable>


        <div><label class="info-text-size">@GetName("CreditDate",new CreditDocument())</label></div>
        <input type="date" @bind="@creditDocument.CreditDate" class="form-control info-text-size" />


        <div><label class="info-text-size">@GetName("Vendor",new CreditDocument())</label></div>


        <InputTextSelector3 TItem="Concept"
                            Id="Vendor"
                            caption="@(creditDocument.Vendor !=null ? creditDocument.Vendor.Name:"")"
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId"
                            Items="@vendorList"
                            style="left:auto;">
        </InputTextSelector3>


        <div><label class="info-text-size">@GetName("Buyer",new CreditDocument())</label></div>


        <InputTextSelector3 TItem="Concept"
                            Id="Buyer"
                            caption="@(creditDocument.Buyer !=null ? creditDocument.Buyer.Name:"")"                           
                            EventIdSelectionAndId="EventIdSelectionAndId"
                            EventSearcherValueAndId="EventSearcherValueAndId"
                            Items="@buyerList"
                            style="left:auto;">
        </InputTextSelector3>


    </div>

</form>




@code {
    [Parameter]
    public string creditDocumentsItemId { get; set; }
    [Parameter]
    public string filter { get; set; }
    [Parameter]
    public string page { get; set; } = "";


    TextToSpeech textToSpeech;
    string namePage = "";
    string backPage = "";
    string icoLogo = "";

    string alertMsg = "";
    string SearcherValue = "";
    bool menuVisible = false;
    bool isVisible = false;
    bool isASale = false;
    public CreditDocument creditDocument = new();


    #region Status

    #endregion Status

    #region Input3

    public List<Concept> vendorList = new();
    public List<Concept> buyerList = new();
    public List<CreditDocument> creditDocumentListr { get; set; }
    public List<CreditType> creditTypeList { get; set; }

    #endregion Input3


    MessageSaveComponent? referAlert;
    string msg = "";
    bool isLoading = false;

    protected override void OnParametersSet()
    {
        ValidateUri();
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        ValidateUri();
        isLoading = true;
        StateHasChanged();
        if (creditDocumentsItemId != null)
        {
            creditDocument = await CreditDocumentServices.GetCreditDocumentById(creditDocumentsItemId);

        }
        creditTypeList = await CreditDocumentServices.GetCreditTypes((filter != null ? filter : "all"), 1, 20);
        LoadDocument();
        isLoading = false;
        StateHasChanged();
    }


    //protected override void OnAfterRender(bool firstRender)
    //{
    //    StateHasChanged();
    //    base.OnAfterRender(firstRender);
    //}


    public async void ItemSelected(MenuEventArgs e)
    {
        string msg = Validate();
        if (msg == "")
        {
            StateHasChanged();
            string tile = e.Item != null ? e.Item.Text : "";
            if (tile == "Save")
            {
                LoadDocument();
                var result = await CreditDocumentServices.SaveCreditDocument(creditDocument);
                if (result != null)
                {
                    alert("Saved", 0);
                    creditDocument = result;
                }
                else
                {
                    alert("No Saved", 1);
                }

            }
        }
        else
        {
            alert("Saved", 1);
        }

        StateHasChanged();

    }



    public async void SelectItem(ChangeEventArgs arg)
    {


    }


    public async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValue = arg.IdControl.ToString();

        if (SearcherValue == "Vendor")
        {
            vendorList = await DocumentServices.GetCommercialVendorList(arg.value, creditDocument.CreditDocumentType.IsASale, 1, 20);

        }
        else
        {
            alert("require credit document type");
        }

        if (SearcherValue == "Buyer")
        {
            buyerList = await DocumentServices.GetCommercialBuyerList(arg.value, creditDocument.CreditDocumentType.IsASale, 1, 20);
        }

        StateHasChanged();
    }


    public void EventIdSelectionAndId(CommercialDocumentType item)
    {
        // creditDocument.DocumentType = item;
    }

    public async void EventIdSelectionAndId(Concept item)
    {
        if (SearcherValue == "Vendor")
        {
            creditDocument.Vendor = item;

        }

        if (SearcherValue == "Buyer")
        {
            creditDocument.Buyer = item;

        }
        LoadDocument();
        StateHasChanged();
    }



    public void EventIdSelectionMenuItem(string name)
    {
        Js.InvokeAsync<object>("open", name, "_blank");
        CloseMenu(false);
    }

    public void alert(string _msg, int? status = 0)
    {
        isVisible = true;
        alertMsg = _msg;

        StateHasChanged();
    }

    public void alert(string _msg)
    {
        isVisible = true;
        alertMsg = _msg;

        StateHasChanged();
    }

    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        if (paramFilter != null && paramFilter != "") Navigation.NavigateTo($"/{backPage}/{paramFilter}");
        Navigation.NavigateTo($"/{backPage}");
    }

    public void OpenAlert(string _msg, int _status, bool visible)
    {
        if (referAlert != null)
        {
            referAlert.isVisible = visible;
            referAlert.message = _msg;
            referAlert.status = _status;
            StateHasChanged();
        }
    }

    public void CloseMenu(bool mode)
    {
        menuVisible = mode;
        StateHasChanged();
    }

    public string Validate()
    {
        string msg = "";
        if (creditDocument == null) msg = "required fields";
        if (creditDocument.CreditDocumentType.Id == null) msg = "required fields";
        if (creditDocument.Vendor.Id == null) msg = "required fields";
        if (creditDocument.Buyer.Id == null) msg = "required fields";

        return msg;
    }


    #region Load

    public void LoadDocument()
    {
        if (creditDocument == null) creditDocument = new();
        if (creditDocument.CreditDocumentType == null) creditDocument.CreditDocumentType = new();
        if (creditDocument.Vendor == null) creditDocument.Vendor = new();
        if (creditDocument.Buyer == null) creditDocument.Buyer = new();
        if (creditDocument.CreditDate == DateTime.MinValue) creditDocument.CreditDate = DateTime.Now;
    }


    #endregion Load

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void NavigationTo(string name)
    {
        Navigation.NavigateTo(name);
    }
    public void EventChange(string item)
    {
        string value = "";


        StateHasChanged();
    }

    public void ValidateUri()
    {
        string Name = Navigation.Uri;
        if (Name.Contains("ProviderCreditsItem"))
        {
            isASale = false;

            if (Name.Contains("ProviderCreditsItem"))
            {
                namePage = "Provider Credit";
                backPage = $"PurchasesCredits/{page}";
                icoLogo = "ProviderCredits.png";
            }
        }

        if (Name.Contains("CreditDocumentsItem"))
        {
            isASale = true;
            if (Name.Contains("CreditDocumentsItem"))
            {
                backPage = $"CustomerCredits/{page}";
                namePage = " Credit Document";
                icoLogo = "creditTypeDocument.png";
            }

        }
        StateHasChanged();
    }


}
