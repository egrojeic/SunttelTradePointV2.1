@using System.Reflection;
@using SunttelTradePointB.Client.Shared.TransactionalItems;

@typeparam T


<div style="position:relative;">
    <div style="display:@(!captionOff?"flex":"none")" class="item-edit">
        <label>@(caption)</label>
        <button type="button" @onclick='SetViewElemnt' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
    </div>
    <div class="position-input">
        <div class="component-input" style="@style; display:@(Visible?"block":"none");  position:relative; width:278px;">
            <div style=" flex-direction:row; display:@(listModel.Count()<=0?"flex":"none"); ">
                <input @bind="inputSearcherValue" class="form-control" autocomplete="on" />
                <img id="btn-img" src="images/search.svg" @onclick="SearcherValue" />
            </div>
            <div id="div-Popup">

                <select @onchange="SelectedCarsChanged" style="display:@(listModel.Count()>0?"block":"none");  background-color:white; color:black;  border-color:gray; ">
                    <option value=""> select </option>
                    @if (ChildContent != null)
                    {
                        @ChildContent
                    }
                </select>
                <div>
                    <p style="background-color:@(listModel.Count()>0?"#8affa8":"orange"); display:@(viewPopupCount?"block":"none");">
                        @(
                            listModel.Count() > 0 ? listModel.Count() : "searching"
                            )
                    </p>
                </div>

            </div>
            <input type="button" value="✓" @onclick="SelectedItem" id="Success" />
            <input type="button" value="X" @onclick="Closed" id="Closed" />
        </div>
    </div>
</div>


@code {

    [Parameter]
    public EventCallback<(string, string)> EventSearcherValueAndId { get; set; }
    [Parameter]
    public EventCallback ChangeEventArgs { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string caption { get; set; }
    [Parameter]
    public bool Visible { get; set; } = false;
    [Parameter]
    public string style { get; set; }
    [Parameter]
    public bool captionOff { get; set; } = false;
    [Parameter]
    public string selectionId { get; set; }
    [Parameter]
    public T selectedObj { get; set; }
    [Parameter]
    public List<T>? listModel { get; set; }

    protected bool statusTask = false;
    protected bool viewPopupCount = false;
    public string? inputSearcherValue { get; set; }   
  

    protected override void OnInitialized()
    {
        if (listModel == null) listModel = new List<T>();

        base.OnInitialized();
    }

    public async void SearcherValue()
    {
        viewPopupCount = true;
        SearcherCountOff();
        if (inputSearcherValue != null && inputSearcherValue != "")
        {
            await EventSearcherValueAndId.InvokeAsync((inputSearcherValue, Id));
        }
        else
        {
            await EventSearcherValueAndId.InvokeAsync(("all", Id));
        }

        StateHasChanged();
    }

    private async void SearcherCountOff()
    {
        if (!statusTask)
        {
            statusTask = true;
            await Task.Delay(10000);
            statusTask = false;
            viewPopupCount = false;
            StateHasChanged();
        }
    }

    private void SelectedCarsChanged(ChangeEventArgs arg)
    {
        var r = arg.Value;
        object obj = null;
        foreach (var item in listModel)
        {
            obj = GetModel(item, arg.Value.ToString());
            if (obj != null) break;
        }
        if (obj != null) selectedObj = listModel.Where(s => s.Equals(obj)).FirstOrDefault();


    }

    public static object GetModel(T Model, string Id)
    {

        PropertyInfo[] lst = typeof(T).GetProperties();
        foreach (PropertyInfo oProperty in lst)
        {
            string Name = oProperty.Name;
            string Tipo = oProperty.GetType().ToString();

            string Valor = "";
            Valor = oProperty.GetValue(Model) != null ? oProperty.GetValue(Model).ToString() : "";

            if (Name == "Id")
            {
                if (Valor == Id)
                {
                    return Model;
                }

            }


        }
        object d = null;
        return d;
    }

    private void SelectedItem()
    {
        ChangeEventArgs.InvokeAsync();
    }

    public void referValue(ref T value)
    {
        value = selectedObj;
    }

    public void SetViewElemnt()
    {
        Visible = true;
    }

    public async Task Refresh()
    {
        StateHasChanged();
    }

    public void Closed()
    {
        Visible = false;
        listModel = new List<T>();             
        Refresh();
    }


}
