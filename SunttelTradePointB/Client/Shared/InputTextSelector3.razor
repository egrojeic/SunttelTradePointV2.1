@using System.Reflection;
@typeparam TItem


<div style="position:relative;">
    <div class="item-edit" style="display:@(!captionOff?"flex":"none"); @styleCaption">
        <label>@(caption)</label>
        <button type="button" @onclick='SetViewElemnt' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
    </div>
    <div class="position-input">
        <div class="component-input" style=" @style display:@(Visible?"block":"none");   ">
            <div style=" flex-direction:row; display:@(Items==null || Items.Count<=0 || !modeSearcher?"flex":"none"); ">
                <input @bind="inputSearcherValue" class="form-control" autocomplete="on" />
                <img id="btn-img" src="images/search.svg" @onclick="SearcherValue" />
            </div>
            <div id="div-Popup">

                <select @onchange="OnSelectedItemChanged"
                        style="display:@(Items!=null && Items.Count>0 && modeSearcher ?"block":"none");
                    background-color:white; color:black;  border-color:gray; ">

                    <option value=""> select </option>
                    @{
                        if (Items != null)
                        {
                            foreach (var item in Items)
                            {
                                <option value="@item">@item.ToString()</option>
                            }
                        }
                    }
                </select>
                <div>
                    <p style="background-color:@(Items!=null && Items.Count>0?"#8affa8":"orange"); display:@(ViewPopupCount?"block":"none");">@(Items != null && Items.Count > 0 ? Items.Count : "searching")</p>
                </div>

            </div>
            <input type="button" value="✓" @onclick="SelectedItem" id="Success" />
            <input type="button" value="X" @onclick="Closed" id="Closed" />
        </div>
    </div>
</div>


@code {

    [Parameter]
    public EventCallback<(string, string)> EventSearcherValueAndId { get; set; }
    [Parameter]
    public EventCallback<TItem> EventIdSelectionAndId { get; set; }
    [Parameter]
    public EventCallback EventClosed { get; set; }
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public bool Visible { get; set; } = false;
    [Parameter]
    public string style { get; set; }
    [Parameter]
    public string styleCaption { get; set; }
    [Parameter]
    public string caption { get; set; }
    [Parameter]
    public bool captionOff { get; set; } = false;
    [Parameter]
    public List<TItem> Items { get; set; }

    public string selectionId { get; set; }
    public string? inputSearcherValue { get; set; }
    private bool ViewPopupCount = false;
    public bool statusTask = false;
    bool modeSearcher = false;

    private TItem _selectedObj;
    private TItem SelectedObj
    {
        get => _selectedObj;
        set
        {
            _selectedObj = value;
            //if (EventIdSelectionAndId.HasDelegate)
            //{
            //    EventIdSelectionAndId.InvokeAsync(value);
            //}
        }
    }

    private async Task OnSelectedItemChanged(ChangeEventArgs e)
    {
        var value = (string)e.Value;
        var selectedItem = Items.FirstOrDefault(item => item.ToString() == value);
        SelectedObj = selectedItem != null ? selectedItem : default;
        //await EventIdSelectionAndId.InvokeAsync(SelectedObj);
    }

    public async void SearcherValue()
    {
        modeSearcher = true;
        ViewPopupCount = true;
        SearcherCountOff();
        if (inputSearcherValue != null && inputSearcherValue != "")
        {
            await EventSearcherValueAndId.InvokeAsync((inputSearcherValue, Id));
          
        }
        else
        {
            await EventSearcherValueAndId.InvokeAsync(("all", Id));
        }

        StateHasChanged();
    }

    private async void SearcherCountOff()
    {
        if (!statusTask)
        {
            statusTask = true;
            await Task.Delay(10000);
            statusTask = false;
            ViewPopupCount = false;
            StateHasChanged();
        }
    }

    public void AssignMatchingProperties(object source, object target)
    {
        // Get the type of the source and target objects
        Type sourceType = source.GetType();
        Type targetType = target.GetType();

        // Get the properties of the source object
        PropertyInfo[] sourceProperties = targetType.GetProperties();

        // Loop through the properties of the source object
        foreach (PropertyInfo sourceProperty in sourceProperties)
        {
            // Get the property name and value of the source object

            try
            {
                string propertyName = sourceProperty.Name;

                PropertyInfo propertyInfo = targetType.GetProperty(propertyName);
                object value = propertyInfo.GetValue(target, null); // value is "default value"

                object propertyValue = sourceProperty.GetValue(source, null);

                // Get the corresponding property of the target object
                PropertyInfo targetProperty = targetType.GetProperty(propertyName);

                // If the property exists in the target object, assign its value
                if (targetProperty != null)
                {
                    targetProperty.SetValue(target, propertyValue, null);
                }
            }
            catch (Exception ex)
            {

                string res = ex.Message;
            }



        }
    }

    private void SelectedItem()
    {
        if (SelectedObj != null)
        {
            EventIdSelectionAndId.InvokeAsync(SelectedObj);
            Items = new List<TItem>();
            Visible = false;
            modeSearcher = false;
            StateHasChanged();
        }

    }

    protected void SetViewElemnt()
    {
        Visible = true;
    }

    public async Task Refresh()
    {
        StateHasChanged();
    }

    public void Closed()
    {
        Visible = false;
        modeSearcher = false;
        Items = new List<TItem>();
        EventClosed.InvokeAsync();
        Refresh();
    }


}
