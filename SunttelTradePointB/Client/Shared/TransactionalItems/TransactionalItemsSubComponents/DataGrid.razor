@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@typeparam TParameter

@if (parameterList != null)
{
    <SfGrid @ref="referDataGrid" DataSource="@parameterList"
        Height="@Height"
        Width="@Width"
        AllowFiltering="true"
        AllowTextWrap="false"
        AllowPaging="true"
        AllowResizing="true"
        ContextMenuItems="@(contextMenuItemModel)">

        <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
        @if (GridColumnsList != null)
        {
            <GridColumns>
                @foreach (var item in GridColumnsList)
                {
                    @if (item.Type == ColumnType.CheckBox)
                    {
                        <GridColumn Field="@item?.Field" HeaderText="@item?.HeaderText" Width="@item?.Width" Type="ColumnType.CheckBox"></GridColumn>
                    }
                    else
                    {
                        <GridColumn Field="@item?.Field" HeaderText="@item?.HeaderText" Width="@item?.Width"></GridColumn>
                    }

                }
            </GridColumns>
        }

        <GridEvents OnLoad="EventCallbackOnLoad" ContextMenuItemClicked="EventCallbackMenu" TValue="TParameter"></GridEvents>
    </SfGrid>
}



@code {
    [Parameter]
    public List<TParameter> parameterList { get; set; }
    [Parameter]
    public EventCallback<ContextMenuClickEventArgs<TParameter>> EventCallbackMenu { get; set; }
    [Parameter]
    public EventCallback<object> EventCallbackOnLoad { get; set; }
    [Parameter]
    public List<GridColumn> GridColumnsList
    {
        get;
        set;
    }
    [Parameter]
    public string Height { get; set; } = "";
    [Parameter]
    public string Width { get; set; } = "100%";
    SfGrid<TParameter>? referDataGrid;

    List<ContextMenuItemModel> contextMenuItemModel = new List<ContextMenuItemModel>()
    {
        new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" }
    };

    protected override void OnParametersSet()
    {
        StateHasChanged();
        if (referDataGrid != null) referDataGrid.Refresh();
    }


    public void Refresh()
    {
        referDataGrid.Refresh();
        //StateHasChanged();
    }

}
