@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation


@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<form>
    <div class="content-new-packing-recipe" style=' display:@(!modeEdit?"block":"none"); };'>

        @if (@pageView == "AssemblyRecipeItems")
        {
            <PageTitleComponent Title="@($"{GetName("AssemblyRecipeItems", new PackingSpecs())} Children")" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {GetName("AssemblyRecipeItems", new PackingSpecs())}")">
            </PageTitleComponent>

            <div class="container-menu-g">
                <nav>
                    <button @onclick='()=>HomePage("AssemblyRecipeItems")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                    <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                        <SplitButtonEvents ItemSelected="ItemSelected_1">
                        </SplitButtonEvents>
                        <DropDownMenuItems>
                            <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                            <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                        </DropDownMenuItems>
                    </SfSplitButton>
                </nav>
            </div>

            <div class="grid-columns-header ">
                <div>
                    <label>
                        @GetName( "ItemComponent", new PackRecipeItem())
                    </label>
                </div>
                <div style="position:relative;">
                    <div class="item-edit">
                        <label>@(itemComponent != null ? itemComponent.Name : "")</label>
                        <button type="button" @onclick='()=>SetViewElemnt("ItemComponent")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditItemComponent">
                        @{
                            if (itemComponents != null)
                            {
                                foreach (var Element in itemComponents)
                                {
                                    <option value="@Element?.Id">@Element?.Name</option>
                                }
                            }
                        }
                    </InputTextSelector>
                </div>
                <div>
                    <label>
                        @GetName( "RecipeQualityModifier", new PackRecipeItem())
                    </label>
                </div>

                <div style="position:relative;">
                    <div class="item-edit">
                        <label>@(recipeQualityModifier != null ? recipeQualityModifier.Name : "")</label>
                        <button type="button" @onclick='()=>SetViewElemnt("RecipeQualityModifier")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditItemModifier">
                        @{
                            if (recipeQualityModifiers != null)
                            {
                                foreach (var Element in recipeQualityModifiers)
                                {
                                    <option value="@Element?.Id">@Element?.Name</option>
                                }
                            }
                        }
                    </InputTextSelector>
                </div>

                <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                <div><input type="number" @bind="assemblyRecipeItem.Quantity" class="form-control" style="border-color:gray;" required /></div>
            </div>

            <SfTab Height="300px" HeaderPlacement="HeaderPosition.Left">
                <TabAnimationSettings>
                    <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                    <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
                </TabAnimationSettings>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName( "ListOfMaterials", new PackRecipeItem())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="flex-horizontal-center">
                                <div class="detailsTitleContainer">
                                    <h3 class="subTitleDetailForm">@GetName( "ListOfMaterials", new PackRecipeItem())</h3>
                                    <svg @onclick='()=>ClosedAdd("ListOfMaterialsAssembly")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                </div>

                                @if (materialRecipeItemsAssembly == null) { materialRecipeItemsAssembly = new List<MaterialRecipeItem>(); }


                                <DataGrid TParameter="MaterialRecipeItem"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="materialRecipeItemsAssembly"
                                      GridColumnsList="gridColumnListListOfMaterials"
                                      Width="100%">
                                </DataGrid>
                            </div>

                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName( "ComponentItemRecipe", new PackRecipeItem())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>

                            <div class="flex-horizontal-center">
                                <div class="detailsTitleContainer">
                                    <h3 class="subTitleDetailForm">@GetName( "ComponentItemRecipe", new PackRecipeItem())</h3>
                                    <svg @onclick='()=>ClosedAdd("ComponentItemRecipeAssembly")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                </div>

                                @if (materialRecipeItemsAssembly == null) { materialRecipeItemsAssembly = new List<MaterialRecipeItem>(); }


                                <DataGrid TParameter="MaterialRecipeItem"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="materialRecipeItemsAssembly"
                                      GridColumnsList="gridColumnListListOfMaterials"
                                      Width="100%">
                                </DataGrid>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>

        }

        @if (@pageView == "ListOfMaterialsAssembly")
        {
            <PageTitleComponent Title="@GetName( "Material", new MaterialRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {@GetName( "Material", new MaterialRecipeItem())}")">
            </PageTitleComponent>

            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">
                    <div><label>@GetName( "ListOfMaterials", new PackRecipeItem())</label></div>
                    <div>
                        <div style="position:relative;">
                            <div class="item-edit">
                                <label>@(conceptMaterialAssembly != null ? conceptMaterialAssembly.Name : "")</label>
                                <button type="button" @onclick='()=>SetViewElemnt("MaterialAssembly")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                            </div>

                            <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewMaterialAssembly">
                                @{
                                    if (conceptMaterialsAssembly != null)
                                    {
                                        foreach (var customer in conceptMaterialsAssembly)
                                        {
                                            <option value="@customer?.Id">@customer?.Name</option>
                                        }
                                    }

                                }
                            </InputTextSelector>
                        </div>
                    </div>
                    <div>
                        <label>
                            @GetName( "Quantity", new MaterialRecipeItem())
                        </label>
                    </div>
                    <div><input type="number" @bind="materialRecipeItem.Quantity" class="form-control" style="border-color:gray;" maxlength="4" min="1" /></div>

                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>ClosedAdd("AssemblyRecipeItems")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }

        @if (@pageView == "ComponentItemRecipeAssembly")
        {
            <PageTitleComponent Title="@GetName( "ComponentItemRecipe", new PackRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {@GetName( "Material", new MaterialRecipeItem())}")">
            </PageTitleComponent>

            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">

                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>ClosedAdd("AssemblyRecipeItems")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }

    </div>


    <div class="content-new-packing-recipe" style=' display:@(modeEdit?"block":"none"); };'>
        <PageTitleComponent Title="@GetName("ComponentItemRecipe", new PackRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {@GetName("ComponentItemRecipe", new PackRecipeItem())}")">
        </PageTitleComponent>

        <div class="container-menu-g">
            <nav>
                <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>
            </nav>
        </div>

        <SfTab Height="50px">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>

                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("AssemblyRecipeItems", new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div style="display:flex; flex-direction:column; justify-content:center;">

                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "AssemblyRecipeItems", new PackingSpecs())</h3>
                                <svg @onclick='()=>ClosedAdd("AssemblyRecipeItems")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                            <div class="content-btn">
                                @* <button type="button" @onclick='()=>AddAssemblyControl(true)' class="size-btn color-btn" style=' display:@(btnAddMaterials?"block":"none");'>+</button>*@
                            </div>
                            <SfGrid DataSource="@assemblyRecipeItemsView" AllowFiltering="true" AllowTextWrap="false" AllowPaging="true" AllowResizing="true">
                                <GridFilterSettings Type=" Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridColumns>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Name)" HeaderText="@GetName( "Name",new AtomConcept())" Width="300px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Quantity)" HeaderText="@GetName( "Quantity",new AtomConcept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Code)" HeaderText="@GetName( "Code",new Concept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.FullClassName)" HeaderText="@GetName( "FullClassName",new Concept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.SkinImageName)" HeaderText="@GetName( "SkinImageName",new Concept())" Width="50px"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>

                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>

    </div>


</form>

@code {
    bool viewMsg = false, modeEdit = true, ViewSelect = false;
    bool PopupViewEditItemComponent = false;
    bool PopupViewMaterialAssembly = false;
    bool PopupViewEditItemModifier = false;

    string msg = "",
    pageView = "",
    transactionalItemId = "",
    SearcherValueMode = "",
    Mode = "";
    int ParamCountResul = 0;
    int status = 0;

    [Parameter]
    public EventCallback<string> EventCallbackPage { get; set; }
    List<GridColumn> gridColumnListListOfMaterials = new();

    public PackRecipeItem assemblyRecipeItemGeneral = new();
    List<PackRecipeItem> assemblyRecipeItems = new();
     PackRecipeItem assemblyRecipeItem = new();
    List<PackRecipeItemView> assemblyRecipeItemsView = new();


    List<MaterialRecipeItem> materialRecipeItemsAssembly = new();
    List<Concept> conceptMaterialsAssembly = new();
    Concept conceptMaterialAssembly = new();

    List<MaterialRecipeItem> listOfMaterials = new();
    MaterialRecipeItem materialRecipeItem = new();

    List<ProductRecipeQualityModifier> recipeQualityModifiers = new();
    ProductRecipeQualityModifier recipeQualityModifier = new();
    List<Concept> itemComponents = new();
    Concept itemComponent = new();

    InputTextSelector? ReferInputTextSelector;

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }


    protected override void OnInitialized()
    {
        InitializedAsync();

        gridColumnListListOfMaterials = new List<GridColumn>()
        {
             new GridColumn() { Field=nameof(MaterialRecipeItem.Material.Name) ,  HeaderText = @GetName( "Name", new AtomConcept())  },
              new GridColumn() { Field=nameof(MaterialRecipeItem.Quantity) ,  HeaderText = @GetName( "Quantity", new AtomConcept())  }

        };

    }

    protected async void InitializedAsync()
    {


        if (transactionalService?.transactionalItemId != null && transactionalService?.transactionalItemId != "")
        {
            transactionalItemId = transactionalService.transactionalItemId;

        }
        if (Mode == "Edit")
        {

        }
    }



    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {

            assemblyRecipeItemGeneral.ListOfMaterials = listOfMaterials;
            assemblyRecipeItemGeneral.ComponentItemRecipe = assemblyRecipeItems;
            assemblyRecipeItemGeneral.ItemComponent = itemComponent;
            assemblyRecipeItemGeneral.RecipeQualityModifier = recipeQualityModifier;


            Msg("Added", 1);


        }
        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }



    public async void ItemSelected_1(MenuEventArgs e)
    {

        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {


            Msg("Added", 1);


        }
        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }


    public void AddItem(string value)
    {
        if (value == "ComponentItemRecipe")
        {
            assemblyRecipeItems.Add(assemblyRecipeItem);
        }

        if (value == "ListOfMaterials")
        {           
            listOfMaterials.Add(materialRecipeItem);
        }
    }




    public async Task Refresh()
    {
        if (ReferInputTextSelector != null) await ReferInputTextSelector.Refresh();
        StateHasChanged();
    }


    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo("/TransactionalItemCard/0/Edit");
        Reload();
        await Refresh();
        StateHasChanged();
    }

    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        SearcherValueMode = Element;
       


        if (Element == "ItemComponent") { PopupViewEditItemComponent = true; }

        if (Element == "RecipeQualityModifier") { PopupViewEditItemModifier = true; }

        Reload();

        StateHasChanged();
    }

    protected async void EventSearcherValue()
    {
        if (SearcherValueMode == "ItemComponent")
        {

        }
        if (SearcherValueMode == "RecipeQualityModifier")
        {

        }

        if (ParamCountResul > 0) { ViewSelect = true; } else { ViewSelect = false; }

        await Refresh();
    }

    protected async void EventIdSelectionInput(string selectionId)
    {
        if (SearcherValueMode == "ItemComponent")
        {

        }

        if (SearcherValueMode == "RecipeQualityModifier")
        {

        }

        Reload();
        await Refresh();
    }



    public async void OnContextMenuClick(ContextMenuClickEventArgs<MaterialRecipeItem> args)
    {
        MaterialRecipeItem ObjModel = null;
        ObjModel = args.RowInfo.RowData;

        if (args.Item.Id == "Edit")
        {

        }
    }



    public void HomePage(string value)
    {
        EventCallbackPage.InvokeAsync(value);
    }


    public void Reload()
    {

        //PopupViewMaterialAssembly = false;
        ParamCountResul = 0;
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }



    private void Msg(string msg, int _status)
    {
        msg = msg;
        viewMsg = true;
        status = _status;
    }




    class MaterialRecipeItemView
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }

    }

    class PackRecipeItemView
    {
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }
    }

}
