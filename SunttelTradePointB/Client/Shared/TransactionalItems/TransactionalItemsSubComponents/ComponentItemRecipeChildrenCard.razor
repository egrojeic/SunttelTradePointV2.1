@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation
@inject ContextMenuService ContextMenuService


<style>

    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }

    .e-tab .e-tab-header.e-vertical .e-toolbar-item .e-tab-text {
        font-size: 12px;
        width: 150px;
    }
</style>


@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<form>
    <div class="content-new-packing-recipe info-text-size" style=' display:@(!modeEdit?"block":"none"); };'>

        @if (@pageView == "AssemblyRecipeItems")
        {


        }

        @if (@pageView == "ListOfMaterialsAssembly")
        {
            <PageTitleComponent Title="@GetName( "Material", new MaterialRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {@GetName( "Material", new MaterialRecipeItem())}")">
            </PageTitleComponent>

            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">
                    <div><label class="info-text-size">@GetName( "ListOfMaterials", new PackRecipeItem())</label></div>

                    <InputTextSelector3 TItem="Concept"
                                    Id="ListOfMaterials"
                                    caption="@(conceptMaterialAssembly != null ? conceptMaterialAssembly.Name : "")"
                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                    EventIdSelectionAndId="SelectionMade"
                                    EventClosed="ClosedInputText"
                                    Items="conceptMaterialsAssembly">
                    </InputTextSelector3>

                    <div>
                        <label class="info-text-size">
                            @GetName( "Quantity", new MaterialRecipeItem())
                        </label>
                    </div>
                    <div><input type="number" @bind="materialRecipeItemsAssembly.Quantity" class="form-control info-text-size" style="border-color:gray;" maxlength="4" min="1" /></div>

                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>OpenAdd("AssemblyRecipeItems")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button @onclick='AddMaterialsAssembly' type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }

        @if (@pageView == "ComponentItemRecipeAssembly")
        {
            <PageTitleComponent Title="@GetName( "ComponentItemRecipe", new PackRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {@GetName( "Material", new MaterialRecipeItem())}")">
            </PageTitleComponent>

            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">

                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>ClosedAdd("AssemblyRecipeItems")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }

    </div>


    <div class="content-new-packing-recipe" style=' display:@(modeEdit?"block":"none"); };'>
        <PageTitleComponent Title="@($"{GetName("ComponentItemRecipe", new PackRecipeItem())} Children")" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {GetName("AssemblyRecipeItems", new PackingSpecs())}")">
        </PageTitleComponent>
        <SfTab Height="50px">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>

                <div class="container-menu-g">
                    <nav>
                        <button type="button" @onclick='()=>HomePage("AssemblyRecipeItems")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                        <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                            <SplitButtonEvents ItemSelected="ItemSelected">
                            </SplitButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                                <DropDownMenuItem Text="Add" IconCss="fa-sharp fa-solid fa-circle-plus"></DropDownMenuItem>
                                <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                                <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfSplitButton>
                    </nav>
                </div>

                <div class="grid-columns-header ">
                    <div>
                        <label class="info-text-size">
                            @GetName( "ItemComponent", new PackRecipeItem())
                        </label>
                    </div>


                    <InputTextSelector3 TItem="Concept"
                                        Id="ItemComponent"
                                        caption="@(itemComponent != null ? itemComponent.Name : "")"
                                        EventSearcherValueAndId="EventSearcherValueAndId"
                                        EventIdSelectionAndId="SelectionMade"
                                        EventClosed="ClosedInputText"
                                        Items="itemComponents">

                    </InputTextSelector3>

                    <div>
                        <label class="info-text-size">
                            @GetName( "RecipeQualityModifier", new PackRecipeItem())
                        </label>
                    </div>

                    <InputTextSelector3 TItem="ProductRecipeQualityModifier"
                                        Id="RecipeQualityModifier"
                                        caption="@(recipeQualityModifier != null ? recipeQualityModifier.Name : "")"
                                        EventSearcherValueAndId="EventSearcherValueAndId"
                                        EventIdSelectionAndId="SelectionMade"
                                        EventClosed="ClosedInputText"
                                        Items="recipeQualityModifiers">

                    </InputTextSelector3>

                    <div><label class="info-text-size">@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                    <div><input type="number" @bind="assemblyRecipeItem.Quantity" class="form-control info-text-size" style="border-color:gray;" required /></div>
                </div>

                <SfTab Height="400px" HeaderPlacement="HeaderPosition.Left">
                    <TabAnimationSettings>
                        <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                        <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
                    </TabAnimationSettings>
                    <TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="@GetName( "ListOfMaterials", new PackRecipeItem())"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <div class="flex-horizontal-center">
                                    <div class="detailsTitleContainer">
                                        <h3 class="subTitleDetailForm">@GetName( "ListOfMaterials", new PackRecipeItem())</h3>
                                        <svg @onclick='()=>ClosedAdd("ListOfMaterialsAssembly")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                        </svg>
                                    </div>


                                    @if (isLoading)
                                    {

                                        <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

                                    }
                                    else
                                    {
                                        if (materialsRecipeItemsAssembly == null) materialsRecipeItemsAssembly = new();

                                        <RadzenDataGrid Data="@materialsRecipeItemsAssembly"
                                                    TItem="MaterialRecipeItem"
                                                    CellContextMenu="@ShowContextMenuWithContent"
                                                    AllowFiltering="true"
                                                    AllowColumnResize="true"
                                                    AllowAlternatingRows="true"
                                                    FilterMode="FilterMode.Advanced"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    AllowSorting="true"
                                                    PageSize="50"
                                                    ColumnWidth="100%"
                                                    AllowPaging="true"
                                                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                                    ShowPagingSummary="true"
                                                    SelectionMode="DataGridSelectionMode.Single"
                                                    LogicalFilterOperator="LogicalFilterOperator.Or"
                                                    PageNumbersCount="100">

                                            <Columns>
                                                <RadzenDataGridColumn TItem="MaterialRecipeItem" Property="Material.Name" Title="@GetName( "Material", new MaterialRecipeItem())" Frozen="false" Width="80px" />
                                                <RadzenDataGridColumn TItem="MaterialRecipeItem" Property="Quantity" Filterable="true" Title="@GetName( "Quantity", new MaterialRecipeItem())" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />


                                            </Columns>
                                        </RadzenDataGrid>
                                        <div style="width: 100%; display: flex; flex-direction: row; column-gap: 20px; background-color: #f1f1f1; box-shadow: 0px 0px 5px; justify-content: center;   align-content: end;  align-items: center;">
                                            <div style=" height: auto; width: auto; display: flex; flex-direction: row;  column-gap: 20px; align-content: center; font-size: 12px;">
                                                <label>
                                                    @(
                                                        $"Records: {materialsRecipeItemsAssembly.Count}"
                                                        )
                                                </label>
                                            </div>
                                        </div>
                                    }


                                </div>

                            </ContentTemplate>
                        </TabItem>
                        @*      <TabItem>
                        <ChildContent>
                        <TabHeader Text="@GetName( "ComponentItemRecipe", new PackRecipeItem())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>

                        <div class="flex-horizontal-center">
                        <div class="detailsTitleContainer">
                        <h3 class="subTitleDetailForm">@GetName( "ComponentItemRecipe", new PackRecipeItem())</h3>
                        <svg @onclick='()=>ClosedAdd("ComponentItemRecipeAssembly")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                        </svg>
                        </div>

                        @if (materialRecipeItemsAssembly == null) { materialRecipeItemsAssembly = new List<MaterialRecipeItem>(); }


                        <DataGrid TParameter="MaterialRecipeItem"
                        EventCallbackMenu="OnContextMenuClick"
                        parameterList="materialRecipeItemsAssembly"
                        GridColumnsList="gridColumnListListOfMaterials"
                        Width="100%">
                        </DataGrid>
                        </div>
                        </ContentTemplate>
                        </TabItem>*@
                    </TabItems>
                </SfTab>


            </TabItems>
        </SfTab>

    </div>


</form>

@code {
    [Parameter]
    public string transactionalItemId { get; set; }
    bool viewMsg = false, modeEdit = true, ViewSelect = false;
    bool PopupViewEditItemComponent = false;
    bool PopupViewMaterialAssembly = false;
    bool PopupViewEditItemModifier = false;
    bool isLoading = false;

    string msg = "",
    pageView = "",
    SearcherValueMode = "",
    Mode = "";
    int ParamCountResul = 0;
    int status = 0;


    [Parameter]
    public EventCallback<string> EventCallbackPage { get; set; }
    [Parameter]
    public EventCallback<List<PackRecipeItem>> EventCallAdd { get; set; }



    List<PackRecipeItem> assemblyRecipeItems = new();
    PackRecipeItem assemblyRecipeItem = new();
    List<PackRecipeItemView> assemblyRecipeItemsView = new();
    List<RecipeModifier> recipeModifiers = new();



    List<MaterialRecipeItem> materialsRecipeItemsAssembly = new();

    MaterialRecipeItem materialRecipeItemsAssembly = new();
    List<Concept> conceptMaterialsAssembly = new();
    Concept conceptMaterialAssembly = new();

    List<MaterialRecipeItem> listOfMaterials = new();
    MaterialRecipeItem materialRecipeItem = new();

    List<ProductRecipeQualityModifier> recipeQualityModifiers = new();
    ProductRecipeQualityModifier recipeQualityModifier = new();
    List<Concept> itemComponents = new();
    Concept itemComponent = new();

    InputTextSelector? ReferInputTextSelector;



    protected override void OnInitialized()
    {
        InitializedAsync();

    }

    protected async void InitializedAsync()
    {

    }

    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Add")
        {

            if (true)
            {
                assemblyRecipeItem.ItemComponent = itemComponent;
                assemblyRecipeItem.ListOfMaterials = materialsRecipeItemsAssembly;
                assemblyRecipeItem.RecipeQualityModifier = recipeQualityModifier != null ? recipeQualityModifier : new();
                assemblyRecipeItems.Add(assemblyRecipeItem);
                assemblyRecipeItemsView.Add(new PackRecipeItemView
                        {
                            Name = assemblyRecipeItem.ItemComponent != null ? assemblyRecipeItem.ItemComponent?.Name : "",
                            Code = assemblyRecipeItem.ItemComponent.Code != null ? assemblyRecipeItem.ItemComponent?.Code : "",
                            FullClassName = assemblyRecipeItem.ItemComponent.FullClassName != null ? assemblyRecipeItem.ItemComponent?.FullClassName : "",
                            SkinImageName = assemblyRecipeItem.ItemComponent.SkinImageName != null ? assemblyRecipeItem.ItemComponent?.SkinImageName : "",
                            Quantity = assemblyRecipeItem.Quantity != null ? assemblyRecipeItem.Quantity.ToString() : "",
                        });
                EventCallAdd.InvokeAsync(assemblyRecipeItems);
                StateHasChanged();
                Msg("Added", 0);
            }


        }
        if (tile == "Save as...")
        {
            Msg("Disable", 1);
        }


        StateHasChanged();


    }


    public async void ItemSelected_1(MenuEventArgs e)
    {

        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Add")
        {
            //assemblyRecipeItem.Id == null
            if (true)
            {
                assemblyRecipeItem.ItemComponent = itemComponent;
                assemblyRecipeItem.ListOfMaterials = materialsRecipeItemsAssembly;
                assemblyRecipeItem.RecipeQualityModifier = recipeQualityModifier != null ? recipeQualityModifier : new();
                assemblyRecipeItems.Add(assemblyRecipeItem);
                assemblyRecipeItemsView.Add(new PackRecipeItemView
                        {
                            Name = assemblyRecipeItem.ItemComponent != null ? assemblyRecipeItem.ItemComponent?.Name : "",
                            Code = assemblyRecipeItem.ItemComponent.Code != null ? assemblyRecipeItem.ItemComponent?.Code : "",
                            FullClassName = assemblyRecipeItem.ItemComponent.FullClassName != null ? assemblyRecipeItem.ItemComponent?.FullClassName : "",
                            SkinImageName = assemblyRecipeItem.ItemComponent.SkinImageName != null ? assemblyRecipeItem.ItemComponent?.SkinImageName : "",
                            Quantity = assemblyRecipeItem.Quantity != null ? assemblyRecipeItem.Quantity.ToString() : "",
                        });

                StateHasChanged();
                Msg("Added", 0);
            }


        }


        StateHasChanged();


    }


    public void AddItem(string value)
    {
        if (value == "ComponentItemRecipe")
        {
            assemblyRecipeItems.Add(assemblyRecipeItem);
        }

        if (value == "ListOfMaterials")
        {
            listOfMaterials.Add(materialRecipeItem);
        }
        StateHasChanged();
    }


    private void AddMaterialsAssembly()
    {
        if (materialRecipeItemsAssembly != null)
        {
            if (materialRecipeItemsAssembly.Material == null) materialRecipeItemsAssembly.Material = new();
            if (materialRecipeItemsAssembly.Material.Id == null)
            {
                materialRecipeItemsAssembly.Material = conceptMaterialAssembly;
                materialsRecipeItemsAssembly.Add(materialRecipeItemsAssembly);
                materialRecipeItemsAssembly = new();
                conceptMaterialAssembly = new();

                Msg("Added", 0);
            }


        }
        StateHasChanged();
    }


    public async Task Refresh()
    {
        if (ReferInputTextSelector != null) await ReferInputTextSelector.Refresh();
        StateHasChanged();
    }


    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo("/TransactionalItemCard/0/Edit");
        ClosedInputText();
        await Refresh();
        StateHasChanged();
    }

    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        SearcherValueMode = Element;


        ClosedInputText();
        if (Element == "ItemComponent") { PopupViewEditItemComponent = true; }

        if (Element == "RecipeQualityModifier") { PopupViewEditItemModifier = true; }
        if (Element == "MaterialAssembly") { PopupViewMaterialAssembly = true; }
        StateHasChanged();
    }


    protected async void EventSearcherValueAndId((string value, string selectionId) arg)
    {
        SearcherValueMode = arg.selectionId;
        if (arg.selectionId == "RecipeQualityModifier")
        {
            recipeQualityModifiers = new();
            if (itemComponents != null)
            {

                ConceptType type = itemComponent.TypeOfConcept != null ? itemComponent.TypeOfConcept : null;
                if (type != null)
                {
                    var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);

                    if (itemTypes != null)
                    {

                        var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();

                        if (!arg.value.ToLower().Contains("all") && !arg.value.ToLower().Contains("todo"))
                        {
                            recipeModifiers = resul.InRecipeModifiers.Where(s => s.Name.ToLower().Contains(arg.value.ToLower())).ToList();

                        }
                        else
                        {

                            if (resul != null) recipeModifiers = resul.InRecipeModifiers;

                        }
                        foreach (var item in recipeModifiers)
                        {
                            recipeQualityModifiers.Add(new ProductRecipeQualityModifier
                                    {
                                        Id = item.Id,
                                        Name = item.Name
                                    });
                        }

                    }
                }
            }

        }

        if (arg.selectionId == "ItemComponent")
        {
            var data = await transactionalService.GetTransactionalItemsList(1, 50, arg.value);
            //itemComponents = await transactionalService.GetConceptProduct(value);

            foreach (TransactionalItem item in data)
            {
                itemComponents.Add(new Concept
                        {
                            Name = item.Name != null ? item.Name : "",
                            Id = item.Id != null ? item.Id : "",
                            AuditRecord = item.AuditRecord != null ? item.AuditRecord : new(),
                            Code = item.Code != null ? item.Code : "",
                            SkinImageName = item.SkinImageName != null ? item.SkinImageName : "",
                            Status = item.Status != null ? item.Status : new(),
                            IsSelected = item.IsSelected != null ? item.IsSelected : false,
                            Groups = item.Groups != null ? item.Groups : new(),
                            HasChanged = item.HasChanged != null ? item.HasChanged : false,
                            IsLoadingData = item.IsLoadingData != null ? item.IsLoadingData : default(bool),
                            LegacyId = item.LegacyId != null ? item.LegacyId : "",
                            Notes = item.Notes != null ? item.Notes : "",
                            TypeOfConcept = item.TypeOfConcept != null ? item.TypeOfConcept : new(),

                        });

            }

        }

        if (arg.selectionId == "ListOfMaterials")
        {
            if (conceptMaterialsAssembly == null) conceptMaterialsAssembly = new();
            conceptMaterialsAssembly = await transactionalService.GetSelectorListPackingMaterials(arg.value);

        }

        StateHasChanged();
    }


    public void SelectionMade(Concept arg)
    {
        if (SearcherValueMode == "ListOfMaterials")
        {
            conceptMaterialAssembly = arg;
        }
        if (SearcherValueMode == "ItemComponent")
        {
            itemComponent = arg;
        }
        if (SearcherValueMode == "ListOfMaterials")
        {
            conceptMaterialAssembly = arg;
        }
        StateHasChanged();
    }

    public void SelectionMade(ProductRecipeQualityModifier arg)
    {
        if (SearcherValueMode == "RecipeQualityModifier")
        {
            recipeQualityModifier = arg;
        }
        StateHasChanged();
    }

    #region Grid
    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<MaterialRecipeItem> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        MaterialRecipeItem argObj = (MaterialRecipeItem)args.Value;

        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }


    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<PackRecipeItem> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick_1">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick_1(MenuItemEventArgs args)
    {
        PackRecipeItem argObj = (PackRecipeItem)args.Value;
        if (argObj.Id != null)
        {
            assemblyRecipeItem = assemblyRecipeItems.Where(s => s.Id != null && s.Id == argObj.Id).FirstOrDefault();



        }
        else
        {
            Msg("Invalid id", 1);
        }
    }


    #endregion grid



    public void HomePage(string value)
    {
        EventCallbackPage.InvokeAsync(value);
    }



    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }



    private void Msg(string _msg, int _status)
    {
        msg = _msg;
        viewMsg = true;
        status = _status;
    }

    public void ClosedInputText()
    {
        PopupViewEditItemComponent = false;
        PopupViewEditItemModifier = false;
        PopupViewMaterialAssembly = false;
        ParamCountResul = 0;
        ViewSelect = false;
        StateHasChanged();
    }


    public class MaterialRecipeItemView
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }

    }

    public class PackRecipeItemView
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }
    }

}
