@page "/PackingRecipe/{IdTransactionalItem}"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;


<div class="detailsTitleContainer" style="width:100%;">
    <h3 class="subTitleDetailForm">Packing Recipe</h3>
    <svg @onclick="@ViewNewPackingRecipe" style="margin-left:20px;" title="Add new Recipe Item" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style " viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
</div>
<div class="flex-horizontal-center ">

    @if (productPackingSpecsView != null)
    {
        @if (productPackingSpecs != null)
        {
            <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="@itemsPerPage"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@productPackingSpecsView"
                    TItem="PackingSpecsView"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuWithContent"
                    PageNumbersCount="100"
                            Class="Text-grid">

                <Columns>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.CustomerName)" Title="@GetName(new PackingSpecs(), "Customer")" Width="250"></RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.CustomerCode)" Title="@GetName(new Concept(), "Code")" Width="100"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.SeasonName)" Title="@GetName(new PackingSpecs(), "Season")" Width="150"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.ModelRecipeName)" Title="@GetName(new PackingSpecs(), "ProductModel")" Width="150"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.PackLayersToBuy)" Title="@GetName(new PackingSpecs(), "PackLayersToBuy")" Width="150"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.PackPerBoxLayer)" Title="@GetName(new PackingSpecs(), "PackPerBoxLayer")" Width="150"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.PackingBoxToBuyName)" Title="@GetName(new PackingSpecs(), "PackingBoxToBuy")" Width="150"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.PackingBoxToSaleName)" Title="@GetName(new PackingSpecs(), "PackingBoxToSale")" Width="150"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.PackLayersToSale)" Title="@GetName(new PackingSpecs(), "PackLayersToSale")" Width="150"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="Text-grid" TItem="PackingSpecsView" Property="@nameof(PackingSpecsView.UnitPrice)" Title="@GetName(new PriceInfo(), "UnitPrice")" Width="150"> </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        }
    }

</div>



@code {
    [Parameter]
    public string IdTransactionalItem { get; set; }

    public List<PackingSpecs> productPackingSpecs { get; set; }
    public List<PackingSpecsView> productPackingSpecsView = new List<PackingSpecsView>();
    public TransactionalItem? currentItem { get; set; }
    List<Concept> ConceptModel = new List<Concept>();

    public bool PopupView { get; set; } = false;
    public string transactionalItemId { get; set; }
    private int itemsPerPage = 25;

    protected override void OnInitialized()
    {
        if (IdTransactionalItem != null)
        {
            transactionalItemId = IdTransactionalItem;
            OnInitializedProductPackingSpecs();
        }

    }

    protected async void OnInitializedProductPackingSpecs()
    {
        productPackingSpecs = await transactionalService.GetTransactionalItemDetailsPackingRecipe(transactionalItemId);
        if (productPackingSpecs != null && productPackingSpecs?.Count > 0)
        {
            await ConverToProductPacking(productPackingSpecs);
            StateHasChanged();

        }
    }

    private List<TabData> TabStyles { get; set; } = new List<TabData>() {
        new TabData { StyleMode = "Default Tab", StyleClass = "" },
        new TabData { StyleMode = "Fill Tab Header", StyleClass = "e-fill" },
        new TabData { StyleMode = "Background Tab Header", StyleClass = "e-background" }
            };

    public class TabData
    {
        public string StyleMode { get; set; }
        public string StyleClass { get; set; }
    }

    public void ViewNewPackingRecipe()
    {
        PopupView = true;
        Navigation.NavigateTo($"/PackingRecipeCard/{IdTransactionalItem}");
    }

    public async Task ConverToProductPacking(List<PackingSpecs> ProductPackingSpecs)
    {
        productPackingSpecsView = new List<PackingSpecsView>();

        foreach (var PackingSpecs in ProductPackingSpecs)
        {
            productPackingSpecsView.Add(new PackingSpecsView
                    {
                        CustomerName = PackingSpecs?.Customer?.Name,
                        UnitPrice = PackingSpecs.Price != null ? PackingSpecs.Price.UnitPrice : 0,
                        PackLayersToBuy = PackingSpecs.PackLayersToBuy != null ? PackingSpecs.PackLayersToBuy : 0,
                        PackingBoxToBuyName = PackingSpecs.PackingBoxToBuy != null ? PackingSpecs.PackingBoxToBuy.Name : "",
                        PackingBoxToSaleName = PackingSpecs?.PackingBoxToSale != null ? PackingSpecs.PackingBoxToSale?.Name : "",
                        CustomerCode = PackingSpecs.Customer != null ? PackingSpecs.Customer.Code : "",
                        PackLayersToSale = PackingSpecs.PackLayersToSale != null ? PackingSpecs.PackLayersToSale : 0,
                        PackPerBoxLayer = PackingSpecs.PackPerBoxLayer != null ? PackingSpecs.PackPerBoxLayer : 0,
                        SeasonName = PackingSpecs.Season != null ? PackingSpecs.Season.Name : "",
                        Id = PackingSpecs.Id,
                        ModelRecipeName = PackingSpecs.ModelRecipe != null ? PackingSpecs.ModelRecipe.Name : ""

                    });
        }


    }

    public void ConverToProductPacking(PackingSpecs ProductPackingSpec)
    {
        productPackingSpecsView = new List<PackingSpecsView>();


        productPackingSpecsView.Add(new PackingSpecsView
                {
                    Id = ProductPackingSpec.Id,
                    CustomerName = ProductPackingSpec.Customer.Name,
                    UnitPrice = ProductPackingSpec.Price.UnitPrice,
                    PackLayersToBuy = ProductPackingSpec.PackLayersToBuy,
                    PackingBoxToBuyName = ProductPackingSpec.PackingBoxToBuy.Name,
                    PackingBoxToSaleName = ProductPackingSpec.PackingBoxToSale.Name,
                    CustomerCode = ProductPackingSpec.Customer.Code,
                    PackLayersToSale = ProductPackingSpec.PackLayersToSale,
                    PackPerBoxLayer = ProductPackingSpec.PackPerBoxLayer

                });


    }

    public string GetName(Object Obj, string Name)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name != null ? Name : Name;
    }

    public class PackingSpecsView
    {
        public string Id { get; set; }
        public string CustomerName { get; set; }
        public string CustomerCode { get; set; }
        public string SeasonName { get; set; }
        public string ModelRecipeName { get; set; }
        public double PackPerBoxLayer { get; set; }
        public int PackLayersToSale { get; set; }
        public int PackLayersToBuy { get; set; }
        public string PackingBoxToSaleName { get; set; }
        public string PackingBoxToBuyName { get; set; }
        public double UnitPrice { get; set; }

    }

    #region Edit Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<PackingSpecsView> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        PackingSpecsView _PackingSpecs = new();
        _PackingSpecs = (PackingSpecsView)args.Value;

        if (args.Text == "Edit")
        {
            transactionalService.ConceptTransactionalItemPackingSpecs = productPackingSpecs.Where(s => s.Id == _PackingSpecs.Id).FirstOrDefault();
            if (transactionalService.ConceptTransactionalItemPackingSpecs != null)
            {
                Navigation.NavigateTo($"/PackingRecipeCard/{IdTransactionalItem}/{_PackingSpecs.Id}");
            }
        }
    }

    #endregion Edit Grid

}


