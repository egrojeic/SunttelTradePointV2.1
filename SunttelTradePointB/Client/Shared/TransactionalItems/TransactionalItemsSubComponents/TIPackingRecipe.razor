@page "/PackingRecipe"
@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;



<div class="detailsTitleContainer" style="width:100%;">
    <h3 class="subTitleDetailForm">Packing Recipe</h3>
    <svg @onclick="@ViewNewPackingRecipe" style="margin-left:20px;" title="Add new Recipe Item" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style " viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
</div>

<SfGrid @ref="DataGrid" DataSource="@ProductPackingSpecsView"
        AllowFiltering="true"
        AllowTextWrap="false"
        AllowPaging="true" 
        AllowResizing="true"
        EnableVirtualization="true"
        EnableColumnVirtualization="true"
        ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader" } })">
    
    <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
    <GridColumns>
        <GridColumn Field="@nameof(PackingSpecsView.CustomerName)" HeaderText="Customer" Width="125px"></GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.CustomerCode)" HeaderText="Customer Code" Width="125px"> </GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.SeasonName)" HeaderText="Season" Width="125px"> </GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.ModelRecipeName)" HeaderText="Model" Width="5px"> </GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.PackPerBoxLayer)" HeaderText="Pack/Layer" Width="125px"> </GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.PackLayersToSale)" HeaderText="Layers-sale" Width="125px"> </GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.PackLayersToBuy)" HeaderText="Layers-buy" Width="125px"> </GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.PackingBoxToSaleName)" HeaderText="Box to sale" Width="125px"> </GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.PackingBoxToBuyName)" HeaderText="Box to buy" Width="125px"> </GridColumn>
        <GridColumn Field="@nameof(PackingSpecsView.UnitPrice)" HeaderText="Unit Price" Width="125px"> </GridColumn>
    </GridColumns>
    <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="PackingSpecsView"></GridEvents>
</SfGrid>





@code {
    public List<PackingSpecs> productPackingSpecs { get; set; }
    public List<PackingSpecsView> ProductPackingSpecsView = new List<PackingSpecsView>();
    public TransactionalItem? currentItem { get; set; }
    List<Concept> ConceptModel = new List<Concept>();

    public bool PopupView { get; set; } = false;
    public string transactionalItemId { get; set; }

    SfGrid<PackingSpecsView>? DataGrid;


    protected override void OnInitialized()
    {
        if (transactionalService.transactionalItemId != null && transactionalService.transactionalItemId != "")
        {
            transactionalItemId = transactionalService.transactionalItemId;
            OnInitializedProductPackingSpecs();
        }

    }

    protected async void OnInitializedProductPackingSpecs()
    {
        productPackingSpecs = await transactionalService.GetTransactionalItemDetailsPackingRecipe(transactionalItemId);
        if (productPackingSpecs != null && productPackingSpecs?.Count > 0)
        {
            await ConverToProductPacking(productPackingSpecs);
            DataGrid.ForceUpdate = true;
            DataGrid.DataSource = ProductPackingSpecsView;
            await DataGrid.Refresh();
            StateHasChanged();

        }
    }


    private List<TabData> TabStyles { get; set; } = new List<TabData>() {
        new TabData { StyleMode = "Default Tab", StyleClass = "" },
        new TabData { StyleMode = "Fill Tab Header", StyleClass = "e-fill" },
        new TabData { StyleMode = "Background Tab Header", StyleClass = "e-background" }
    };

    public class TabData
    {
        public string StyleMode { get; set; }
        public string StyleClass { get; set; }
    }

    public void ViewNewPackingRecipe()
    {
        PopupView = true;
        Navigation.NavigateTo("/PackingRecipeCard");
    }



    public async Task ConverToProductPacking(List<PackingSpecs> ProductPackingSpecs)
    {
        ProductPackingSpecsView = new List<PackingSpecsView>();

        foreach (var PackingSpecs in ProductPackingSpecs)
        {
            ProductPackingSpecsView.Add(new PackingSpecsView
                {
                    CustomerName = PackingSpecs?.Customer?.Name,
                    UnitPrice = PackingSpecs.Price != null ? PackingSpecs.Price.UnitPrice : 0,
                    PackLayersToBuy = PackingSpecs.PackLayersToBuy != null ? PackingSpecs.PackLayersToBuy : 0,
                    PackingBoxToBuyName = PackingSpecs.PackingBoxToBuy != null ? PackingSpecs.PackingBoxToBuy.Name : "",
                    PackingBoxToSaleName = PackingSpecs?.PackingBoxToSale != null ? PackingSpecs.PackingBoxToSale?.Name : "",
                    CustomerCode = PackingSpecs.Customer != null ? PackingSpecs.Customer.Code : "",
                    PackLayersToSale = PackingSpecs.PackLayersToSale != null ? PackingSpecs.PackLayersToSale : 0,
                    PackPerBoxLayer = PackingSpecs.PackPerBoxLayer != null ? PackingSpecs.PackPerBoxLayer : 0

                });
        }


    }

    public void ConverToProductPacking(PackingSpecs ProductPackingSpec)
    {
        ProductPackingSpecsView = new List<PackingSpecsView>();


        ProductPackingSpecsView.Add(new PackingSpecsView
            {
                Id = ProductPackingSpec.Id,
                CustomerName = ProductPackingSpec.Customer.Name,
                UnitPrice = ProductPackingSpec.Price.UnitPrice,
                PackLayersToBuy = ProductPackingSpec.PackLayersToBuy,
                PackingBoxToBuyName = ProductPackingSpec.PackingBoxToBuy.Name,
                PackingBoxToSaleName = ProductPackingSpec.PackingBoxToSale.Name,
                CustomerCode = ProductPackingSpec.Customer.Code,
                PackLayersToSale = ProductPackingSpec.PackLayersToSale,
                PackPerBoxLayer = ProductPackingSpec.PackPerBoxLayer

            });


    }


    public void OnContextMenuClick(ContextMenuClickEventArgs<PackingSpecsView> args)
    {
        PackingSpecsView _PackingSpecs = new();
        _PackingSpecs = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            transactionalService.ConceptTransactionalItemPackingSpecs = productPackingSpecs.Where(s => s.Id == _PackingSpecs.Id).FirstOrDefault();
            if (transactionalService.ConceptTransactionalItemPackingSpecs !=null)
            {
                Navigation.NavigateTo("/PackingRecipeCard/Edit");
            }
        }
    }


    public void Refresh()
    {
    }
    public class PackingSpecsView
    {
        public string Id { get; set; }
        public string CustomerName { get; set; }
        public string CustomerCode { get; set; }
        public string SeasonName { get; set; }
        public string ModelRecipeName { get; set; }
        public double PackPerBoxLayer { get; set; }
        public int PackLayersToSale { get; set; }
        public int PackLayersToBuy { get; set; }
        public string PackingBoxToSaleName { get; set; }
        public string PackingBoxToBuyName { get; set; }
        public double UnitPrice { get; set; }

    }


}

<style>
    .default-tab .e-content .e-item {
        padding: 10px;
        text-align: justify;
    }
</style>
