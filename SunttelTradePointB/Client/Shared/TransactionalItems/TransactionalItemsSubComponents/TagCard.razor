@page "/TagCard"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation

<PageTitleComponent Title="@Title" IconName=""
                    Description="Here you can add tags">
</PageTitleComponent>



<div class="flex-horizontal-center">
    <div class="grid-mode-row">
        <div><label>@Key</label></div>
        <div> <input @bind-value="Tag.Key" class="form-control" placeholder="Edit key" /></div>

        <div> <label>@Value</label></div>
        <div> <input @bind-value="Tag.Value" class="form-control" placeholder="Edit value" /></div>
        <div></div>
        <div class="flex-horizontal-end">
            <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
            <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
        </div>
    </div>

</div>




@code {

    [Parameter]
    public List<TransactionalItemTag> ParameterList { get; set; }
   
    List<TransactionalItemTag> ParameterListView = new List<TransactionalItemTag>();
    TransactionalItemTag Tag = new TransactionalItemTag();

    public bool ViewSelect { get; set; } = false;
    public string transactionalItemId { get; set; }
    public string SearcherValueMode = "";
    public int ParamCountResul = 0;
    public bool PopupViewAddTag = false;
    InputTextSelector? ReferInputTextSelector;

    #region TileName
    public string Title { get; set; }
    public string Key { get; set; }
    public string Value { get; set; }
    #endregion TitleName

    protected override Task OnInitializedAsync()
    {
        InitializedUICommonFunctions();
        if (transactionalService?.transactionalItemId != null && transactionalService?.transactionalItemId != "")
        {
            transactionalItemId = transactionalService.transactionalItemId ;
        }
        return base.OnInitializedAsync();
    }

    public async void InitializedUICommonFunctions()
    {
        Key = UICommonFunctions.GetDisplayName(new TransactionalItemTag(), "Key");
        Value = UICommonFunctions.GetDisplayName(new TransactionalItemTag(), "Value");
        Title = UICommonFunctions.GetDisplayName(new TransactionalItem(), "TransactionalItemTags");
        StateHasChanged();
    }


    private async void Save()
    {       
        if (transactionalItemId != "" && transactionalItemId != null)
        {
            var resul = await transactionalService.SaveTags(transactionalItemId, Tag);

            if (transactionalService.TransactionalItems != null && resul)
            {
                if (transactionalService.TransactionalItems.TransactionalItemTags == null)
                {
                    transactionalService.TransactionalItems.TransactionalItemTags = new List<TransactionalItemTag>();
                }
                transactionalService.TransactionalItems.TransactionalItemTags.Add(Tag);
            }
        }
        Closed("control");
    }


    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo("/TransactionalItemCard/4/Edit");
        StateHasChanged();
    }


}
