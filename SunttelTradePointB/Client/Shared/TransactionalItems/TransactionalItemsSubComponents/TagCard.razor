@page "/TagCard/{Page}/{transactionalItemId}"
@page "/TagCard/{Page}/{transactionalItemId}/{transactionalItemTagId}"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation



@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg" status="@status">
    </MessageSaveComponent>
}
<PageTitleComponent Title="@Title" IconName="tag.png"
                    Description="Here you can add tags">
</PageTitleComponent>



<div class="flex-horizontal-center">
    <div class="grid-mode-row">
        <div><label>@Key</label></div>
        <div> <input @bind-value="Tag.Key" class="form-control" placeholder="Edit key" /></div>

        <div> <label>@Value</label></div>
        <div> <input @bind-value="Tag.Value" class="form-control" placeholder="Edit value" /></div>
        <div></div>
        <div class="flex-horizontal-end">
            <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
            <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
        </div>
    </div>

</div>




@code {
    [Parameter]
    public string transactionalItemId { get; set; }
    [Parameter]
    public string transactionalItemTagId { get; set; }
    [Parameter]
    public string Page { get; set; }
    [Parameter]
    public string SubPage { get; set; }
    [Parameter]
    public List<TransactionalItemTag> ParameterList { get; set; }

    List<TransactionalItemTag> ParameterListView = new List<TransactionalItemTag>();
    TransactionalItemTag Tag = new TransactionalItemTag();

    public bool ViewSelect { get; set; } = false;

    public string SearcherValueMode = "";
    public int ParamCountResul = 0;
    public bool PopupViewAddTag = false;
    bool viewMsg = false;
    string msg = "";
    int status = 0;
    InputTextSelector? ReferInputTextSelector;

    #region TileName
    public string Title { get; set; }
    public string Key { get; set; }
    public string Value { get; set; }
    #endregion TitleName

    protected async override void OnInitialized()
    {
        InitializedUICommonFunctions();

        if (transactionalItemId !=null &&  transactionalItemTagId !=null)
        {
            Tag = await transactionalService.GetTagById(transactionalItemId, transactionalItemTagId);
        }
        if (Tag == null)
        { Tag = new(); }

       
    }

    public async void InitializedUICommonFunctions()
    {
        if (transactionalItemTagId != null && transactionalItemTagId !=null)
        {
            Tag = await transactionalService.GetTagById(transactionalItemId, transactionalItemTagId);
        }
        if (Tag==null)
        {
            Tag = new();
        }
        Key = UICommonFunctions.GetDisplayName(new TransactionalItemTag(), "Key");
        Value = UICommonFunctions.GetDisplayName(new TransactionalItemTag(), "Value");
        Title = UICommonFunctions.GetDisplayName(new TransactionalItem(), "TransactionalItemTags");
        StateHasChanged();
    }


    private async void Save()
    {
        if (transactionalItemId != null)
        {
            var resul = await transactionalService.SaveTags(transactionalItemId, Tag);

            if (transactionalService.TransactionalItems != null && resul)
            {
                MsgOpen("Saved", 0);
            }
            else
            {
                MsgOpen("No saved", 1);

            }
        }
        StateHasChanged();

    }


    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo($"/TransactionalItemCard/{transactionalItemId}");
        StateHasChanged();
    }
    public void MsgOpen(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }

}
