@page "/QualityParametersCardAll/{transactionalItemId}"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject ITransactionalItemsService transactionalService;

@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<PageTitleComponent Title="@Title" IconName="QualityParameters.png"
                    Description="@($"Here you can add {@Title}")">
</PageTitleComponent>

<div id="add-recipe">
    <div class="flex-verical-center-new">
        @if (transactionalItemQualityPairView == null) transactionalItemQualityPairView = new();
        @foreach (var qualityPair in transactionalItemQualityPairView)
        {
            <div class="grid-columns-2 box-shadow-mode width-grid-2">

                <div>
                    <label class="info-text-size">
                        @GetName( "TransactionalItemQuality", new TransactionalItemQualityPair())
                    </label>
                </div>
                <div>
                    <div style="position:relative;">
                        <div class="item-edit form-control ">
                            <label class="info-text-size">@(qualityPair.TransactionalItemQuality != null ? qualityPair.TransactionalItemQuality?.Name : "")</label>
                            @*  <button @onclick='()=>SetViewElemnt("QualityParameters")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>*@
                        </div>
                    </div>
                </div>
                <div><label class="info-text-size">@GetName( "Value", new TransactionalItemQualityPair())</label></div>
                <div><input @bind-value="qualityPair.Value" class="form-control info-text-size" placeholder="Edit value" /></div>
            </div>

        }
        <div class="grid-columns-2 ">
            <div>
            </div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick="Save" style="display:@(transactionalItemQualityPairView.Count()>0?"block":"none");" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
            </div>
        </div>
    </div>

</div>



@code {
    [Parameter]
    public string transactionalItemId { get; set; }
    InputTextSelector? ReferInputTextSelector;
    TransactionalItemQualityPair transactionalItemQualityPair = new TransactionalItemQualityPair();
    List<TransactionalItemQualityPair> transactionalItemQualityPairView = new List<TransactionalItemQualityPair>();
    TransactionalItemQuality transactionalItemQuality = new();
    List<TransactionalItemQuality> transactionalItemQualitys = new List<TransactionalItemQuality>();


    bool viewMsg = false;
    string msg = "";
    int status = 0;
    public int ParamCountResul = 0;
    bool transactionalItemQualityPairViewPopup = false;
    bool ViewPopupCount = false;
    bool PopupViewAddCustomer = false;
    string ModeSearcher = "";
   

    #region TileName
    public string Title { get; set; }
   
    public string Value { get; set; }
    #endregion TitleName

    protected async override void OnInitialized()
    {
        InitializedUICommonFunctions();

        if (transactionalItemId != null)
        {           
            var transactionalItems = await transactionalService.GetTransactionalItemById(transactionalItemId);
            transactionalItemQualitys = new();
            if (transactionalItems != null)
            {
                ConceptType type = transactionalItems.TypeOfConcept != null ? transactionalItems.TypeOfConcept : null;
                if (type != null)
                {
                    var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);
                    var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();
                    if (resul != null)
                    {
                        transactionalItemQualitys = resul.QualityParameters;
                        transactionalItemQualityPairView = new List<TransactionalItemQualityPair>();
                        foreach (var quality in transactionalItemQualitys)
                        {
                            transactionalItemQualityPairView.Add
                                (
                                  new TransactionalItemQualityPair
                                      {
                                          Value = quality.DefaultValue != null ? quality.DefaultValue : "",
                                          TransactionalItemQuality = quality,

                                      }
                                );

                        }
                    }

                    StateHasChanged();
                }
            }


            // transactionalItemQualityPairView = await transactionalService.GetTransactionalItemDetailsQualityParameters();
        }
    }

    public async void InitializedUICommonFunctions()
    {
        Title = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItem(), "QualityParameters"));
        //transactionalItemId = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemQualityPair(), "transactionalItemId"));
        Value = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemQualityPair(), "Value"));
        StateHasChanged();
    }

    private string ValidateName(string? Name)
    {
        return Name != null ? Name : "-";
    }

    private async void Save()
    {
        string Msg = "";
        int count = 0;
        foreach (var QualityPair in transactionalItemQualityPairView)
        {
            if (QualityPair.Value != null && QualityPair.Value != "")
            {
                var resul = await transactionalService.SaveQualityParameters(transactionalItemId, QualityPair);
                if (transactionalService.TransactionalItems != null && resul)
                {
                    if (transactionalService.TransactionalItems.QualityParameters == null)
                    {
                        transactionalService.TransactionalItems.QualityParameters = new();
                    }
                    transactionalService.TransactionalItems.QualityParameters.Add(QualityPair);
                    count++;
                    Msg = " Added : " + (count) + " of " + transactionalItemQualityPairView.Count();

                    StateHasChanged();
                }
            }

        }

        if (count > 0)
        {
            MsgOpen(Msg, 1);
        }

        else
        {
            MsgOpen("No added", 1);
        }



    }

    public async Task Refresh()
    { 
        StateHasChanged();
    }

    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo($"/TransactionalItemCard/{transactionalItemId}");
        await Refresh();
        StateHasChanged();
    }

  
      
    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void MsgOpen(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
        StateHasChanged();
    }
}
