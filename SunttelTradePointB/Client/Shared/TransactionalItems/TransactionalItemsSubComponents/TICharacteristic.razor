@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;
@inject ContextMenuService ContextMenuService

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }
</style>

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Characteristic</h3>
    <svg @onclick='()=>OpenAdd($"/CharacteristicCard/TransactionalItemCard/{IdTransactionalItem}")' title="Add new tag" style="margin-left:20px;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
    <img class="img-ico-list" src="/images/desploy.png" @onclick='()=>OpenAdd($"CharacteristicAllCard/{IdTransactionalItem}")' />
</div>

@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Characteristic Items"></WaitingProcessIndicator>

}
else
{
    @if (transactionalItemTypeCharacteristics != null)
    {


        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@transactionalItemTypeCharacteristics"
                TItem="TransactionalItemCharacteristicPair"
                ColumnWidth="300px"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="20">

            <Columns>
                <RadzenDataGridColumn TItem="TransactionalItemCharacteristicPair" Property="TransactionalItemCharacteristicPair.TransactionalItemCharacteristic.Name" Title="@GetName("TransactionalItemCharacteristic", new TransactionalItemCharacteristicPair())" Width="80px" />
                <RadzenDataGridColumn TItem="TransactionalItemCharacteristicPair" Property="Value" Title="@GetName("Value", new TransactionalItemCharacteristicPair())" Width="180px" TextAlign="Radzen.TextAlign.Center" />

            </Columns>
        </RadzenDataGrid>
    }
}

@code {
    [Parameter]
    public string IdTransactionalItem { get; set; }
    public List<TransactionalItemCharacteristicPair> transactionalItemTypeCharacteristics = new();
    public TransactionalItemCharacteristicPair transactionalItemTypeCharacteristicPair = new();

    bool isLoading = false;
    #region TileName


    #endregion TitleName

    protected async override void OnInitialized()
    {
        isLoading = true;
        if (IdTransactionalItem != null)
        {
            transactionalItemTypeCharacteristics = await transactionalService.GetCharacteristic(IdTransactionalItem);
            isLoading = false;
        }
      
        StateHasChanged();
    }


    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItemCharacteristicPair> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItemCharacteristicPair argObj = (TransactionalItemCharacteristicPair)args.Value;

        if (argObj != null)
        {
            Navigation.NavigateTo($"/CharacteristicCard/TransactionalItemCard/{IdTransactionalItem}/{argObj.Id}");
        }
    }

    #endregion Grid




    public void OpenAdd(string value)
    {
        Navigation.NavigateTo(value);
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


    public class TransactionalItemCharacteristicPairView : TransactionalItemTypeCharacteristic
    {
        public string ValuePair { get; set; }
        public string IdPair { get; set; }
    }

}
