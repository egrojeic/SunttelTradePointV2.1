@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Related Images</h3>
    <svg @onclick="@OpenNewImg" style="margin-left:20px;" title="Add new Image" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
</div>

@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}


<SfDialog @ref="GridImg" Visible="@ImgOpen" Header="Image view" EnableResize="true" AllowDragging="true" CloseOnEscape="true" ShowCloseIcon="true" Width="300px">
    <ChildContent>
        <div class="view-img">
            <img class="btn open" src="@ImagenUrlOpen" style="border-radius:5px;" />
        </div>
    </ChildContent>
</SfDialog>

<div class="row">
    <div class="col-md-12">
        @if (isLoading)
        {

            <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

        }
        else
        {
            if (PathImagesView != null)
            {
                <RadzenDataGrid AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowAlternatingRows="true"
                        FilterMode="FilterMode.Advanced"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true"
                        PageSize="5"
                        AllowPaging="true"
                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        Data="@PathImagesView"
                        TItem="TransactItemImage"
                        ColumnWidth="300px"
                        SelectionMode="DataGridSelectionMode.Single"
                        LogicalFilterOperator="LogicalFilterOperator.Or"
                       
                        PageNumbersCount="100">

                    <Columns>
                        <RadzenDataGridColumn TItem="TransactItemImage" Property="@nameof(TransactItemImage.Name)" Title="img" Frozen="false" Width="80px" />
                        <RadzenDataGridColumn TItem="TransactItemImage" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="60px">
                            <Template Context="data">
                                <RadzenImage Path="@(GetFullPathPhoto(data.PathImage))" style="width: 40px; height: 40px; border-radius: 8px;" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }

        }



   

    </div>
</div>

@code {
    [Parameter]
      public string transactionalItemId { get; set; }
    List<TransactItemImage> PathImagesView = new List<TransactItemImage>();
    SfDialog? GridImg;
    string ImagenUrlOpen = "";
    bool ImgOpen = false;
    bool isLoading = false;
    SfGrid<TransactItemImage>? GridImge;

  
    #region TileName
    public string Title { get; set; }
    public string Name { get; set; }
    public string PathImage { get; set; }
    #endregion TitleName

    bool viewMsg = false;
    string msg = "";
    int status = 0;

    protected override void OnInitialized()
    {
        InitializedUICommonFunctions();
      
            InitializedPathImage();
       
    }

    protected async void InitializedPathImage()
    {
        PathImagesView = await transactionalService.GetTransactionalItemDetailsPathImages(transactionalItemId);
        if (PathImagesView != null)
        {           
            StateHasChanged();
        }
    }

    public async void InitializedUICommonFunctions()
    {
        Title = UICommonFunctions.GetDisplayName(new TransactionalItem(), "PathImages");
        Name = UICommonFunctions.GetDisplayName(new TransactItemImage(), "Name");
        PathImage = UICommonFunctions.GetDisplayName(new TransactItemImage(), "PathImage");
        StateHasChanged();
    }

    public void OpenNewImg()
    {
        Navigation.NavigateTo($"ImageCard/{transactionalItemId}");
      
    }

   

    public void Delete(string value)
    {

        if (value != null)
        {
            var resul = PathImagesView.Where(s => s.Id.Trim() == value.Trim()).FirstOrDefault();
            if (resul != null)
            {
                PathImagesView.Remove(resul);
                if (transactionalService.TransactionalItems != null)
                {
                    if (transactionalService.TransactionalItems.PathImages == null)
                    {
                        transactionalService.TransactionalItems.PathImages = new List<TransactItemImage>();
                    }
                    var image = transactionalService.TransactionalItems.PathImages.Where(s => s.Id.Trim() == value.Trim()).FirstOrDefault();
                    if (image != null) transactionalService.TransactionalItems.PathImages.Remove(image);
                    Msg("Removed",1);

                }
            }
            ImagenUrlOpen = "";
            ImgOpen = false;
        }
    }
    public void SetOpenImg(string value)
    {
        ImagenUrlOpen = value;
        ImgOpen = true;
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<TransactItemImage>
    args)
    {
        TransactItemImage ObjModel = new();
        ObjModel = args.RowInfo.RowData;
        if (args.Item.Id == "Edit")
        {

        }
    }

    public string GetFullPathPhoto(string imgName)
    {
        return UIClientGlobalVariables.PathTransactionalItemsImages +"/"+ imgName;
    }


    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name != null ? Name : Name;
    }

    void Msg(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status; 
    }

}
