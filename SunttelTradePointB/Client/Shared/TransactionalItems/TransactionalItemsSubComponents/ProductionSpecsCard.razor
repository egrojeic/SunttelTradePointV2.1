@page "/ProductionSpecsCard/{Page}"
@page "/ProductionSpecsCard/{Page}/{transactionalItemId}/{productionSpecsToId}"
@page "/ProductionSpecsCard/{Page}/{SubPage}/{transactionalItemId}/{productionSpecsToId}"

@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Lists
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;
@inject ContextMenuService ContextMenuService

@if (@AlertOpen)
{
    <MessageSaveComponent isVisible="AlertOpen" message="@msg">
    </MessageSaveComponent>
}



<div class="flex-verical-center position-relative" style="display:@(!modeEdit?"flex":"none");">

    @if (pageView == "TransactionalItemTag")
    {

        <PageTitleComponent Title="@GetName("TransactionalItemProcessTags",new TransactionalItemTag() )" IconName="tag.png"
                        Description="@($"Here you can add {@GetName("TransactionalItemProcessTags",new TransactionalItemTag() )}")">
        </PageTitleComponent>
        <div class="flex-horizontal-center ">
            <div class="grid-columns-2 box-shadow-mode width-page1">

                <div>
                    <label>@Key</label>
                </div>
                <div>
                    <input @bind-value="TransactionalItemTag.Key" class="form-control" placeholder="Edit key" />
                </div>
                <div c>
                    <label>@Value</label>
                </div>
                <div>
                    <input @bind-value="TransactionalItemTag.Value" class="form-control" placeholder="Edit value" />
                </div>

                <div></div>
                <div>
                    <button @onclick='()=>OpenAdd("TransactionalItemTag")' class="size-btn color-btn margin-left" style="background-color:#00ccff;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                    <button @onclick='Addtag' class="size-btn color-btn margin-left" style="background-color:#00ccff;"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                </div>
            </div>


        </div>
    }
</div>


<div class="flex-verical-center position-relative" style="display:@(modeEdit?"flex":"none");">


    <PageTitleComponent Title="@GetName("ProductionSpecs",new TransactionalItem() )" IconName="productionSpecs.png"
                        Description="Here you can add production specs">
    </PageTitleComponent>

    <div class="container-menu-g">
        <nav>
            <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>
            </SfSplitButton>
        </nav>
    </div>

    <div id="add-recipe">
        <SfTab @ref="referTag" Height="250px" CssClass="tab-adaptive">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@ProductionSpecs"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <br />
                        <br />
                        <div class="content-production">

                            <div class="item">
                                <label>@Name</label>
                                <input @bind-value="_TransactionalItemProcessStep.Name" class="form-control" placeholder="Edit name" />
                            </div>
                            <div class="item"><label>@Cost</label><input type="number" @bind-value="_TransactionalItemProcessStep.Cost" class="form-control" /></div>
                            <div class="item"><label>@Order</label><input type="number" @bind-value="_TransactionalItemProcessStep.Order" class="form-control" /></div>

                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GeneralInstructions"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="content-production">
                            <br />
                            <textarea placeholder="Edit new instruction " @bind="_TransactionalItemProcessStep.GeneralInstructions" class="form-control" style="width:100%; height:180PX; resize:none; font-size:14px; ">
                            </textarea>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@TransactionalItemProcessTags"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>

                        <div class="flex-horizontal-center ">
                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "TransactionalItemProcesses", new TransactionalItemType())</h3>
                                <svg @onclick='()=>ClosedAdd("TransactionalItemTag")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>
                            @if (TransactionalItemTagList == null) TransactionalItemTagList = new();
                            @if (isLoading)
                            {

                                <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

                            }
                            else
                            {
                                if (TransactionalItemTagList != null)
                                {
                                    <RadzenDataGrid AllowFiltering="true"
                                            AllowColumnResize="true"
                                            AllowAlternatingRows="true"
                                            FilterMode="FilterMode.Advanced"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowSorting="true"
                                            PageSize="5"
                                            AllowPaging="true"
                                            PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                            ShowPagingSummary="true"
                                            Data="@TransactionalItemTagList"
                                            TItem="TransactionalItemTag"
                                            ColumnWidth="300px"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            LogicalFilterOperator="LogicalFilterOperator.Or"
                                            CellContextMenu="@ShowContextMenuWithContent"
                                            PageNumbersCount="100">

                                        <Columns>
                                            <RadzenDataGridColumn TItem="TransactionalItemTag" Property="TransactionalItemTag.Key" Title="@GetName("Key", new TransactionalItemTag())" Frozen="false" Width="80px" />
                                            <RadzenDataGridColumn TItem="TransactionalItemTag" Property="TransactionalItemTag.Value" Filterable="true" Title="@GetName("Value", new TransactionalItemTag())" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                          
<RadzenDataGridColumn TItem="TransactionalItemTag" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="60px" >
                <Template Context="data">
                    <RadzenImage Path="/images//acordion_image1.jpg" style="width: 40px; height: 40px; border-radius: 8px;" />
                </Template>
            </RadzenDataGridColumn>
                                                            </Columns>
                                    </RadzenDataGrid>
                                }

                            }

                        </div>

                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    </div>


</div>


@code {
    [Parameter]
    public string Mode { get; set; } = "Add";
    [Parameter]
    public string Page { get; set; }
    [Parameter]
    public string SubPage { get; set; }
    [Parameter]
    public string transactionalItemId { get; set; }
    [Parameter]
    public string productionSpecsToId { get; set; }
    TransactionalItemProcessStep _TransactionalItemProcessStep = new TransactionalItemProcessStep();
    List<TransactionalItemTag> TransactionalItemTagList = new List<TransactionalItemTag>();
    TransactionalItemTag TransactionalItemTag = new TransactionalItemTag();

    SfListView<TransactionalItemTag>? referTagList;
    SfTab? referTag;


    bool isLoading = false;

    public bool AlertOpen = false;
    public string msg = "";
    public int status = 0;
    public string pageView = "";
    public bool modeEdit = true, viewMsg = false;
    public int statusMsg = 1;



    #region TileName
    public string ProductionSpecs { get; set; }
    public string Key { get; set; }
    public string Value { get; set; }
    public string Name { get; set; }
    public string Cost { get; set; }
    public string Order { get; set; }
    public string GeneralInstructions { get; set; }
    public string TransactionalItemProcessTags { get; set; }


    #endregion TitleName

    protected override void OnInitialized()
    {
        InitializedUICommonFunctions();



    }

    protected async override  Task OnInitializedAsync() {


        if (transactionalItemId != null && productionSpecsToId !=null)
        {

            _TransactionalItemProcessStep = await transactionalService.GetTransactionalItemDetailsProductionSpecsToId(transactionalItemId, productionSpecsToId);

            TransactionalItemTagList = _TransactionalItemProcessStep.TransactionalItemProcessTags != null ? _TransactionalItemProcessStep.TransactionalItemProcessTags : new();

        }
        else
        {

            _TransactionalItemProcessStep = new();
            TransactionalItemTagList = new();

        }

    }


    public async void InitializedUICommonFunctions()
    {
        ProductionSpecs = UICommonFunctions.GetDisplayName(new TransactionalItem(), "ProductionSpecs");
        Key = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemTag(), "Key"));
        Value = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemTag(), "Value"));
        Name = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "Name"));
        Cost = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "Cost"));
        Order = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "Order"));
        GeneralInstructions = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "GeneralInstructions"));
        TransactionalItemProcessTags = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "TransactionalItemProcessTags"));

        StateHasChanged();
    }

    private string ValidateName(string? Name)
    {
        return Name != null ? Name : "-";
    }




    public void AddItem(string value)
    {
        if (value == "TransactionalItemProcesses")
        {

        }


        Msg("Added", 1);

    }



    private void Addtag()
    {
        TransactionalItemTagList.Add(TransactionalItemTag);
        TransactionalItemTag = new TransactionalItemTag();
        OpenAlert("Added", 1);
        referTag.RefreshAsync();
        StateHasChanged();
    }


    public async Task Closed(string Element)
    {
        if (Element == "control")
        {
            if (SubPage != null && SubPage != "") Navigation.NavigateTo($"/{Page}/{SubPage}/Edit");
        }
        else
        {
            Navigation.NavigateTo($"/{Page}");
        }
        StateHasChanged();
    }

    public void OpenAlert(string _msg, int _status)
    {
        AlertOpen = true;
        msg = _msg;
        status = _status;
    }




    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItemTag> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItemTag argObj = (TransactionalItemTag)args.Value;

    }

    #endregion Grid




    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }


    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";

        if (tile == "Save")
        {

            _TransactionalItemProcessStep.TransactionalItemProcessTags = TransactionalItemTagList;

            if (transactionalItemId != "" && transactionalItemId != null)
            {

                var resul = await transactionalService.SaveProductionSpecs(transactionalItemId, _TransactionalItemProcessStep);
                if (resul)
                {
                    OpenAlert("Saved", 1);

                    if (transactionalService.TransactionalItems != null)
                    {
                        if (transactionalService.TransactionalItems.ProductionSpecs == null)
                        {
                            transactionalService.TransactionalItems.ProductionSpecs = new List<TransactionalItemProcessStep>();
                        }
                        transactionalService.TransactionalItems.ProductionSpecs.Add(_TransactionalItemProcessStep);

                    }


                }
                else
                {
                    OpenAlert("No saved", 1);
                }
            }
            else { OpenAlert("No saved", 0); };
        }
        StateHasChanged();
    }






    private void Msg(string? Msg, int status)
    {
        msg = Msg;
        viewMsg = true;
        statusMsg = status;
    }
}
