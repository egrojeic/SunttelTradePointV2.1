@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">@GetName("ModelRecipe", new PackingSpecs())</h3>
    <svg @onclick="@OpenAdd" title="Add new tag" style="margin-left:20px;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
</div>

@if (ProductModels == null) { ProductModels = new(); }

@if (ProductModels != null)
{
    <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                PageSize="4"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@ProductModels"
                TItem="ProductModel"
                ColumnWidth="300px"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100">

        <Columns>
            <RadzenDataGridColumn TItem="ProductModel" Property="Code" Title="Code" Frozen="false" Width="80px" />
            <RadzenDataGridColumn TItem="ProductModel" Property="Name" Filterable="true" Title="Name" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />
            <RadzenDataGridColumn TItem="ProductModel" Property="FullClassName" Title="Group" Width="160px" />
            <RadzenDataGridColumn TItem="ProductModel" Property="Status.Name" Title="Status" Width="200px" />
            <RadzenDataGridColumn TItem="ProductModel" Property="ReferenceCost" Title="Reference Cost" Width="120px" />


        </Columns>
    </RadzenDataGrid>
}



@code {
    [Parameter]
    public string IdTransactionalItem { get; set; }
    List<ProductModel> ProductModels = new();


    string msg = "";
    bool viewMsg = false;
    bool status = false;


    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {

        OnInitializedData();

    }


    public async void OnInitializedData()
    {

        if (IdTransactionalItem != null)
        {
            ProductModels = await transactionalService.GetSelectorListTransactionalItemModels(IdTransactionalItem);

            StateHasChanged();
        }

    }

    #region Grid
    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<ProductModel> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        ProductModel argObj = (ProductModel)args.Value;

        if (argObj != null)
        {
            Navigation.NavigateTo($"/ProductModelCard/{IdTransactionalItem}/{argObj.Id}");
        }
    }

    #endregion Grid


    public void OpenAdd()
    {
        Navigation.NavigateTo($"/ProductModelCard/{IdTransactionalItem}");
    }

    private void Msg(string _msg, int _status)
    {
        msg = _msg;
        viewMsg = true;
        status = status;
    }



    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }


}
