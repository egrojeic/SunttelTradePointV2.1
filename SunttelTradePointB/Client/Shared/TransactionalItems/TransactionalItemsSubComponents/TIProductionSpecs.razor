@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject ITransactionalItemsService transactionalService;


<style>
     .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>


<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Production Specs</h3>
    <svg @onclick="@ViewControlAddProductionSpecs" style="margin-left:20px;" title="Add new Process" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
</div>
@*<ProductionSpecsCard @ref="referNewProductionSpecs" save="@Save" ></ProductionSpecsCard>*@
<div class="row">
    <div class="col-md-12">
        @if (isLoading)
        {

            <WaitingProcessIndicator loadingTopic="Transactional Process Step Items"></WaitingProcessIndicator>

        }
        else
        {
            @if (productionSpecs != null)
            {
                <RadzenDataGrid AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowAlternatingRows="true"
                        FilterMode="FilterMode.Advanced"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true"
                        AllowPaging="true"
                        PageSize="50"
                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        Data="@productionSpecs"
                        TItem="TransactionalItemProcessStep"
                        ColumnWidth="100%"
                        SelectionMode="DataGridSelectionMode.Single"
                        LogicalFilterOperator="LogicalFilterOperator.Or"
                        CellContextMenu="@ShowContextMenuWithContent"
                        PageNumbersCount="100">

                    <Columns>
                        <RadzenDataGridColumn TItem="TransactionalItemProcessStep" Property="Name" Title="@Name" Width="110"> </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TransactionalItemProcessStep" Property="GeneralInstructions" Title="@GeneralInstructions" Width="110"> </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TransactionalItemProcessStep" Property="Cost" Title="@Cost" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right" Width="110"> </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                  <div class="container-total">
                    <div class="item">
                        <label>
                            @(
                                $"Records: {productionSpecs.Count}"
                                )
                        </label>
                    </div>
                </div>

            }
        }
    </div>
</div>
@code {
    [Parameter]
    public string IdTransactionalItem { get; set; }
    List<TransactionalItemProcessStep> productionSpecs = new List<TransactionalItemProcessStep>();

    ProductionSpecsCard? referNewProductionSpecs;
    bool isLoading = false;
    #region TileName
    public string ProductionSpecs { get; set; }
    public string Key { get; set; }
    public string Value { get; set; }
    public string Name { get; set; }
    public string Cost { get; set; }
    public string Order { get; set; }
    public string GeneralInstructions { get; set; }
    public string TransactionalItemProcessTags { get; set; }


    #endregion TitleName

    protected override void OnInitialized()
    {
        InitializedUICommonFunctions();
        OnInitializedProcessStep();
    }

    protected async void OnInitializedProcessStep()
    {
        isLoading = true;
        if (IdTransactionalItem != null)
        {
            productionSpecs = await transactionalService.GetTransactionalItemDetailsProductionSpecs(IdTransactionalItem);

           
        }
        if (productionSpecs == null)
        {
            productionSpecs = new();
        }
         isLoading = false;
        StateHasChanged();
    }

    public async void InitializedUICommonFunctions()
    {
        ProductionSpecs = UICommonFunctions.GetDisplayName(new TransactionalItem(), "ProductionSpecs");
        Key = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemTag(), "Key"));
        Value = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemTag(), "Value"));
        Name = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "Name"));
        Cost = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "Cost"));
        Order = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "Order"));
        GeneralInstructions = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "GeneralInstructions"));
        TransactionalItemProcessTags = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemProcessStep(), "TransactionalItemProcessTags"));

        StateHasChanged();
    }

    private string ValidateName(string? Name)
    {
        return Name != null ? Name : Name;
    }

    void ViewControlAddProductionSpecs()
    {
        Navigation.NavigateTo($"/ProductionSpecsCard/TransactionalItemCard/{IdTransactionalItem}");
    }

    public void Save(TransactionalItemProcessStep Obj)
    {
        try
        {
            productionSpecs.Add(Obj);

        }
        catch (Exception e)
        {
            throw;
        }


    }



    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItemProcessStep> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItemProcessStep argObj = (TransactionalItemProcessStep)args.Value;
        transactionalService.ConceptTransactionalItemProcessStep = (TransactionalItemProcessStep)args.Value;

        if (transactionalService.ConceptTransactionalItemProcessStep != null)
        {
            Navigation.NavigateTo($"/ProductionSpecsCard/TransactionalItemCard/1/{IdTransactionalItem}/{argObj.Id}");

        }
    }

    #endregion Grid


}
