@page "/ItemAssemblyType/{modePage}"
@page "/ItemAssemblyType/add/{modePage}"
@page "/ItemAssemblyType/{Page}/{itemAssemblyTypeId}"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation
@inject ContextMenuService ContextMenuService



@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}
<PageTitleComponent Title="@GetName("ItemAssemblyType", new PackingSpecs())" IconName="assemblyType.png"
                    Description="Here you can add tags">
</PageTitleComponent>


@if (modePage == "addAndEdit")
{
    <div class="flex-horizontal-center">
        <div class="grid-mode-row">
            <div><label>@GetName("Name", new AtomConcept())</label></div>
            <div> <input @bind-value="itemAssemblyType.Name" class="form-control" placeholder="Edit key" /></div>
            <div> <label>@GetName("Code", new AtomConcept())</label></div>
            <div> <input @bind-value="itemAssemblyType.Code" class="form-control" placeholder="Edit value" /></div>
            <div> <label>@GetName("Notes", new AtomConcept())</label></div>
            <div> <input @bind-value="itemAssemblyType.Notes" class="form-control" placeholder="Edit value" /></div>
            <div></div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>Navigation.NavigateTo("/ItemAssemblyType/list")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
            </div>
        </div>

    </div>
}
@if (modePage == "list")
{


    @if (isLoading)
    {

        <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

    }
    else
    {
        <div class="panelMenuContainer">
            <MenuConcet></MenuConcet>
            <SearchComponent @bind-FilterTextSet="@conceptFilter"></SearchComponent>

        </div>
        @if (itemAssemblysType == null) itemAssemblysType = new();
        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                TItem="AssemblyType"
                Data="@itemAssemblysType"
                ColumnWidth="300px"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100"
                PageSize="2">

            <Columns>
                <RadzenDataGridColumn TItem="AssemblyType" Property="Name" Title="@GetName("Name", new AtomConcept())" Width="80px" />
                <RadzenDataGridColumn TItem="AssemblyType" Property="Code" Title="@GetName("Code", new AtomConcept())" Width="80px" />
                <RadzenDataGridColumn TItem="AssemblyType" Property="Notes" Title="@GetName("Notes", new AtomConcept())" Width="80px" />

            </Columns>
        </RadzenDataGrid>
    }


}



@code {
    [Parameter]
    public string itemAssemblyTypeId { get; set; }
    [Parameter]
    public string Page { get; set; }
    [Parameter]
    public string modePage { get; set; }
    [Parameter]
    public string _filterItems { get; set; }

    public AssemblyType itemAssemblyType = new();
    public List<AssemblyType> itemAssemblysType = new();

    bool viewMsg = false;
    string msg = "";
    int status = 0;
    string transactionalItemId = "";
    bool isLoading = false;

    public string? conceptFilter
    {
        get { return _filterItems; }
        set
        {
            _filterItems = value;
            LoadData();
        }
    }


    protected override Task OnInitializedAsync()
    {
        var r = modePage;
        if (itemAssemblyTypeId == null)
        {
            itemAssemblyType = new();
        }
        transactionalService.Page = "ItemAssemblyType";
      
        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        transactionalService.Page = "ItemAssemblyType";
        base.OnParametersSet();
    }


    private async void Save()
    {
        var result = await transactionalService.SaveAssemblyType(itemAssemblyType);
        if (result)
        {
            MsgOpen("Saved", 1);
        }
        else
        {
            MsgOpen("No saved", 1);
        }
        transactionalService.Page = "Groups";
        StateHasChanged();
    }


    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<AssemblyType> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
        </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        AssemblyType argObj = (AssemblyType)args.Value;
        itemAssemblyType = argObj;
        Navigation.NavigateTo("/ItemAssemblyType/addAndEdit");
    }

    #endregion Grid

    private async Task LoadData()
    {
        isLoading = true;
        itemAssemblysType = await transactionalService.GetSelectorListAssemblyTypes(_filterItems);

        isLoading = false;
        StateHasChanged();

    }

    public void SetPage(string name)
    {
        modePage = name;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public async Task Closed(string Element)
    {
        if (Element == "control")
        {

            Navigation.NavigateTo($"/{Page}/{_filterItems}");

        }
        StateHasChanged();
    }

    public void MsgOpen(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }

}
