@page "/QualityParametersCard/{Page}/{transactionalItemId}"
@page "/QualityParametersCard/{Page}/{transactionalItemId}/{qualityParametersCardId}"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject ITransactionalItemsService transactionalService;

@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<PageTitleComponent Title="@Title" IconName="QualityParameters.png"
                    Description="@($"Here you can add {@Title}")">
</PageTitleComponent>

<div id="add-recipe">
    <div class="flex-horizontal-center">
        <div class="grid-columns-2 box-shadow-mode">

            <div>
                <label class="info-text-size">
                    @GetName( "TransactionalItemQuality", new TransactionalItemQualityPair())
                </label>
            </div>
            <InputTextSelector3 TItem="TransactionalItemQuality"
                                Id="@GetName( "TransactionalItemQuality", new TransactionalItemQualityPair())"
                                EventSearcherValueAndId="EventSearcherValueAndId"
                                EventIdSelectionAndId="EventIdSelectionAndId"
                                caption="@(transactionalItemQualityPair !=null && transactionalItemQualityPair.TransactionalItemQuality != null ? transactionalItemQualityPair.TransactionalItemQuality?.Name : "")"
                                Items="transactionalItemQualitys">
            </InputTextSelector3>

            <div><label class="info-text-size" >@GetName( "Value", new TransactionalItemQualityPair())</label></div>
            <div><input @bind-value="transactionalItemQualityPair.Value" class="form-control info-text-size" placeholder="Edit value" /></div>

            <div>
            </div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
            </div>

        </div>
    </div>

</div>



@code {
    [Parameter]
    public string transactionalItemId { get; set; }
    [Parameter]
    public string qualityParametersCardId { get; set; }
    [Parameter]
    public string Page { get; set; }
    [Parameter]
    public string SubPage { get; set; }


    InputTextSelector? ReferInputTextSelector;
    TransactionalItemQualityPair transactionalItemQualityPair = new TransactionalItemQualityPair();
    List<TransactionalItemQuality> transactionalItemQualitys = new List<TransactionalItemQuality>();


    bool viewMsg = false;
    string msg = "";
    int status = 0;
    public int ParamCountResul = 0;
    bool ViewPopupCount = false;
    bool PopupViewAddCustomer = false;
    string ModeSearcher = "";


    #region TileName
    public string Title { get; set; }
    public string Value { get; set; }
    #endregion TitleName

    protected async override void OnInitialized()
    {
        Load();
        InitializedUICommonFunctions();
        var parameters = await transactionalService.GetTransactionalItemDetailsQualityParameters(transactionalItemId);
        if (parameters != null)
        {
            transactionalItemQualityPair = parameters.Where(s => s.Id == qualityParametersCardId).FirstOrDefault();
        }

        var transactionalItems = await transactionalService.GetTransactionalItemById(transactionalItemId);

        if (transactionalItems != null)
        {
            ConceptType type = transactionalItems.TypeOfConcept != null ? transactionalItems.TypeOfConcept : null;
            if (type != null)
            {
                var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);
                var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();
                if (resul != null)
                {
                    transactionalItemQualitys = resul.QualityParameters != null ? resul.QualityParameters : new();
                }

            }
        }
        Load();
        StateHasChanged();
    }

    private async void Save()
    {
        if (transactionalItemQualityPair.TransactionalItemQuality != null)
        {
            var resul = await transactionalService.SaveQualityParameters(transactionalItemId, transactionalItemQualityPair);

            if (resul)
            {
                MsgOpen("Saved", 1);
            }
            else
            {
                MsgOpen("No saved", 1);
            }
            StateHasChanged();
        }
        else
        {
            MsgOpen("No saved", 1);
        }

    }



    public async void InitializedUICommonFunctions()
    {
        Title = GetName(new TransactionalItem(), "QualityParameters");

        Value = GetName(new TransactionalItemQualityPair(), "Value");
        StateHasChanged();
    }

    private string GetName(object model,string? Name)
    {       
        if (UICommonFunctions.GetDisplayName(model, Name) != null)
            Name = UICommonFunctions.GetDisplayName(model, Name);

        return Name;
    }

    protected async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        var transactionalItem = await transactionalService.GetTransactionalItemById(transactionalItemId);
        transactionalItemQualitys = new();
        if (transactionalItem != null)
        {
            if (transactionalItem.TypeOfConcept != null)
            {
                var itemTypes = await transactionalService.GetTransactionalItemTypes(transactionalItem.TypeOfConcept.Name);
                var resul = itemTypes.Where(s => s.Id == transactionalItem.TypeOfConcept.Id).FirstOrDefault();
                if (!arg.value.ToLower().Contains("all") && !arg.value.ToLower().Contains("todo"))
                {
                    transactionalItemQualitys = resul.QualityParameters.Where(s => s.Name.ToLower().Contains(arg.value.ToLower())).ToList();
                }
                else
                {
                    transactionalItemQualitys =resul !=null && resul.QualityParameters != null ? resul.QualityParameters : new();
                }

            }



            if (transactionalItemQualitys != null)
            {
                ParamCountResul = transactionalItemQualitys.Count();
                ViewPopupCount = ParamCountResul > 0;
            }
            else
            {
                ViewPopupCount = false;
                ParamCountResul = 0;

            }
        }

        StateHasChanged();
    }

    protected void EventIdSelectionAndId(TransactionalItemQuality item)
    {
        if(transactionalItemQualityPair.TransactionalItemQuality==null)
            transactionalItemQualityPair.TransactionalItemQuality = new();

        transactionalItemQualityPair.TransactionalItemQuality = item;
        StateHasChanged();
    }

    public async Task Closed(string Element)
    {
        if (Element == "control")
        {
            Navigation.NavigateTo($"/{Page}/{transactionalItemId}");
        }
        else
        {
            Navigation.NavigateTo($"/{Page}");
        }       

    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void MsgOpen(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }

    public void Load()
    {
        if (transactionalItemQualityPair == null) transactionalItemQualityPair = new();
    }

}
