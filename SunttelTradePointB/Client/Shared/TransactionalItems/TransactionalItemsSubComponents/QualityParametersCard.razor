@page "/QualityParametersCard/{Page}/{transactionalItemId}"
@page "/QualityParametersCard/{Page}/{transactionalItemId}/{qualityParametersCardId}"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;

@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<PageTitleComponent Title="@Title" IconName="QualityParameters.png"
                    Description="@($"Here you can add {@Title}")">
</PageTitleComponent>

<div id="add-recipe">
    <div class="flex-horizontal-center">
        <div class="grid-columns-2 box-shadow-mode">

            <div>
                <label>
                    @GetName( "TransactionalItemQuality", new TransactionalItemQualityPair())
                </label>
            </div>
            <InputTextSelector @ref="ReferInputTextSelector"
                               Id="QualityParameters"
                               caption="@(transactionalItemQuality != null ? transactionalItemQuality.Name : "")"
                               EventSearcherValue="EventSearcherValue"
                               EventIdSelection="EventIdSelection"
                               ParamCountResul="ParamCountResul"
                               EventClosed="ClosedInput"
                               ViewSelect="ViewPopupCount">
                @{
                    if (transactionalItemQualitys != null)
                    {
                        foreach (var QualityParameter in transactionalItemQualitys)
                        {
                            <option value="@QualityParameter.Id">@QualityParameter.Name</option>
                        }
                    }

                }
            </InputTextSelector>
            <div><label>@GetName( "Value", new TransactionalItemQualityPair())</label></div>
            <div><input @bind-value="transactionalItemQualityPair.Value" class="form-control" placeholder="Edit value" /></div>

            <div>
            </div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
            </div>

        </div>
    </div>

</div>



@code {
    [Parameter]
    public string transactionalItemId { get; set; }
    [Parameter]
    public string qualityParametersCardId { get; set; }
    [Parameter]
    public string Page { get; set; }
    [Parameter]
    public string SubPage { get; set; }


    InputTextSelector? ReferInputTextSelector;
    TransactionalItemQualityPair transactionalItemQualityPair = new TransactionalItemQualityPair();
    List<TransactionalItemQualityPair> transactionalItemQualityPairView = new List<TransactionalItemQualityPair>();
    TransactionalItemQuality transactionalItemQuality = new();
    List<TransactionalItemQuality> transactionalItemQualitys = new List<TransactionalItemQuality>();


    bool viewMsg = false;
    string msg = "";
    int status = 0;
    public int ParamCountResul = 0;
    bool ViewPopupCount = false;
    bool PopupViewAddCustomer = false;
    string ModeSearcher = "";


    #region TileName
    public string Title { get; set; }

    public string Value { get; set; }
    #endregion TitleName

    protected async override void OnInitialized()
    {
        InitializedUICommonFunctions();


        var transactionalItems = await transactionalService.GetTransactionalItemById(transactionalItemId);

        if (transactionalItems != null)
        {
            ConceptType type = transactionalItems.TypeOfConcept != null ? transactionalItems.TypeOfConcept : null;
            if (type != null)
            {
                var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);
                var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();
                if (resul != null)
                {
                    transactionalItemQualitys = resul.QualityParameters !=null ? resul.QualityParameters :  new();
                }

            }
        }
    }

    public async void InitializedUICommonFunctions()
    {
        Title = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItem(), "QualityParameters"));
        transactionalItemId = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemQualityPair(), "transactionalItemId"));
        Value = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemQualityPair(), "Value"));
        StateHasChanged();
    }

    private string ValidateName(string? Name)
    {
        return Name != null ? Name : "-";
    }

    private async void Save()
    {
        transactionalItemQualityPair.TransactionalItemQuality = transactionalItemQuality;
        var resul = await transactionalService.SaveQualityParameters(transactionalItemId, transactionalItemQualityPair);
        if (transactionalService.TransactionalItems != null && resul)
        {
            if (transactionalService.TransactionalItems.QualityParameters == null)
            {
                transactionalService.TransactionalItems.QualityParameters = new List<TransactionalItemQualityPair>();
            }
            transactionalService.TransactionalItems.QualityParameters.Add(transactionalItemQualityPair);
            MsgOpen("Saved", 1);
            StateHasChanged();
        }
        else
        {
            MsgOpen("No saved", 1);
        }

    }

    public async Task Refresh()
    {
        //ReferInputTextSelector.Refresh();
        StateHasChanged();
    }

    public async Task Closed(string Element)
    {
        if (Element == "control")
        {
            Navigation.NavigateTo($"/{Page}/{transactionalItemId}");
        }
        else
        {
            Navigation.NavigateTo($"/{Page}");
        }

        await Refresh();
        StateHasChanged();
    }

    protected async void EventIdSelection(string SelectionId)
    {
        ClosedInput();
        transactionalItemQuality = transactionalItemQualitys.Where(s => s.Id == SelectionId || s.Name == SelectionId).FirstOrDefault();
        if (transactionalItemQuality == null) transactionalItemQuality = new();

        await Refresh();
    }
    protected async void EventSearcherValue(string value)
    {
        ViewPopupCount = true;
        ClosedInput();
        var transactionalItems = transactionalService.TransactionalItems;
        transactionalItemQualitys = new();
        if (transactionalItems != null)
        {
            ConceptType type = transactionalItems.TypeOfConcept != null ? transactionalItems.TypeOfConcept : null;
            if (type != null)
            {
                var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);
                var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();
                if (!value.ToLower().Contains("all") && !value.ToLower().Contains("todo"))
                {
                    transactionalItemQualitys = resul.QualityParameters.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
                }
                else
                {
                    transactionalItemQualitys = resul.QualityParameters;
                }


            }



            if (transactionalItemQualitys != null)
            {
                ParamCountResul = transactionalItemQualitys.Count();
                ViewPopupCount = ParamCountResul > 0;
            }
            else
            {
                ViewPopupCount = false;
                ParamCountResul = 0;

            }
        }

        await Refresh();
    }

    public void ClosedInput()
    {
        ViewPopupCount = false;
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void MsgOpen(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }
}
