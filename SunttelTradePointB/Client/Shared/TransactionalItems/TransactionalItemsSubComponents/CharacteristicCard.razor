@page "/CharacteristicCard/{Page}"
@page "/CharacteristicCard/{Page}/{SubPage}/{Mode}"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;


@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<PageTitleComponent Title="@GetName("TransactionalItemTypeCharacteristics", new TransactionalItemType())" IconName="characteristics.png"
                    Description="@($"Here you can add {GetName("TransactionalItemTypeCharacteristics", new TransactionalItemType())}")">
</PageTitleComponent>

<div id="add-recipe">
    <div class="flex-horizontal-center">
        <div class="grid-columns-2 box-shadow-mode">

            <div>
                <label>
                    @GetName( "ItemCharacteristics", new TransactionalItem())
                </label>
            </div>
            <div>
                <div style="position:relative;">
                    <div class="item-edit">
                        <label>@(transactionalItemTypeCharacteristic != null ? transactionalItemTypeCharacteristic.Name : "")</label>
                        <button @onclick='()=>SetViewElemnt("TransactionalItemTypeCharacteristic")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>

                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelection" ParamCountResul="ParamCountResul" ViewSelect="ViewPopupCount" EventClosed="ClosedInput" ViewControl="CharacteristicControlInput">
                        @{
                            if (transactionalItemTypeCharacteristics != null)
                            {
                                foreach (var Obj in transactionalItemTypeCharacteristics)
                                {
                                    <option value="@Obj.Id">@Obj.Name</option>
                                }
                            }

                        }
                    </InputTextSelector>
                </div>
            </div>
            <div><label> @GetName("Value", new TransactionalItemCharacteristicPair()) </label></div>
            <div>
                <select @bind="transactionalItemCharacteristicPair.Value" class="form-control">
                    @foreach (var item in possibleValues)
                    {
                        <option value="@item.Name">@item.Name</option>
                    }
                </select>
            </div>
            <div>
            </div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string Mode { get; set; }
    [Parameter]
    public string Page { get; set; }
    [Parameter]
    public string SubPage { get; set; }


    public List<TransactionalItemCharacteristicPair> transactionalItemCharacteristicPairs = new();
    public TransactionalItemCharacteristicPair transactionalItemCharacteristicPair = new();
    List<TransactionalItemTypeCharacteristic> transactionalItemTypeCharacteristics = new();
    TransactionalItemTypeCharacteristic transactionalItemTypeCharacteristic = new();
    InputTextSelector? ReferInputTextSelector;
    public List<TransactionalItemCharacteristic> possibleValues = new();

    bool viewMsg = false;
    string msg = "";
    int status = 0;
    public int ParamCountResul = 0;
    bool CharacteristicControlInput = false;
    bool ViewPopupCount = false;
    string ModeSearcher = "";
    public string _transactionalItemId { get; set; }

    #region TileName
    public string Title { get; set; }
    public string transactionalItemId { get; set; }
    public string Value { get; set; }
    #endregion TitleName

    protected async override void OnInitialized()
    {
        if (transactionalService?.transactionalItemId != null && transactionalService?.transactionalItemId != "")
        {
            _transactionalItemId = transactionalService.transactionalItemId != null ? transactionalService.transactionalItemId : "";
        }

        if (Mode=="Edit")
        {
            if (transactionalService.ConcepttransactionalItemCharacteristicPair!=null)
            {

                transactionalItemCharacteristicPair = transactionalService.ConcepttransactionalItemCharacteristicPair;
                if (transactionalItemCharacteristicPair != null)
                {
                    transactionalItemTypeCharacteristic = transactionalItemCharacteristicPair.TransactionalItemCharacteristic;
                    transactionalItemCharacteristicPair.Value = transactionalItemCharacteristicPair.Value;
                    string id = transactionalItemCharacteristicPair.TransactionalItemCharacteristic.Id != null ? transactionalItemCharacteristicPair.TransactionalItemCharacteristic.Id : "";
                    ModeSearcher = "TransactionalItemTypeCharacteristic";   
                    possibleValues = transactionalItemCharacteristicPair.TransactionalItemCharacteristic.PossibleValues != null ? transactionalItemCharacteristicPair.TransactionalItemCharacteristic.PossibleValues : new();
                }               

            }
        }

    }

    private async void Save()
    {
        transactionalItemCharacteristicPair.TransactionalItemCharacteristic = transactionalItemTypeCharacteristic;
        var resul = await transactionalService.SaveCharacteristics(_transactionalItemId, transactionalItemCharacteristicPair);
        if (resul)
        {
            MsgOpen("Saved", 1);
            StateHasChanged();
        }

    }

    public async Task Refresh()
    {
        //ReferInputTextSelector.Refresh();
        StateHasChanged();
    }

    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo("/TransactionalItemCard/5/Edit");
    }

    protected async void EventIdSelection(string SelectedId)
    {       
        transactionalItemTypeCharacteristic = transactionalItemTypeCharacteristics.Where(c => c.Name == SelectedId || c.Id == SelectedId).FirstOrDefault();
        if (transactionalItemTypeCharacteristic == null) transactionalItemTypeCharacteristic = new();
        ParamCountResul = 0;
        CharacteristicControlInput = false;
        ViewPopupCount = false;

        if (transactionalItemTypeCharacteristics != null)
        {
            var characteristic = transactionalItemTypeCharacteristics.Where(s => s.Id != null && s.Id.Trim() == SelectedId.Trim()).FirstOrDefault();
            if (characteristic != null) possibleValues = characteristic.PossibleValues != null ? characteristic.PossibleValues : new();
            StateHasChanged();
        }

        await Refresh();
    }

    protected async void EventSearcherValue(string value)
    {
        ViewPopupCount = true;

        if (ModeSearcher == "TransactionalItemTypeCharacteristic")
        {

            var transactionalItems = transactionalService.TransactionalItems;
            transactionalItemTypeCharacteristics = new();
            if (transactionalItems != null)
            {
                ConceptType type = transactionalItems.TypeOfConcept != null ? transactionalItems.TypeOfConcept : null;
                if (type != null)
                {
                    var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);
                    var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();
                    if (!value.ToLower().Contains("all") && !value.ToLower().Contains("todo"))
                    {
                        transactionalItemTypeCharacteristics = resul.TransactionalItemTypeCharacteristics.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
                    }
                    else
                    {
                        transactionalItemTypeCharacteristics = resul.TransactionalItemTypeCharacteristics;
                    }
                }
            }


            if (transactionalItemTypeCharacteristics != null)
            {               

                ParamCountResul = transactionalItemTypeCharacteristics.Count();
                ViewPopupCount = ParamCountResul > 0;
            }
            else
            {
                ViewPopupCount = false;
                ParamCountResul = 0;
            }
        }
        await Refresh();
    }


    public void ClosedInput()
    {
        ViewPopupCount = false;
        CharacteristicControlInput = false;
    }

    public void SetViewElemnt(string Element)
    {
        ModeSearcher = Element;
        if (Element == "TransactionalItemTypeCharacteristic") { CharacteristicControlInput = true; }
        Refresh();
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void MsgOpen(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }

   
}
