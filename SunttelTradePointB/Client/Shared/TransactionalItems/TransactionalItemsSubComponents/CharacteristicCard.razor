@page "/CharacteristicCard/{Page}/{transactionalItemId}/{characteristicPairId}"
@page "/CharacteristicCard/{Page}/{transactionalItemId}"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@inject NavigationManager Navigation
@inject ITransactionalItemsService transactionalService;


@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<PageTitleComponent Title="@GetName("TransactionalItemTypeCharacteristics", new TransactionalItemType())" IconName="characteristics.png"
                    Description="@($"Here you can add {GetName("TransactionalItemTypeCharacteristics", new TransactionalItemType())}")">
</PageTitleComponent>

<div id="add-recipe">
    <div class="flex-horizontal-center">
        <div class="grid-columns-2 box-shadow-mode">

            <div>
                <label class="info-text-size">
                    @GetName( "ItemCharacteristics", new TransactionalItem())
                </label>
            </div>
            <div>
                <InputTextSelector3 TItem="TransactionalItemTypeCharacteristic"
                                    Id="ItemCharacteristics"
                                    EventClosed="ClosedInput"
                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                    EventIdSelectionAndId="EventIdSelection"
                                    Items="transactionalItemTypeCharacteristics"
                                    caption="@(transactionalItemTypeCharacteristic != null ? transactionalItemTypeCharacteristic.Name : "")">

                </InputTextSelector3>
            </div>
            <div><label class="info-text-size"> @GetName("Value", new TransactionalItemCharacteristicPair()) </label></div>
            <div>
                <select @bind="transactionalItemCharacteristicPair.Value" class="select-style">

                    <option value="0" selected>Select</option>
                    @foreach (var item in possibleValues)
                    {
                        <option value="@item.Name">@item.Name</option>
                    }
                </select>
            </div>
            <div>
            </div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string transactionalItemId { get; set; }
    [Parameter]
    public string characteristicPairId { get; set; }
    [Parameter]
    public string Page { get; set; }
    [Parameter]
    public string SubPage { get; set; }


    public List<TransactionalItemCharacteristicPair> transactionalItemCharacteristicPairs = new();
    public TransactionalItemCharacteristicPair transactionalItemCharacteristicPair = new();
    List<TransactionalItemTypeCharacteristic> transactionalItemTypeCharacteristics = new();
    TransactionalItemTypeCharacteristic transactionalItemTypeCharacteristic = new();

    public List<TransactionalItemCharacteristic> possibleValues = new();

    bool viewMsg = false;
    string msg = "";
    int status = 0;
    public int ParamCountResul = 0;
    bool ViewPopupCount = false;
    string ModeSearcher = "";


    #region TileName
    public string Title { get; set; }
    public string Value { get; set; }
    #endregion TitleName

    protected async override void OnInitialized()
    {
        transactionalItemCharacteristicPairs = await transactionalService.GetCharacteristic(transactionalItemId);
        if (transactionalItemCharacteristicPairs != null && characteristicPairId!=null)
        {
            transactionalItemCharacteristicPair = transactionalItemCharacteristicPairs.Where(s => s.Id == characteristicPairId).FirstOrDefault();
            if (transactionalItemCharacteristicPair.TransactionalItemCharacteristic!=null) transactionalItemTypeCharacteristic = transactionalItemCharacteristicPair.TransactionalItemCharacteristic;
        }



        var transactionalItems = await transactionalService.GetTransactionalItemById(transactionalItemId);
        transactionalItemTypeCharacteristics = new();
        if (transactionalItems != null)
        {
            ConceptType type = transactionalItems.TypeOfConcept != null ? transactionalItems.TypeOfConcept : null;
            if (type != null)
            {
                var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);
                var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();
                if (resul != null)
                {

                    transactionalItemTypeCharacteristics = resul.TransactionalItemTypeCharacteristics != null ? resul.TransactionalItemTypeCharacteristics : new();
                    var values = transactionalItemTypeCharacteristics.Where(s => s.Id == transactionalItemTypeCharacteristic?.Id).FirstOrDefault();

                    if (values != null) possibleValues = values.PossibleValues;
                }

            }
        }
        StateHasChanged();
    }

    private async void Save()
    {

        var resul = await transactionalService.SaveCharacteristics(transactionalItemId, transactionalItemCharacteristicPair);
        if (resul)
        {
            MsgOpen("Saved", 0);
            StateHasChanged();
        }
        else
        {
            MsgOpen("No saved", 1);
            StateHasChanged();
        }

    }

    public async Task Refresh()
    {
        //ReferInputTextSelector.Refresh();
        StateHasChanged();
    }

    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo($"/TransactionalItemCard/{transactionalItemId}");
    }

    protected async void EventIdSelection(TransactionalItemTypeCharacteristic item)
    {
        transactionalItemTypeCharacteristic = item;

        if (transactionalItemTypeCharacteristics != null)
        {
            var characteristic = transactionalItemTypeCharacteristics.Where(s => s.Id != null && s.Id.Trim() == item.Id).FirstOrDefault();
            if (characteristic != null) possibleValues = characteristic.PossibleValues != null ? characteristic.PossibleValues : new();
            StateHasChanged();
        }
        transactionalItemCharacteristicPair.TransactionalItemCharacteristic = item;

        await Refresh();
    }

    protected async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        ViewPopupCount = true;
        ModeSearcher = arg.IdControl;
        if (ModeSearcher == "ItemCharacteristics")
        {

            var transactionalItem = await transactionalService.GetTransactionalItemById(transactionalItemId);
            transactionalItemTypeCharacteristics = new();
            if (transactionalItem != null)
            {

                if (transactionalItem.TypeOfConcept != null)
                {
                    var itemTypes = await transactionalService.GetTransactionalItemTypes(transactionalItem.TypeOfConcept.Name);
                    var resul = itemTypes.Where(s => s.Id == transactionalItem.TypeOfConcept.Id).FirstOrDefault();
                    if (!arg.value.ToLower().Contains("all") && !arg.value.ToLower().Contains("todo"))
                    {
                        transactionalItemTypeCharacteristics = resul.TransactionalItemTypeCharacteristics.Where(s => s.Name.ToLower().Contains(arg.value.ToLower())).ToList();
                    }
                    else
                    {
                        transactionalItemTypeCharacteristics = resul.TransactionalItemTypeCharacteristics;
                    }
                }
            }


            if (transactionalItemTypeCharacteristics != null)
            {

                ParamCountResul = transactionalItemTypeCharacteristics.Count();
                ViewPopupCount = ParamCountResul > 0;
            }
            else
            {
                ViewPopupCount = false;
                ParamCountResul = 0;
            }
        }
        await Refresh();
    }


    public void ClosedInput()
    {
        ViewPopupCount = false;
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void MsgOpen(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }


}
