@page "/PackingRecipeCard"
@page "/PackingRecipeCard/{Mode}"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation

@*label {
        margin-left: 50px;
    }
*@
@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}
<PageTitleComponent Title="@GetName("ProductPackingSpecs", new TransactionalItem())" IconName="TransactionalTypes.png"
                    Description="@($"Here you can add {@GetName("ProductPackingSpecs", new TransactionalItem())}")">
</PageTitleComponent>
<form>
    <div class="content-new-packing-recipe" style=' display:@(modeEdit?"block":"none"); };'>

        @if (@pageView == "ListOfMaterials")
        {
            <div>
                <div class="flex-horizontal-center">
                    <div class="grid-columns-2 box-shadow-mode">
                        <div>
                            <label>
                                @GetName( "Material", new MaterialRecipeItem())
                            </label>
                        </div>
                        <div style="position:relative;">
                            <div class="item-edit">
                                <label>@(Material != null ? Material.Name : "")</label>
                                <button type="button" @onclick='()=>SetViewElemnt("Material")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                            </div>
                            <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditItemComponent">
                                @{
                                    if (Materials != null)
                                    {
                                        foreach (var Element in Materials)
                                        {
                                            <option value="@Element?.Id">@Element?.Name</option>
                                        }
                                    }
                                }
                            </InputTextSelector>
                        </div>

                        <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                        <div><input type="number" @bind="materialRecipeItem.Quantity" class="form-control" style="border-color:gray;" required /></div>
                        <div></div>
                        <div class="flex-horizontal-end">
                            <button type="button" @onclick='()=>ClosedAdd("ChildrenGroups")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                            <button type="button" @onclick='AddMaterials' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>

                    </div>

                </div>
            </div>
        }

        @if (@pageView == "AssemblyRecipeItems")
        {
            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">
                    <div>
                        <label>
                            @GetName( "ItemComponent", new PackRecipeItem())
                        </label>
                    </div>
                    <div style="position:relative;">
                        <div class="item-edit">
                            <label>@(itemComponent != null ? itemComponent.Name : "")</label>
                            <button type="button" @onclick='()=>SetViewElemnt("Material")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>
                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditItemComponent">
                            @{
                                if (itemComponents != null)
                                {
                                    foreach (var Element in itemComponents)
                                    {
                                        <option value="@Element?.Id">@Element?.Name</option>
                                    }
                                }
                            }
                        </InputTextSelector>
                    </div>
                    <div>
                        <label>
                            @GetName( "RecipeQualityModifier", new PackRecipeItem())
                        </label>
                    </div>
                    <div style="position:relative;">
                        <div class="item-edit">
                            <label>@(recipeQualityModifier != null ? recipeQualityModifier.Name : "")</label>
                            <button type="button" @onclick='()=>SetViewElemnt("RecipeQualityModifier")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>
                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditItemComponent">
                            @{
                                if (recipeQualityModifiers != null)
                                {
                                    foreach (var Element in recipeQualityModifiers)
                                    {
                                        <option value="@Element?.Id">@Element?.Name</option>
                                    }
                                }
                            }
                        </InputTextSelector>
                    </div>
                    <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                    <div><input type="number" @bind="assemblyRecipeItem.Quantity" class="form-control" style="border-color:gray;" required /></div>
                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>ClosedAdd("ItemComponent")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }
    </div>


    <div class="content-new-packing-recipe" style=' display:@(!addMaterials?"block":"none"); };'>

        <div class="container-menu-g">
            <nav>
                <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>
            </nav>
        </div>

        <SfTab @ref="referTag" Height="50px">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("ProductPackingSpecs", new TransactionalItem())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div id="add-recipe">
                            <div class="grid-columns-4">
                                <div><label>@GetName( "Customer", new PackingSpecs())</label></div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(Customer != null ? Customer.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("Customer")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewAddCustomer">
                                            @{
                                                if (ListConcept != null)
                                                {
                                                    foreach (var customer in ListConcept)
                                                    {
                                                        <option value="@customer?.Id">@customer?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                                <div><label>@GetName( "Code", new PackingSpecs())</label></div>
                                <div> <label>@(Customer != null ? Customer.Code : "")</label></div>
                                <div>
                                    <label>
                                        @GetName( "Season", new PackingSpecs())
                                    </label>
                                </div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(Season != null ? Season.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("Season")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditSeason">
                                            @{
                                                if (GetSeasonView != null)
                                                {
                                                    foreach (var season in GetSeasonView)
                                                    {
                                                        <option value="@season?.Id">@season?.Name</option>
                                                    }
                                                }
                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                                <div>
                                    <label>
                                        @GetName("ModelRecipe",new PackingSpecs())
                                    </label>
                                </div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(ModelRecipe != null ? ModelRecipe.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("Model")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditModel">
                                            @{
                                                if (GetModelView != null)
                                                {
                                                    foreach (var model in GetModelView)
                                                    {
                                                        <option value="@model?.Id">@model?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                                <div>
                                    <label>
                                        @GetName( "PackLayersToSale", new PackingSpecs())
                                    </label>
                                </div>
                                <div><input type="number" @bind="_PackingSpecs.PackLayersToSale" class="form-control" style="border-color:gray;" autofocus required /></div>
                                <div><label>@GetName( "PackLayersToBuy",new PackingSpecs())</label></div>
                                <div><input type="number" @bind="_PackingSpecs.PackLayersToBuy" class="form-control" style="border-color:gray;" required /></div>
                                <div>
                                    <label>
                                        @GetName( "PackingBoxToSale", new PackingSpecs())
                                    </label>
                                </div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(BoxToSale != null ? BoxToSale.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("BoxToSale")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditBoxToSale">
                                            @{
                                                if (GetBoxToSaleView != null)
                                                {
                                                    foreach (var Box in GetBoxToSaleView)
                                                    {
                                                        <option value="@Box?.Id">@Box?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>

                                </div>
                                <div><label>@GetName( "PackingBoxToBuy", new PackingSpecs())</label></div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(BoxToBuy != null ? BoxToBuy.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("BoxToBuy")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditBoxToBuy">
                                            @{
                                                if (GetBoxToBuyView != null)
                                                {
                                                    foreach (var Box in GetBoxToBuyView)
                                                    {
                                                        <option value="@Box?.Id">@Box?.Name</option>
                                                    }
                                                }
                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                                <div>
                                    <label>
                                        @GetName( "PackPerBoxLayer", new PackingSpecs())
                                    </label>
                                </div>
                                <div><input type="number" @bind="_PackingSpecs.PackPerBoxLayer" class="form-control" style="border-color:gray;" maxlength="4" min="1" /></div>
                                <div><label> @GetName("UnitPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.UnitPrice" type="number" class="form-control" style="border-color:gray;" /></div>

                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "CustomerLabelInstructions", new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>

                        <div id="add-recipe">
                            @*// Control David LabelStyle PalletLabelStyle (Selector PalletLabelStyles)*@
                            <div class="grid-columns-4">
                                <div>
                                    <label>
                                        @GetName( "PalletLabelStyle", new LabelInstruction())
                                    </label>
                                </div>
                                <div style="position:relative;">
                                    <div class="item-edit">
                                        <label>@(palletLabelStyle != null ? palletLabelStyle.Name : "")</label>
                                        <button type="button" @onclick='()=>SetViewElemnt("PalletLabelStyle")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditPalletLabelStyle">
                                        @{
                                            if (palletLabelStylesView != null)
                                            {
                                                foreach (var Element in palletLabelStylesView)
                                                {
                                                    <option value="@Element?.Id">@Element?.Name</option>
                                                }
                                            }
                                        }
                                    </InputTextSelector>
                                </div>
                                <div>
                                    <label>
                                        @GetName( "BoxLabelStyle", new LabelInstruction())
                                    </label>
                                </div>
                                @*// Control David LabelStyle BoxLabelStyle (Selector BoxLabelStyles)*@
                                <div style="position:relative;">
                                    <div class="item-edit">
                                        <label>@(BoxLabelStyle != null ? BoxLabelStyle.Name : "")</label>
                                        <button type="button" @onclick='()=>SetViewElemnt("BoxLabelStyle")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditBoxLabelStyle">
                                        @{
                                            if (BoxLabelStylesView != null)
                                            {
                                                foreach (var Element in BoxLabelStylesView)
                                                {
                                                    <option value="@Element?.Id">@Element?.Name</option>
                                                }
                                            }
                                        }
                                    </InputTextSelector>
                                </div>
                                @* string UPCName*@
                                <div><label> @GetName("UPCName", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCComments" class="form-control" style="border-color:gray;" required /></div>
                                @*// Control David LabelStyle InnerProductLabelStyleByDeafult (Selector UPCLabelStyles)*@
                                <div>
                                    <label>
                                        @GetName( "InnerProductLabelStyleByDeafult", new LabelInstruction())
                                    </label>
                                </div>
                                @*// Control David LabelStyle BoxLabelStyle (Selector BoxLabelStyles)*@
                                <div style="position:relative;">
                                    <div class="item-edit">
                                        <label>@(InnerProductLabelStyleByDeafult != null ? InnerProductLabelStyleByDeafult.Name : "")</label>
                                        <button type="button" @onclick='()=>SetViewElemnt("InnerProductLabelStyleByDeafult")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditBoxLabelStyle">
                                        @{
                                            if (InnerProductLabelStyleByDeafultsView != null)
                                            {
                                                foreach (var Element in InnerProductLabelStyleByDeafultsView)
                                                {
                                                    <option value="@Element?.Id">@Element?.Name</option>
                                                }
                                            }
                                        }
                                    </InputTextSelector>
                                </div>
                                @*// string UPCComments *@
                                <div><label> @GetName("UPCComments", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCComments" class="form-control" style="border-color:gray;" required /></div>

                                @*// string BoxUPCCode *@
                                <div><label> @GetName("BoxUPCCode", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.BoxUPCCode" class="form-control" style="border-color:gray;" required /></div>
                                @*// string InnerProductUPCCode *@
                                <div><label> @GetName("InnerProductUPCCode", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.InnerProductUPCCode" class="form-control" style="border-color:gray;" required /></div>

                                @*// int UPCDateCodeFormat (Numeric Input)*@
                                <div><label> @GetName("UPCDateCodeFormat", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCDateCodeFormat" type="number" class="form-control" style="border-color:gray;" required /></div>

                                @*// Control David  DatesReferenceType UPCDateCodeBasedOn (Selector DatesReferenceType)*@
                                <div>
                                    <label>
                                        @GetName( "UPCDateCodeBasedOn", new LabelInstruction())
                                    </label>
                                </div>
                                <div style="position:relative;">
                                    <div class="item-edit">
                                        <label>@(uPCDateCodeBasedOn != null ? uPCDateCodeBasedOn.Name : "")</label>
                                        <button type="button" @onclick='()=>SetViewElemnt("UPCDateCodeBasedOn")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditUPCDateCodeBasedOn">
                                        @{
                                            if (UPCDateCodeBasedOnsView != null)
                                            {
                                                foreach (var Element in UPCDateCodeBasedOnsView)
                                                {
                                                    <option value="@Element?.Id">@Element?.Name</option>
                                                }
                                            }
                                        }
                                    </InputTextSelector>
                                </div>
                                @*// int UPCDateCodeDaysAfterReferenceDate*@
                                <div><label> @GetName("UPCDateCodeDaysAfterReferenceDate", new LabelInstruction()) </label></div>
                                <div><input  @bind="labelInstruction.UPCDateCodeFormat" type="number" class="form-control" style="border-color:gray;" required /></div>

                                @*// string OriginCountryLegend *@
                                <div><label> @GetName("OriginCountryLegend", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.OriginCountryLegend" class="form-control" style="border-color:gray;" required /></div>

                                @*// string SKU *@
                                <div><label> @GetName("SKU", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.SKU" class="form-control" style="border-color:gray;" required /></div>

                                @* // Stwitch Boolean ShowRetailPriceUPCInfo *@
                                <div><label> @GetName("ShowRetailPriceUPCInfo", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.ShowRetailPriceUPCInfo" class="form-control" style="border-color:gray;" required /></div>

                            </div>
                        </div>

                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "ListOfMaterials",new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div style="display:flex; flex-direction:column; justify-content:center;">

                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "ListOfMaterials", new PackingSpecs())</h3>
                                <svg @onclick='()=>OpenAdd("ListOfMaterials")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>
                            <SfGrid @ref="DataGrid" DataSource="@ListOfMaterialsView" AllowFiltering="true" AllowTextWrap="false" AllowPaging="true" AllowResizing="true">
                                <GridEvents Destroyed="AddMaterialsOff" TValue="MaterialRecipeItemView"></GridEvents>
                                <GridFilterSettings Type=" Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridColumns>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.Name)" HeaderText="@GetName( "Name",new AtomConcept())" Width="300px"></GridColumn>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.Quantity)" HeaderText="@GetName( "Quantity",new MaterialRecipeItem())" Width="300px"></GridColumn>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.Code)" HeaderText="@GetName( "Code",new AtomConcept())" Width="120px"></GridColumn>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.SkinImageName)" HeaderText="@GetName( "SkinImageName",new Concept())" Width="120px"></GridColumn>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.FullClassName)" HeaderText="@GetName( "FullClassName",new Concept())" Width="120px"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                        @*   <h1>Boton add + Pack Materials</h1>
                        <h1>Grid view con Items de receta Materials</h1>*@
                        @*List<MaterialRecipeItem> ListOfMaterials { get; set; }*@
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("AssemblyRecipeItems", new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div style="display:flex; flex-direction:column; justify-content:center;">

                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "AssemblyRecipeItems", new PackingSpecs())</h3>
                                <svg @onclick='()=>OpenAdd("AssemblyRecipeItems")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                            <div class="content-btn">
                                @* <button type="button" @onclick='()=>AddAssemblyControl(true)' class="size-btn color-btn" style=' display:@(btnAddMaterials?"block":"none");'>+</button>*@
                            </div>
                            <SfGrid @ref="DataGrid1" DataSource="@assemblyRecipeItemsView" AllowFiltering="true" AllowTextWrap="false" AllowPaging="true" AllowResizing="true">
                                <GridFilterSettings Type=" Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridColumns>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Name)" HeaderText="@GetName( "Name",new AtomConcept())" Width="300px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Quantity)" HeaderText="@GetName( "Quantity",new AtomConcept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Code)" HeaderText="@GetName( "Code",new Concept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.FullClassName)" HeaderText="@GetName( "FullClassName",new Concept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.SkinImageName)" HeaderText="@GetName( "SkinImageName",new Concept())" Width="50px"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                        @*  <h1>Boton add + Ir a otra pagina para agregar un Item de Raw Materials</h1>
                        <h1>Grid view con Items de receta</h1>
                        List<PackRecipeItem> AssemblyRecipeItems { get; set; }*@
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>

    </div>


</form>

@code {
    [Parameter]
    public string id { get; set; }
    public RenderFragment render { get; set; }
    [Parameter]
    public EventCallback<PackingSpecs> save { get; set; }
    [Parameter]
    public bool ViewSelect { get; set; } = false;
    [Parameter]
    public string Mode { get; set; } = "Add";
    bool viewMsg = false, modeEdit = false, PopupViewEditItemComponent = false;
    string msg = "";
    string pageView = "";
    SfTab? referTag;
    SfGrid<MaterialRecipeItemView>? DataGrid;
    SfGrid<PackRecipeItemView>? DataGrid1;
    MaterialRecipeItemCard? addControl;
    public TransactionalItem? transactionalItems { get; set; }



    public int Page = 0;
    public string TransactionalItemId { get; set; }

    #region control Input Tex
    public string SearcherValueMode = "";
    public bool PopupViewAddCustomer = false;
    public bool PopupViewEditModel = false;
    public bool PopupViewEditSeason = false;
    public bool PopupViewEditBoxToSale = false;
    public bool PopupViewEditBoxToBuy = false;
    public bool PopupViewEditPalletLabelStyle = false;
    public bool PopupViewEditBoxLabelStyle = false;
    public bool PopupViewEditUPCDateCodeBasedOn { get; set; }
    public string PopupViewEditInnerProductLabelStyleByDeafult { get; set; }


    public int ParamCountResul = 0;
    #endregion Control Input Tex

    #region Tag 1
    public List<Concept>? ListConcept = new List<Concept>();
    public List<ProductModel>? SetModels = new List<ProductModel>();
    public List<ProductModel>? GetModelView = new List<ProductModel>();
    public List<SeasonBusiness>? GetSeasonView = new List<SeasonBusiness>();
    public List<Box>? SetBox = new List<Box>();
    public List<Box>? GetBoxToSaleView = new List<Box>();
    public List<Box>? GetBoxToBuyView = new List<Box>();
    //List<PackRecipeItem> AssemblyRecipeItems = new List<PackRecipeItem>();
    //PackRecipeItem AssemblyRecipeItem = new PackRecipeItem();


    PackingSpecs _PackingSpecs = new PackingSpecs();
    Concept Customer = new Concept();
    SeasonBusiness Season = new SeasonBusiness();
    ProductModel ModelRecipe = new ProductModel();
    Box BoxToSale = new Box();
    Box BoxToBuy = new Box();
    PriceInfo PriceInfo = new PriceInfo();
    #endregion Tag 1

    #region Tag 2
    LabelInstruction labelInstruction = new LabelInstruction();
    List<LabelStyle> palletLabelStylesView = new List<LabelStyle>();
    LabelStyle palletLabelStyle = new LabelStyle();
    List<LabelStyle> BoxLabelStylesView = new List<LabelStyle>();
    LabelStyle BoxLabelStyle = new LabelStyle();
    List<LabelStyle> InnerProductLabelStyleByDeafultsView = new List<LabelStyle>();
    LabelStyle InnerProductLabelStyleByDeafult = new LabelStyle();
    List<LabelStyle> UPCDateCodeBasedOnsView = new List<LabelStyle>();
    LabelStyle uPCDateCodeBasedOn = new LabelStyle();
    #endregion Tag 2

    #region Tag 3

    List<MaterialRecipeItem> ListOfMaterials = new List<MaterialRecipeItem>();
    MaterialRecipeItem materialRecipeItem = new MaterialRecipeItem();
    List<MaterialRecipeItemView> ListOfMaterialsView = new List<MaterialRecipeItemView>();
    List<Concept> Materials = new List<Concept>();
    Concept Material = new Concept();
    #endregion Tag 3

    #region Tag 4
    bool addAssembly = false;
    List<PackRecipeItemView> assemblyRecipeItemsView = new List<PackRecipeItemView>();
    List<PackRecipeItem> assemblyRecipeItems = new List<PackRecipeItem>();
    PackRecipeItem assemblyRecipeItem = new PackRecipeItem();
    List<Concept> itemComponents = new();
    Concept itemComponent = new();
    List<ProductRecipeQualityModifier> recipeQualityModifiers = new();
    ProductRecipeQualityModifier recipeQualityModifier = new();
    #endregion Tag 4


    #region Add Material
    public bool addMaterials = false;
    public bool btnAddMaterials = false;
    #endregion Add Material

    InputTextSelector? ReferInputTextSelector;

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }


    protected override void OnInitialized()
    {
        InitializedAsync();
    }

    protected async void InitializedAsync()
    {
        SetBox = await transactionalService.GetSelectorListEntityBoxToBuy();

        if (transactionalService?.transactionalItemId != null && transactionalService?.transactionalItemId != "")
        {
            TransactionalItemId = transactionalService.transactionalItemId;
            OnInitializedModel();
        }
        if (Mode =="Edit")
        {
            _PackingSpecs = transactionalService.ConceptTransactionalItemPackingSpecs;
            if (_PackingSpecs !=null)
            {             

                Customer = _PackingSpecs.Customer != null ? _PackingSpecs.Customer : new Concept();
                Season = _PackingSpecs.Season != null ? _PackingSpecs.Season : new SeasonBusiness() ;
                ModelRecipe = _PackingSpecs.ModelRecipe != null ? _PackingSpecs.ModelRecipe : new ProductModel();
                PriceInfo = _PackingSpecs.Price != null ? _PackingSpecs.Price : new PriceInfo();
                BoxToBuy = _PackingSpecs.PackingBoxToBuy != null ? _PackingSpecs.PackingBoxToBuy : new Box(); ;
                BoxToSale = _PackingSpecs.PackingBoxToSale != null ? _PackingSpecs.PackingBoxToSale : new Box();
                ListOfMaterials = _PackingSpecs.ListOfMaterials != null ? _PackingSpecs.ListOfMaterials : new List<MaterialRecipeItem>();
                StateHasChanged();
            }
        }
    }

    protected async void OnInitializedModel()
    {
        SetModels = await transactionalService.GetSelectorListEntityProductModel(TransactionalItemId);
    }

    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {

            bool status = false;

            BoxToBuy.Id = Guid.NewGuid().ToString();
            BoxToSale.Id = Guid.NewGuid().ToString();
            _PackingSpecs.Id = Guid.NewGuid().ToString();

            _PackingSpecs.Customer = Customer;
            _PackingSpecs.Season = Season;
            _PackingSpecs.ModelRecipe = ModelRecipe;
            _PackingSpecs.Price = PriceInfo;
            _PackingSpecs.PackingBoxToBuy = BoxToBuy;
            _PackingSpecs.PackingBoxToSale = BoxToSale;
            _PackingSpecs.ListOfMaterials = ListOfMaterials;

            Msg("Saved");


        }
        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }

    private void AddMaterials()
    {
        if (materialRecipeItem != null)
        {
            ListOfMaterials.Add(materialRecipeItem);
            ListOfMaterialsView.Add(new MaterialRecipeItemView
                {
                    Id = materialRecipeItem.Material != null ? materialRecipeItem.Material.Id : "",
                    Name = materialRecipeItem.Material != null ? materialRecipeItem.Material.Name : "",
                    Code = materialRecipeItem.Material != null ? materialRecipeItem.Material.Code : "",
                    FullClassName = materialRecipeItem.Material != null ? materialRecipeItem.Material.FullClassName : "",
                    Quantity = materialRecipeItem.Quantity.ToString(),
                    SkinImageName = materialRecipeItem.Material != null ? materialRecipeItem.Material.SkinImageName : ""
                });
            materialRecipeItem = new();
            DataGrid.Refresh();
            Msg("Added");
        }
    }

    public async Task Refresh()
    {
        if (ReferInputTextSelector != null) await ReferInputTextSelector.Refresh();
        StateHasChanged();
    }


    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo("/TransactionalItemCard/0");
        Reload();
        await Refresh();
        StateHasChanged();
    }

    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        SearcherValueMode = Element;
        Reload();
        if (Element == "Customer") { PopupViewAddCustomer = true; }
        if (Element == "Model") { PopupViewEditModel = true; }
        if (Element == "Season") { PopupViewEditSeason = true; }
        if (Element == "BoxToSale") { PopupViewEditBoxToSale = true; }
        if (Element == "BoxToBuy") { PopupViewEditBoxToBuy = true; }
        if (Element == "PalletLabelStyle") { PopupViewEditPalletLabelStyle = true; }
        if (Element == "BoxLabelStyle") { PopupViewEditBoxLabelStyle = true; }
        if (Element == "InnerProductLabelStyleByDeafult") { PopupViewEditBoxLabelStyle = true; }
        if (Element == "UPCDateCodeBasedOn") { PopupViewEditUPCDateCodeBasedOn = true; }
        if (Element == "Material") { PopupViewEditItemComponent = true; }


        StateHasChanged();
    }

    protected async void EventSearcherValue(string value)
    {

        if (SearcherValueMode == "Customer")
        {
            ListConcept = await transactionalService.GetSelectorListEntityActors(value);
            ParamCountResul = ListConcept != null ? ListConcept.Count() : 0;
        }
        if (SearcherValueMode == "Model")
        {
            if (SetModels == null) SetModels = new();
            GetModelView = SetModels.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            ParamCountResul = GetModelView.Count();
        }
        if (SearcherValueMode == "Season")
        {
            GetSeasonView = await transactionalService.GetSelectorListSeasonBusiness(value);
            ParamCountResul = GetSeasonView != null ? GetSeasonView.Count() : 0;
        }
        if (SearcherValueMode == "BoxToSale")
        {
            GetBoxToSaleView = await transactionalService.GetBoxGetBoxTable(value);
            ParamCountResul = GetBoxToSaleView != null ? GetBoxToSaleView.Count() : 0;
        }
        if (SearcherValueMode == "BoxToBuy")
        {
            if (SetBox == null) SetBox = new();
            GetBoxToBuyView = await transactionalService.GetBoxGetBoxTable(value);
            ParamCountResul = GetBoxToBuyView != null ? GetBoxToBuyView.Count() : 0;
        }
        if (SearcherValueMode == "PalletLabelStyle")
        {
            if (palletLabelStylesView == null) palletLabelStylesView = new();
            palletLabelStylesView = palletLabelStylesView.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            ParamCountResul = palletLabelStylesView != null ? palletLabelStylesView.Count() : 0;
        }
        if (SearcherValueMode == "BoxLabelStyle")
        {
            if (BoxLabelStylesView == null) BoxLabelStylesView = new();
            BoxLabelStylesView = BoxLabelStylesView.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            ParamCountResul = BoxLabelStylesView != null ? BoxLabelStylesView.Count() : 0;
        }
        if (SearcherValueMode == "InnerProductLabelStyleByDeafult")
        {
            if (InnerProductLabelStyleByDeafultsView == null) InnerProductLabelStyleByDeafultsView = new();
            InnerProductLabelStyleByDeafultsView = InnerProductLabelStyleByDeafultsView.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            ParamCountResul = InnerProductLabelStyleByDeafultsView != null ? InnerProductLabelStyleByDeafultsView.Count() : 0;
        }
        if (SearcherValueMode == "UPCDateCodeBasedOn")
        {
            UPCDateCodeBasedOnsView = UPCDateCodeBasedOnsView.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            ParamCountResul = InnerProductLabelStyleByDeafultsView != null ? InnerProductLabelStyleByDeafultsView.Count() : 0;
        }

        if (ParamCountResul > 0) { ViewSelect = true; } else { ViewSelect = false; }

        await Refresh();
    }

    protected async void EventIdSelectionInput(string selectionId)
    {

        if (SearcherValueMode == "Customer")
        {
            Customer = ListConcept.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "Model")
        {
            ModelRecipe = GetModelView.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "Season")
        {
            Season = GetSeasonView.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "BoxToSale")
        {
            BoxToSale = GetBoxToSaleView.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "BoxToBuy")
        {
            BoxToBuy = GetBoxToBuyView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = GetBoxToBuyView.Count();
        }
        if (SearcherValueMode == "PalletLabelStyle")
        {
            palletLabelStyle = palletLabelStylesView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = palletLabelStylesView.Count();
        }
        if (SearcherValueMode == "BoxLabelStyle")
        {
            BoxLabelStyle = BoxLabelStylesView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = BoxLabelStylesView.Count();
        }
        if (SearcherValueMode == "InnerProductLabelStyleByDeafult")
        {
            InnerProductLabelStyleByDeafult = InnerProductLabelStyleByDeafultsView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = InnerProductLabelStyleByDeafultsView.Count();
        }
        if (SearcherValueMode == "UPCDateCodeBasedOn")
        {
            uPCDateCodeBasedOn = UPCDateCodeBasedOnsView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = UPCDateCodeBasedOnsView.Count();
        }


        Reload();
        await Refresh();
    }

    public void Reload()
    {
        PopupViewAddCustomer = false;
        PopupViewEditModel = false;
        PopupViewEditSeason = false;
        PopupViewEditBoxToSale = false;
        PopupViewEditBoxToBuy = false;
        ParamCountResul = 0;
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
    void ConverToMaterialToMateriaView(List<MaterialRecipeItem> Materials)
    {
        ListOfMaterialsView = new List<MaterialRecipeItemView>();
        foreach (var Material in Materials)
        {
            ListOfMaterialsView.Add(new MaterialRecipeItemView
                {
                    Name = Material.Material != null ? Material.Material.Name : "",
                    Quantity = Material.Quantity != null ? Material.Quantity.ToString() : ""
                });
        }
    }




    void AddMaterialsOff()
    {
        btnAddMaterials = true;
        StateHasChanged();

    }



    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }

    public void OpenSubAdd(string value)
    {
        pageView = value;
        viewMsg = false;

    }

    private void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
    }
    private void Msg(string? Msg)
    {
        msg = Msg;
        viewMsg = true;

    }



    class MaterialRecipeItemView
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }

    }

    class PackRecipeItemView
    {
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }
    }

}
