@page "/PackingRecipeCard"
@page "/PackingRecipeCard/{Mode}"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using SunttelTradePointB.Client.Shared.ConceptSelectors
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation


@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<form>
    <div class="content-new-packing-recipe" style=' display:@(!modeEdit?"block":"none"); };'>

        @if (@pageView == "ListOfMaterials")
        {

            <PageTitleComponent Title="@GetName( "Material", new MaterialRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {GetName( "Material", new MaterialRecipeItem()).ToLower()}")">
            </PageTitleComponent>
            <div class="panelMenuContainer">
                <div class="flex-horizontal-start">

                    <div class="nav-link-style">
                        <a target="_blank" href="/Products"><i class="fa-sharp fa-solid fa-circle-plus"></i> Material </a>
                    </div>

                </div>
            </div>
            <div>
                <div class="flex-horizontal-center">
                    <div class="grid-columns-2 box-shadow-mode">
                        <div>
                            <label>
                                @GetName( "Material", new MaterialRecipeItem())
                            </label>
                        </div>
                        <div style="position:relative;">
                            <div class="item-edit">
                                <label>@(MaterialConcept != null ? MaterialConcept.Name : "")</label>
                                <button type="button" @onclick='()=>SetViewElemnt("Material")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                            </div>
                            <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventClosed="ClosedInputText" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditMaterial">
                                @{
                                    if (MaterialsConcept != null)
                                    {
                                        foreach (var Element in MaterialsConcept)
                                        {
                                            <option value="@Element?.Id">@Element?.Name</option>
                                        }
                                    }
                                }
                            </InputTextSelector>
                        </div>

                        <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                        <div><input type="number" @bind="materialRecipeItem.Quantity" class="form-control border-color" required /></div>
                        <div></div>
                        <div class="flex-horizontal-end">
                            <button type="button" @onclick='()=>OpenAdd("Material")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                            <button type="button" @onclick='AddMaterials' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>

                    </div>

                </div>
            </div>
        }

        @if (@pageView == "Material")
        {
            <PageTitleComponent Title="@GetName( "Material", new MaterialRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can create {GetName( "Material", new MaterialRecipeItem()).ToLower()}")">
            </PageTitleComponent>


            <div class="grid-columns-2-img">
                <div class="grid-columns-header">
                    <div>
                        <label for="name">Name</label>
                    </div>
                    <div>
                        <input type="text" class="form-control" id="name" @bind-value="@MateriaoNew.Name" autocomplete="off" />
                    </div>

                    <div id="shortCutCodeGroup">
                        <label for="shortcutCode">Identifier Code</label>
                    </div>
                    <div>
                        <input type="text" class="form-control" @bind="MateriaoNew.Code" autocomplete="off" />
                    </div>
                    <div><label for="shortcutCode">@GetName("Status", new Concept())</label></div>
                    <div @onclick="SetStatus">
                        <label id="statusConcept" class="style-status" style="background-color:@colorStatus;">@(MateriaoNew.Status != null ? MateriaoNew.Status : "")</label>
                    </div>

                    <div class="lineFormGroup">
                        <TransactionalItemGroupSelector @ref="referGroup" Groups="@MateriaoNew.Groups" EventAddGroups="AddGroup"></TransactionalItemGroupSelector>
                    </div>

                </div>
                <div>
                    <label for="shortcutCode">@GetName("SkinImageName", new Concept())</label>
                    <br />
                    <div class="lineFormGroup" style="position:relative;">
                        <div class="form-group">
                            <div style="display:flex; flex-direction:row;">
                                <div class="conten-chip margin-left-control">
                                    <div class="position-input">
                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventClosed="ClosedInputText" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewAddImg">
                                            @{
                                                if (transactItemImages != null)
                                                {
                                                    foreach (var group in transactItemImages)
                                                    {
                                                        <option value="@group?.Id">@group?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                                <div>
                                    @if (transactItemImages == null) transactItemImages = new List<TransactItemImage>();
                                    <img class="style-img" src="@(transactItemImage.PathImage !=null?transactionalService.Host+transactItemImage.PathImage:"/images/defaultImage.png")" @onclick='()=> SetViewElemnt("img")' />
                                </div>


                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div>
                <div class="flex-horizontal-center">
                    <div class="grid-columns-2 box-shadow-mode">

                        <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                        <div><input type="number" @bind="materialRecipeItem.Quantity" class="form-control border-color" required /></div>
                        <div></div>
                        <div class="flex-horizontal-end">
                            <button type="button" @onclick='()=>ClosedAdd("ListOfMaterials")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                            <button type="button" @onclick='AddMaterials' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>

                    </div>

                </div>
            </div>
        }

        @if (@pageView == "AssemblyRecipeItems")
        {
            <PageTitleComponent Title="@GetName("AssemblyRecipeItems", new PackingSpecs())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {GetName("AssemblyRecipeItems", new PackingSpecs())}")">
            </PageTitleComponent>

            <div class="container-menu-g">
                <nav>
                    <button type="button" @onclick='()=>OpenAdd("AssemblyRecipeItems")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                    <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                        <SplitButtonEvents ItemSelected="ItemSelected_1">
                        </SplitButtonEvents>
                        <DropDownMenuItems>
                            <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Add" IconCss="fa-sharp fa-solid fa-circle-plus"></DropDownMenuItem>
                            <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                        </DropDownMenuItems>
                    </SfSplitButton>

                    <div class="nav-link-style">
                        <a target="_blank" href="/Products"><i class="fa-sharp fa-solid fa-circle-plus"></i> Product </a>
                    </div>

                </nav>
            </div>

            <div class="grid-columns-header ">
                <div>
                    <label>
                        @GetName( "ItemComponent", new PackRecipeItem())
                    </label>
                </div>
                <div style="position:relative;">
                    <div class="item-edit">
                        <label>@(itemComponent != null ? itemComponent.Name : "")</label>
                        <button type="button" @onclick='()=>SetViewElemnt("ItemComponent")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                    <div class="position-input">
                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditItemComponent">
                            @{
                                if (itemComponents != null)
                                {
                                    foreach (var Element in itemComponents)
                                    {
                                        <option value="@Element?.Id">@Element?.Name</option>
                                    }
                                }
                            }
                        </InputTextSelector>
                    </div>
                </div>
                <div>
                    <label>
                        @GetName( "RecipeQualityModifier", new PackRecipeItem())
                    </label>
                </div>

                <div style="position:relative;">
                    <div class="item-edit">
                        <label>@(recipeModifier != null ? recipeModifier.Name : "")</label>
                        <button type="button" @onclick='()=>SetViewElemnt("RecipeQualityModifier")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                    <div class="position-input">
                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditItemModifier">
                            @{
                                if (recipeModifiers != null)
                                {
                                    foreach (var Element in recipeModifiers)
                                    {
                                        <option value="@Element?.Id">@Element?.Name</option>
                                    }
                                }
                            }
                        </InputTextSelector>
                    </div>
                </div>

                <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                <div><input type="number" @bind="assemblyRecipeItem.Quantity" class="form-control border-color" required /></div>
            </div>

            <SfTab Height="300px" HeaderPlacement="HeaderPosition.Left">
                <TabAnimationSettings>
                    <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                    <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
                </TabAnimationSettings>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName( "ListOfMaterials", new PackRecipeItem())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="flex-horizontal-center">
                                <div class="detailsTitleContainer">
                                    <h3 class="subTitleDetailForm">@GetName( "ListOfMaterials", new PackRecipeItem())</h3>
                                    <svg @onclick='()=>ClosedAdd("ListOfMaterialsAssembly")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                </div>

                                @if (materialsRecipeItemsAssembly == null) { materialsRecipeItemsAssembly = new List<MaterialRecipeItem>(); }


                                @*<DataGrid TParameter="MaterialRecipeItem"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="materialsRecipeItemsAssembly"
                                      GridColumnsList="gridColumnListListOfMaterials"
                                      Width="100%">
                                </DataGrid>*@
                            </div>

                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName( "ComponentItemRecipe", new PackRecipeItem())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>

                            <div class="flex-horizontal-center">
                                <div class="detailsTitleContainer">
                                    <h3 class="subTitleDetailForm">@GetName( "ComponentItemRecipe", new PackRecipeItem())</h3>
                                    <svg @onclick='()=>ClosedAdd("ComponentItemRecipeChildren")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                </div>

                                @if (materialsRecipeItemsAssembly == null) { materialsRecipeItemsAssembly = new List<MaterialRecipeItem>(); }


                               @* <DataGrid TParameter="MaterialRecipeItem"
                                      EventCallbackMenu="OnContextMenuClick"
                                      parameterList="materialsRecipeItemsAssembly"
                                      GridColumnsList="gridColumnListListOfMaterials"
                                      Width="100%">
                                </DataGrid>*@
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>

        }

        @if (@pageView == "ListOfMaterialsAssembly")
        {
            <PageTitleComponent Title="@GetName( "Material", new MaterialRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {@GetName( "Material", new MaterialRecipeItem())}")">
            </PageTitleComponent>

            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">
                    <div><label>@GetName( "ListOfMaterials", new PackRecipeItem())</label></div>
                    <div>
                        <div style="position:relative;">
                            <div class="item-edit">
                                <label>@(ConceptMaterialAssembly != null ? ConceptMaterialAssembly.Name : "")</label>
                                <button type="button" @onclick='()=>SetViewElemnt("MaterialAssembly")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                            </div>
                            <div class="position-input">
                                <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewMaterialAssembly">
                                    @{
                                        if (ConceptMaterialsAssembly != null)
                                        {
                                            foreach (var customer in ConceptMaterialsAssembly)
                                            {
                                                <option value="@customer?.Id">@customer?.Name</option>
                                            }
                                        }

                                    }
                                </InputTextSelector>
                            </div>
                        </div>
                    </div>
                    <div>
                        <label>
                            @GetName( "Quantity", new MaterialRecipeItem())
                        </label>
                    </div>
                    <div><input type="number" @bind="materialRecipeItem.Quantity" class="form-control border-color" maxlength="4" min="1" /></div>

                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>ClosedAdd("AssemblyRecipeItems")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }

        @if (@pageView == "ComponentItemRecipeAssembly")
        {
            <PageTitleComponent Title="@GetName( "ComponentItemRecipe", new PackRecipeItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {GetName( "ComponentItemRecipe", new MaterialRecipeItem())}")">
            </PageTitleComponent>

            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">

                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>ClosedAdd("AssemblyRecipeItems")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }

        @if (pageView == "ComponentItemRecipeChildren")
        {
            <ComponentItemRecipeChildrenCard @ref="recipeChildren" EventCallbackPage="ClosedAdd"></ComponentItemRecipeChildrenCard>
        }

    </div>

    <div class="content-new-packing-recipe" style=' display:@(modeEdit?"block":"none"); };'>
        <PageTitleComponent Title="@GetName("ProductPackingSpecs", new TransactionalItem())" IconName="TransactionalTypes.png"
                            Description="@($"Here you can add {@GetName("ProductPackingSpecs", new TransactionalItem())}")">
        </PageTitleComponent>

        <div class="container-menu-g">
            <nav>
                <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>

            </nav>
        </div>

        <SfTab @ref="referTag" Height="50px">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("ProductPackingSpecs", new TransactionalItem())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div id="add-recipe">
                            <div class="grid-columns-4">
                                <div><label>@GetName( "Customer", new PackingSpecs())</label></div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(Customer != null ? Customer.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("Customer")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" EventClosed="ClosedInputText" ViewSelect="ViewSelect" ViewControl="PopupViewAddCustomer">
                                            @{
                                                if (ListConcept != null)
                                                {
                                                    foreach (var customer in ListConcept)
                                                    {
                                                        <option value="@customer?.Id">@customer?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>

                                <div><label>@GetName( "Code", new AtomConcept())</label></div>
                                <div> <b><h6>@(Customer != null ? Customer.Code : "")</h6></b></div>
                                <div>
                                    <label>
                                        @GetName( "Season", new PackingSpecs())
                                    </label>
                                </div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(Season != null ? Season.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("Season")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditSeason">
                                            @{
                                                if (GetSeasonView != null)
                                                {
                                                    foreach (var season in GetSeasonView)
                                                    {
                                                        <option value="@season?.Id">@season?.Name</option>
                                                    }
                                                }
                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                                <div>
                                    <label>
                                        @GetName("ModelRecipe",new PackingSpecs())
                                    </label>
                                </div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(ModelRecipe != null ? ModelRecipe.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("Model")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditModel">
                                            @{
                                                if (GetModelView != null)
                                                {
                                                    foreach (var model in GetModelView)
                                                    {
                                                        <option value="@model?.Id">@model?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                                <div>
                                    <label>
                                        @GetName( "PackLayersToSale", new PackingSpecs())
                                    </label>
                                </div>
                                <div><input type="number" @bind="_PackingSpecs.PackLayersToSale" class="form-control border-color" autofocus required /></div>
                                <div><label>@GetName( "PackLayersToBuy",new PackingSpecs())</label></div>
                                <div><input type="number" @bind="_PackingSpecs.PackLayersToBuy" class="form-control border-color" required /></div>
                                <div>
                                    <label>
                                        @GetName( "PackingBoxToSale", new PackingSpecs())
                                    </label>
                                </div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(BoxToSale != null ? BoxToSale.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("BoxToSale")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditBoxToSale">
                                            @{
                                                if (GetBoxToSaleView != null)
                                                {
                                                    foreach (var Box in GetBoxToSaleView)
                                                    {
                                                        <option value="@Box?.Id">@Box?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>

                                </div>
                                <div><label>@GetName( "PackingBoxToBuy", new PackingSpecs())</label></div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(BoxToBuy != null ? BoxToBuy.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("BoxToBuy")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditBoxToBuy">
                                            @{
                                                if (GetBoxToBuyView != null)
                                                {
                                                    foreach (var Box in GetBoxToBuyView)
                                                    {
                                                        <option value="@Box?.Id">@Box?.Name</option>
                                                    }
                                                }
                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>
                                <div>
                                    <label>
                                        @GetName( "PackPerBoxLayer", new PackingSpecs())
                                    </label>
                                </div>
                                <div><input type="number" @bind="_PackingSpecs.PackPerBoxLayer" class="form-control border-color" maxlength="4" min="1" /></div>
                                <div><label> @GetName("UnitPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.UnitPrice" type="number" class="form-control border-color" /></div>
                                <div><label> @GetName("RetailPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.RetailPrice" type="number" class="form-control border-color" /></div>
                                <div><label> @GetName("RetailBulkNumberOfItems", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.RetailBulkNumberOfItems" type="number" class="form-control border-color" /></div>
                                <div><label> @GetName("RetailBulkPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.RetailBulkPrice" type="number" class="form-control border-color" /></div>
                                <div><label> @GetName("TotalPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.TotalPrice" type="number" class="form-control border-color" /></div>

                                <div><label>@GetName( "TotalPriceItemTypeBasedOn", new PriceInfo())</label></div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(totalPriceItemTypeBasedOn != null ? totalPriceItemTypeBasedOn.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("TotalPriceItemTypeBasedOn")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEdittotalPrice">
                                            @{
                                                if (totalPriceItemTypeBasedOns != null)
                                                {
                                                    foreach (var Box in totalPriceItemTypeBasedOns)
                                                    {
                                                        <option value="@Box?.Id">@Box?.Name</option>
                                                    }
                                                }
                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>

                                <div>
                                    <label>
                                        @GetName("ItemAssemblyType",new PackingSpecs())
                                    </label>
                                </div>
                                <div>
                                    <div style="position:relative;">
                                        <div class="item-edit">
                                            <label>@(assemblyType != null ? assemblyType.Name : "")</label>
                                            <button type="button" @onclick='()=>SetViewElemnt("ItemAssemblyType")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                        </div>

                                        <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditAssembly">
                                            @{
                                                if (assemblyTypes != null)
                                                {
                                                    foreach (var model in assemblyTypes)
                                                    {
                                                        <option value="@model?.Id">@model?.Name</option>
                                                    }
                                                }

                                            }
                                        </InputTextSelector>
                                    </div>
                                </div>


                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "CustomerLabelInstructions", new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>

                        <div id="add-recipe">
                            <div class="grid-columns-4">
                                <div>
                                    <label>
                                        @GetName( "PalletLabelStyle", new LabelInstruction())
                                    </label>
                                </div>
                                <div style="position:relative;">
                                    <div class="item-edit">
                                        <label>@(palletLabelStyle != null ? palletLabelStyle.Name : "")</label>
                                        <button type="button" @onclick='()=>SetViewElemnt("PalletLabelStyle")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditPalletLabelStyle">
                                        @{
                                            if (palletLabelStylesView != null)
                                            {
                                                foreach (var Element in palletLabelStylesView)
                                                {
                                                    <option value="@Element?.Id">@Element?.Name</option>
                                                }
                                            }
                                        }
                                    </InputTextSelector>
                                </div>
                                <div>
                                    <label>
                                        @GetName( "BoxLabelStyle", new LabelInstruction())
                                    </label>
                                </div>
                                <div style="position:relative;">
                                    <div class="item-edit">
                                        <label>@(BoxLabelStyle != null ? BoxLabelStyle.Name : "")</label>
                                        <button type="button" @onclick='()=>SetViewElemnt("BoxLabelStyle")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditBoxLabelStyle">
                                        @{
                                            if (BoxLabelStylesView != null)
                                            {
                                                foreach (var Element in BoxLabelStylesView)
                                                {
                                                    <option value="@Element?.Id">@Element?.Name</option>
                                                }
                                            }
                                        }
                                    </InputTextSelector>
                                </div>
                                @* string UPCName*@
                                <div><label> @GetName("UPCName", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCName" class="form-control border-color" required /></div>

                                <div>
                                    <label>
                                        @GetName( "InnerProductLabelStyleByDeafult", new LabelInstruction())
                                    </label>
                                </div>

                                <div style="position:relative;">
                                    <div class="item-edit">
                                        <label>@(InnerProductLabelStyleByDeafult != null ? InnerProductLabelStyleByDeafult.Name : "")</label>
                                        <button type="button" @onclick='()=>SetViewElemnt("InnerProductLabelStyleByDeafult")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" EventClosed="ClosedInputText" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewEditInnerProduct">
                                        @{
                                            if (InnerProductLabelStyleByDeafultsView != null)
                                            {
                                                foreach (var Element in InnerProductLabelStyleByDeafultsView)
                                                {
                                                    <option value="@Element?.Id">@Element?.Name</option>
                                                }
                                            }
                                        }
                                    </InputTextSelector>
                                </div>

                                <div><label> @GetName("UPCComments", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCComments" class="form-control border-color border-color" required /></div>
                                <div><label> @GetName("BoxUPCCode", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.BoxUPCCode" class="form-control border-color" required /></div>
                                <div><label> @GetName("InnerProductUPCCode", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.InnerProductUPCCode" class="form-control border-color" required /></div>
                                <div><label> @GetName("UPCDateCodeFormat", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCDateCodeFormat" type="number" class="form-control border-color" required /></div>
                                <div>
                                    <label>
                                        @GetName( "UPCDateCodeBasedOn", new LabelInstruction())
                                    </label>
                                </div>
                                <div style="position:relative;">
                                    <select class="form-control" @bind="labelInstruction.UPCDateCodeBasedOn" placeholder="Edit value">
                                        <option value="@DatesReferenceType.ProductionDate">@DatesReferenceType.ProductionDate.ToString()</option>
                                        <option value="@DatesReferenceType.BuyDate">@DatesReferenceType.BuyDate.ToString()</option>
                                        <option value="@DatesReferenceType.NotDefined">@DatesReferenceType.NotDefined.ToString()</option>
                                        <option value="@DatesReferenceType.DeliveryDate">@DatesReferenceType.DeliveryDate.ToString()</option>
                                        <option value="@DatesReferenceType.ShipDate">@DatesReferenceType.ShipDate.ToString()</option>
                                    </select>
                                </div>
                                <div><label> @GetName("UPCDateCodeDaysAfterReferenceDate", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCDateCodeFormat" type="number" class="form-control border-color" required /></div>
                                <div><label> @GetName("OriginCountryLegend", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.OriginCountryLegend" class="form-control border-color" required /></div>
                                <div><label> @GetName("SKU", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.SKU" class="form-control border-color" required /></div>
                                <div><label> @GetName("ShowRetailPriceUPCInfo", new LabelInstruction()) </label></div>
                                <div>
                                    <SfSwitch @bind-Checked="@labelInstruction.ShowRetailPriceUPCInfo"></SfSwitch>
                                </div>
                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "ListOfMaterials",new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div style="display:flex; flex-direction:column; justify-content:center;">

                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "ListOfMaterials", new PackingSpecs())</h3>
                                <svg @onclick='()=>ClosedAdd("ListOfMaterials")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>
                            <SfGrid @ref="DataGrid" DataSource="@ListOfMaterialsView" AllowFiltering="true" AllowTextWrap="false" AllowPaging="true" AllowResizing="true"
                                    ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader" } })">
                                <GridEvents Destroyed="AddMaterialsOff" TValue="MaterialRecipeItemView"></GridEvents>
                                <GridFilterSettings Type=" Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridColumns>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.Name)" HeaderText="@GetName( "Name",new AtomConcept())" Width="300px"></GridColumn>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.Quantity)" HeaderText="@GetName( "Quantity",new MaterialRecipeItem())" Width="300px"></GridColumn>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.Code)" HeaderText="@GetName( "Code",new AtomConcept())" Width="120px"></GridColumn>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.SkinImageName)" HeaderText="@GetName( "SkinImageName",new Concept())" Width="120px"></GridColumn>
                                    <GridColumn Field="@nameof(MaterialRecipeItemView.FullClassName)" HeaderText="@GetName( "FullClassName",new Concept())" Width="120px"></GridColumn>
                                </GridColumns>
                                <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="MaterialRecipeItemView"></GridEvents>
                            </SfGrid>
                        </div>

                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("AssemblyRecipeItems", new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div style="display:flex; flex-direction:column; justify-content:center;">

                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "AssemblyRecipeItems", new PackingSpecs())</h3>
                                <svg @onclick='()=>ClosedAdd("AssemblyRecipeItems")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                            <div class="content-btn">
                                @* <button type="button" @onclick='()=>AddAssemblyControl(true)' class="size-btn color-btn" style=' display:@(btnAddMaterials?"block":"none");'>+</button>*@
                            </div>
                            <SfGrid @ref="DataGrid1" DataSource="@assemblyRecipeItemsView" AllowFiltering="true" AllowTextWrap="false" AllowPaging="true" AllowResizing="true">
                                <GridFilterSettings Type=" Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                <GridColumns>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Name)" HeaderText="@GetName( "Name",new AtomConcept())" Width="300px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Quantity)" HeaderText="@GetName( "Quantity",new AtomConcept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.Code)" HeaderText="@GetName( "Code",new Concept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.FullClassName)" HeaderText="@GetName( "FullClassName",new Concept())" Width="50px"></GridColumn>
                                    <GridColumn Field="@nameof(PackRecipeItemView.SkinImageName)" HeaderText="@GetName( "SkinImageName",new Concept())" Width="50px"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>

                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    </div>


</form>

@code {
    [Parameter]
    public string id { get; set; }
    public RenderFragment render { get; set; }
    [Parameter]
    public EventCallback<PackingSpecs> save { get; set; }
    [Parameter]
    public bool ViewSelect { get; set; } = false;
    [Parameter]
    public string Mode { get; set; } = "Add";
    bool viewMsg = false, modeEdit = true, PopupViewEditItemComponent = false;
    string msg = "";
    string pageView = "";
    SfTab? referTag;
    TransactionalItemGroupSelector? referGroup;
    SfGrid<MaterialRecipeItemView>? DataGrid;
    SfGrid<PackRecipeItemView>? DataGrid1;
    ComponentItemRecipeChildrenCard? recipeChildren;
    MaterialRecipeItemCard? addControl;
    public TransactionalItem? transactionalItems { get; set; }



    List<GridColumn> gridColumnListListOfMaterials = new();

    public int Page = 0;
    public string transactionalItemId { get; set; }

    #region control Input Tex
    public string SearcherValueMode = "";
    public bool PopupViewAddCustomer = false;
    public bool PopupViewEditModel = false;
    public bool PopupViewEditSeason = false;
    public bool PopupViewEditBoxToSale = false;
    public bool PopupViewEditBoxToBuy = false;
    public bool PopupViewEditPalletLabelStyle = false;
    public bool PopupViewEdittotalPrice = false;
    public bool PopupViewEditBoxLabelStyle = false;
    public bool PopupViewEditUPCDateCodeBasedOn { get; set; }
    public string PopupViewEditInnerProductLabelStyleByDeafult { get; set; }
    public bool PopupViewEditAssembly = false;
    public bool PopupViewMaterialAssembly = false;
    public bool PopupViewEditItemModifier = false;
    public bool PopupViewAddImg = false;
    public bool PopupViewEditInnerProduct = false;
    bool PopupViewEditMaterial = false;



    public int ParamCountResul = 0;
    #endregion Control Input Tex

    #region Tag 1
    public List<Concept>? ListConcept = new List<Concept>();
    public List<ProductModel>? SetModels = new List<ProductModel>();
    public List<ProductModel>? GetModelView = new List<ProductModel>();
    public List<SeasonBusiness>? GetSeasonView = new List<SeasonBusiness>();
    public List<Box>? SetBox = new List<Box>();
    public List<Box>? GetBoxToSaleView = new List<Box>();
    public List<Box>? GetBoxToBuyView = new List<Box>();

    public AssemblyType assemblyType = new();
    public List<AssemblyType> assemblyTypes = new();

    List<TransactionalItemType> totalPriceItemTypeBasedOns = new();
    TransactionalItemType totalPriceItemTypeBasedOn = new();


    PackingSpecs _PackingSpecs = new PackingSpecs();
    Concept Customer = new Concept();
    SeasonBusiness Season = new SeasonBusiness();
    ProductModel ModelRecipe = new ProductModel();
    Box BoxToSale = new Box();
    Box BoxToBuy = new Box();
    PriceInfo PriceInfo = new PriceInfo();
    #endregion Tag 1

    #region Tag 2
    LabelInstruction labelInstruction = new LabelInstruction();
    List<LabelStyle> palletLabelStylesView = new List<LabelStyle>();
    LabelStyle palletLabelStyle = new LabelStyle();
    List<LabelStyle> BoxLabelStylesView = new List<LabelStyle>();
    LabelStyle BoxLabelStyle = new LabelStyle();
    List<LabelStyle> InnerProductLabelStyleByDeafultsView = new List<LabelStyle>();
    LabelStyle InnerProductLabelStyleByDeafult = new LabelStyle();
    List<LabelStyle> UPCDateCodeBasedOnsView = new List<LabelStyle>();
    LabelStyle uPCDateCodeBasedOn = new LabelStyle();
    #endregion Tag 2

    #region Tag 3

    List<MaterialRecipeItem> listOfMaterials = new List<MaterialRecipeItem>();
    MaterialRecipeItem materialRecipeItem = new MaterialRecipeItem();
    List<MaterialRecipeItemView> ListOfMaterialsView = new List<MaterialRecipeItemView>();
    List<Concept> MaterialsConcept = new List<Concept>();
    Concept MaterialConcept = new Concept();
    Concept MateriaoNew = new();
    string colorStatus = "";
    bool modeStatus = false;
    TransactItemImage transactItemImage = new();
    List<TransactItemImage> transactItemImages = new();
    #endregion Tag 3

    #region Tag 4
    bool addAssembly = false;
    List<PackRecipeItemView> assemblyRecipeItemsView = new List<PackRecipeItemView>();
    List<PackRecipeItem> assemblyRecipeItems = new List<PackRecipeItem>();
    PackRecipeItem assemblyRecipeItem = new PackRecipeItem();
    List<Concept> itemComponents = new();
    Concept itemComponent = new();
    List<RecipeModifier> recipeModifiers = new();
    RecipeModifier recipeModifier = new();
    List<ProductRecipeQualityModifier> recipeQualityModifiers = new();
    ProductRecipeQualityModifier recipeQualityModifier = new();
    List<MaterialRecipeItem> materialsRecipeItemsAssembly = new();
    MaterialRecipeItem materialRecipeItemsAssembly = new();
    List<Concept> ConceptMaterialsAssembly = new();
    Concept ConceptMaterialAssembly = new();
    #endregion Tag 4

    #region Add Material
    public bool addMaterials = false;
    public bool btnAddMaterials = false;
    #endregion Add Material

    InputTextSelector? ReferInputTextSelector;

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }


    protected override void OnInitialized()
    {
        InitializedAsync();

        gridColumnListListOfMaterials = new List<GridColumn>()
        {
             new GridColumn() { Field=nameof(MaterialRecipeItem.Material.Name) ,  HeaderText = @GetName( "Name", new AtomConcept())  },
              new GridColumn() { Field=nameof(MaterialRecipeItem.Quantity) ,  HeaderText = @GetName( "Quantity", new AtomConcept())  }

        };

    }

    protected async void InitializedAsync()
    {
        SetBox = await transactionalService.GetSelectorListEntityBoxToBuy();

        if (transactionalService?.transactionalItemId != null && transactionalService?.transactionalItemId != "")
        {
            transactionalItemId = transactionalService.transactionalItemId;

        }
        if (Mode == "Edit")
        {
            _PackingSpecs = transactionalService.ConceptTransactionalItemPackingSpecs;
            if (_PackingSpecs != null)
            {
                #region Tag1
                Customer = _PackingSpecs.Customer != null ? _PackingSpecs.Customer : new Concept();
                Season = _PackingSpecs.Season != null ? _PackingSpecs.Season : new SeasonBusiness();
                ModelRecipe = _PackingSpecs.ModelRecipe != null ? _PackingSpecs.ModelRecipe : new ProductModel();
                PriceInfo = _PackingSpecs.Price != null ? _PackingSpecs.Price : new PriceInfo();
                BoxToBuy = _PackingSpecs.PackingBoxToBuy != null ? _PackingSpecs.PackingBoxToBuy : new Box(); ;
                BoxToSale = _PackingSpecs.PackingBoxToSale != null ? _PackingSpecs.PackingBoxToSale : new Box();
                listOfMaterials = _PackingSpecs.ListOfMaterials != null ? _PackingSpecs.ListOfMaterials : new List<MaterialRecipeItem>();
                labelInstruction = _PackingSpecs.CustomerLabelInstructions != null ? _PackingSpecs.CustomerLabelInstructions : new LabelInstruction();
                assemblyRecipeItems = _PackingSpecs.AssemblyRecipeItems != null ? _PackingSpecs.AssemblyRecipeItems : new();
                assemblyType = _PackingSpecs.ItemAssemblyType != null ? _PackingSpecs.ItemAssemblyType : new();
                if (_PackingSpecs.Price != null)
                {
                    totalPriceItemTypeBasedOn = _PackingSpecs.Price.TotalPriceItemTypeBasedOn != null ? _PackingSpecs.Price.TotalPriceItemTypeBasedOn : new();
                }

                SetMaterialToView();
                #endregion Tag1

                #region Tag 2
                if (_PackingSpecs.CustomerLabelInstructions != null)
                {
                    labelInstruction = _PackingSpecs.CustomerLabelInstructions;
                    palletLabelStyle = labelInstruction.PalletLabelStyle != null ? labelInstruction.PalletLabelStyle : new();
                    BoxLabelStyle = labelInstruction.BoxLabelStyle != null ? labelInstruction.BoxLabelStyle : new();
                    InnerProductLabelStyleByDeafult = labelInstruction.InnerProductLabelStyleByDeafult != null ? labelInstruction.InnerProductLabelStyleByDeafult : new();
                }


                #endregion Tag 2

                StateHasChanged();
            }
        }
    }



    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {

            bool status = false;
            #region Tag 1
            _PackingSpecs.Customer = Customer != null ? Customer : new();
            _PackingSpecs.Season = Season != null ? Season : new();
            _PackingSpecs.ModelRecipe = ModelRecipe != null ? ModelRecipe : new();
            _PackingSpecs.Price = PriceInfo != null ? PriceInfo : new();
            _PackingSpecs.Price.TotalPriceItemTypeBasedOn = totalPriceItemTypeBasedOn;
            _PackingSpecs.PackingBoxToBuy = BoxToBuy != null ? BoxToBuy : new();
            _PackingSpecs.PackingBoxToSale = BoxToSale != null ? BoxToSale : new();
            _PackingSpecs.ListOfMaterials = listOfMaterials != null ? listOfMaterials : new();
            _PackingSpecs.CustomerLabelInstructions = labelInstruction;
            assemblyRecipeItem.ItemComponent = itemComponent != null ? itemComponent : new();
            if (assemblyRecipeItem.ComponentItemRecipe == null) assemblyRecipeItem.ComponentItemRecipe = new();
            if (recipeChildren != null && recipeChildren.assemblyRecipeItemGeneral != null) assemblyRecipeItem.ComponentItemRecipe.Add(recipeChildren.assemblyRecipeItemGeneral);
            materialRecipeItemsAssembly.Material = ConceptMaterialAssembly != null ? ConceptMaterialAssembly : new();
            assemblyRecipeItem.ListOfMaterials = materialsRecipeItemsAssembly != null ? materialsRecipeItemsAssembly : new();
            assemblyRecipeItem.RecipeQualityModifier = recipeQualityModifier != null ? recipeQualityModifier : new();
            assemblyRecipeItems.Add(assemblyRecipeItem);
            _PackingSpecs.AssemblyRecipeItems = assemblyRecipeItems != null ? assemblyRecipeItems : new();
            _PackingSpecs.ItemAssemblyType = assemblyType != null ? assemblyType : new();


            #endregion Tag 1

            #region Tag 2
            _PackingSpecs.CustomerLabelInstructions = labelInstruction != null ? labelInstruction : new();
            _PackingSpecs.CustomerLabelInstructions.PalletLabelStyle = palletLabelStyle != null ? palletLabelStyle : new();
            _PackingSpecs.CustomerLabelInstructions.BoxLabelStyle = BoxLabelStyle != null ? BoxLabelStyle : new();
            _PackingSpecs.CustomerLabelInstructions.InnerProductLabelStyleByDeafult = InnerProductLabelStyleByDeafult != null ? InnerProductLabelStyleByDeafult : new();
            #endregion Tag 2

            #region Tag 3


            #endregion Tag 3




            var resul = await transactionalService.SaveProductPackingSpec(transactionalItemId, _PackingSpecs);

            if (transactionalService.TransactionalItems != null && resul)
            {
                if (transactionalService.TransactionalItems.ProductPackingSpecs == null) transactionalService.TransactionalItems.ProductPackingSpecs = new List<PackingSpecs>();
                if (_PackingSpecs.Id == null)
                {
                    transactionalService.TransactionalItems.ProductPackingSpecs.Add(_PackingSpecs);
                }
                else
                {
                    var Remove = transactionalService.TransactionalItems.ProductPackingSpecs.Where(s => s.Id == _PackingSpecs.Id).FirstOrDefault();
                    if (Remove != null)
                    {
                        transactionalService.TransactionalItems.ProductPackingSpecs.Remove(Remove);
                        transactionalService.TransactionalItems.ProductPackingSpecs.Add(_PackingSpecs);
                    }
                }

            }

            Msg("Saved");


        }
        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }

    public async void ItemSelected_1(MenuEventArgs e)
    {

        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {
            Msg("Addded");

        }
        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }

    public async void ItemSelectedConcept(MenuEventArgs e)
    {

        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Material")
        {

        }

        if (tile == "Product")
        {
            Navigation.NavigateTo("target='_blank', /Products");
        }

        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }

    private void AddMaterials()
    {
        if (materialRecipeItem != null)
        {
            if (materialRecipeItem.Material.Id ==null)
            {
                materialRecipeItem.Material = MaterialConcept;
                listOfMaterials.Add(materialRecipeItem);
                ListOfMaterialsView.Add(new MaterialRecipeItemView
                    {
                        Id = materialRecipeItem.Material != null ? materialRecipeItem.Material.Id : "",
                        Name = materialRecipeItem.Material != null ? materialRecipeItem.Material.Name : "",
                        Code = materialRecipeItem.Material != null ? materialRecipeItem.Material.Code : "",
                        FullClassName = materialRecipeItem.Material != null ? materialRecipeItem.Material.FullClassName : "",
                        Quantity = materialRecipeItem.Quantity.ToString(),
                        SkinImageName = materialRecipeItem.Material != null ? materialRecipeItem.Material.SkinImageName : ""
                    });
                materialRecipeItem = new();
                MaterialConcept = new();
                DataGrid.Refresh();
                Msg("Added");
            }
            else
            {
                Msg("Update");
            }

        }
    }



    public async Task Refresh()
    {
        if (ReferInputTextSelector != null) await ReferInputTextSelector.Refresh();
        StateHasChanged();
    }

    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo("/TransactionalItemCard/0/Edit");
        Reload();
        await Refresh();
        StateHasChanged();
    }

    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        SearcherValueMode = Element;
        Reload();
        if (Element == "Customer") { PopupViewAddCustomer = true; }
        if (Element == "Model") { PopupViewEditModel = true; }
        if (Element == "Season") { PopupViewEditSeason = true; }
        if (Element == "BoxToSale") { PopupViewEditBoxToSale = true; }
        if (Element == "BoxToBuy") { PopupViewEditBoxToBuy = true; }
        if (Element == "PalletLabelStyle") { PopupViewEditPalletLabelStyle = true; }
        if (Element == "BoxLabelStyle") { PopupViewEditBoxLabelStyle = true; }
        if (Element == "InnerProductLabelStyleByDeafult") { }
        if (Element == "UPCDateCodeBasedOn") { PopupViewEditUPCDateCodeBasedOn = true; }
        if (Element == "Material") { PopupViewEditMaterial = true; }
        if (Element == "ItemAssemblyType") { PopupViewEditAssembly = true; }
        if (Element == "MaterialAssembly") { PopupViewMaterialAssembly = true; }
        if (Element == "RecipeQualityModifier") { PopupViewEditItemModifier = true; }
        if (Element == "TotalPriceItemTypeBasedOn") { PopupViewEdittotalPrice = true; }
        if (Element == "PalletLabelStyle") { PopupViewEditPalletLabelStyle = true; }
        if (Element == "InnerProductLabelStyleByDeafult") { PopupViewEditInnerProduct = true; }
        if (Element == "ItemComponent") { PopupViewEditItemComponent = true; }


        StateHasChanged();
    }

    protected async void EventSearcherValue(string value)
    {

        if (SearcherValueMode == "Customer")
        {
            ListConcept = await transactionalService.GetSelectorListEntityActors(value, "MassMarket");
            ParamCountResul = ListConcept != null ? ListConcept.Count() : 0;
        }
        if (SearcherValueMode == "Model")
        {
            if (SetModels == null) SetModels = new();
            SetModels = await transactionalService.GetSelectorListEntityProductModel(transactionalItemId);
            GetModelView = SetModels;
            if (!value.ToLower().Contains("all") && !value.ToLower().Contains("todo")) GetModelView = SetModels.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            ParamCountResul = GetModelView.Count();
        }
        if (SearcherValueMode == "Season")
        {
            GetSeasonView = await transactionalService.GetSelectorListSeasonBusiness(value);
            ParamCountResul = GetSeasonView != null ? GetSeasonView.Count() : 0;
        }
        if (SearcherValueMode == "BoxToSale")
        {
            GetBoxToSaleView = await transactionalService.GetSelectorListBoxes(value);
            ParamCountResul = GetBoxToSaleView != null ? GetBoxToSaleView.Count() : 0;
        }
        if (SearcherValueMode == "BoxToBuy")
        {
            if (SetBox == null) SetBox = new();
            GetBoxToBuyView = await transactionalService.GetBoxTable(value);
            ParamCountResul = GetBoxToBuyView != null ? GetBoxToBuyView.Count() : 0;
        }
        if (SearcherValueMode == "UPCDateCodeBasedOn")
        {
            UPCDateCodeBasedOnsView = UPCDateCodeBasedOnsView.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
            ParamCountResul = InnerProductLabelStyleByDeafultsView != null ? InnerProductLabelStyleByDeafultsView.Count() : 0;
        }
        if (SearcherValueMode == "ItemAssemblyType")
        {
            if (assemblyTypes == null) assemblyTypes = new();
            assemblyTypes = await transactionalService.GetSelectorListAssemblyTypes(value);
            ParamCountResul = assemblyTypes != null ? assemblyTypes.Count() : 0;
        }
        if (SearcherValueMode == "MaterialAssembly")
        {
            if (ConceptMaterialsAssembly == null) ConceptMaterialsAssembly = new();
            ConceptMaterialsAssembly = await transactionalService.GetSelectorListPackingMaterials(value);
            ParamCountResul = assemblyTypes != null ? ConceptMaterialsAssembly.Count() : 0;
        }
        if (SearcherValueMode == "RecipeQualityModifier")
        {

            var transactionalItems = transactionalService.TransactionalItems;
            recipeQualityModifiers = new();
            if (transactionalItems != null)
            {
                ConceptType type = transactionalItems.TypeOfConcept != null ? transactionalItems.TypeOfConcept : null;
                if (type != null)
                {
                    var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);
                    var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();
                    if (!value.ToLower().Contains("all") && !value.ToLower().Contains("todo"))
                    {
                        recipeModifiers = resul.InRecipeModifiers.Where(s => s.Name.ToLower().Contains(value.ToLower())).ToList();
                    }
                    else
                    {
                        recipeModifiers = resul.InRecipeModifiers;
                    }
                    ParamCountResul = recipeModifiers.Count();
                }
            }


        }
        if (SearcherValueMode == "TotalPriceItemTypeBasedOn")
        {
            if (totalPriceItemTypeBasedOns == null) totalPriceItemTypeBasedOns = new();
            totalPriceItemTypeBasedOns = await transactionalService.GetTransactionalItemTypes(value);
            ParamCountResul = totalPriceItemTypeBasedOns != null ? totalPriceItemTypeBasedOns.Count() : 0;
        }
        if (SearcherValueMode == "PalletLabelStyle")
        {
            palletLabelStylesView = await transactionalService.GetLabelStyles(value);
            ParamCountResul = palletLabelStylesView.Count();
        }
        if (SearcherValueMode == "BoxLabelStyle")
        {
            BoxLabelStylesView = await transactionalService.GetLabelStyles(value);
            ParamCountResul = BoxLabelStylesView.Count();
        }
        if (SearcherValueMode == "InnerProductLabelStyleByDeafult")
        {
            InnerProductLabelStyleByDeafultsView = await transactionalService.GetLabelStyles(value);
            ParamCountResul = InnerProductLabelStyleByDeafultsView.Count();
        }
        if (SearcherValueMode == "Material")
        {
            MaterialsConcept = await transactionalService.GetSelectorListPackingMaterials(value);
            ParamCountResul = MaterialsConcept.Count();
        }
        if (SearcherValueMode == "ItemComponent")
        {
            itemComponents = await transactionalService.GetConceptProduct(value);
            ParamCountResul = itemComponents.Count();
        }

        if (ParamCountResul > 0) { ViewSelect = true; } else { ViewSelect = false; }

        await Refresh();
    }

    protected async void EventIdSelectionInput(string selectionId)
    {

        if (SearcherValueMode == "Customer")
        {
            Customer = ListConcept.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "Model")
        {
            ModelRecipe = GetModelView.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "Season")
        {
            Season = GetSeasonView.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "BoxToSale")
        {
            BoxToSale = await transactionalService.GetBox(selectionId);
            if (BoxToSale == null) BoxToSale = new();

        }
        if (SearcherValueMode == "BoxToBuy")
        {
            BoxToBuy = await transactionalService.GetBox(selectionId);
            if (BoxToSale == null) BoxToSale = new();

        }
        if (SearcherValueMode == "PalletLabelStyle")
        {
            palletLabelStyle = palletLabelStylesView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = palletLabelStylesView.Count();
        }
        if (SearcherValueMode == "BoxLabelStyle")
        {
            BoxLabelStyle = BoxLabelStylesView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = BoxLabelStylesView.Count();
        }
        if (SearcherValueMode == "InnerProductLabelStyleByDeafult")
        {
            InnerProductLabelStyleByDeafult = InnerProductLabelStyleByDeafultsView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = InnerProductLabelStyleByDeafultsView.Count();
        }
        if (SearcherValueMode == "UPCDateCodeBasedOn")
        {
            uPCDateCodeBasedOn = UPCDateCodeBasedOnsView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = UPCDateCodeBasedOnsView.Count();
        }
        if (SearcherValueMode == "ItemAssemblyType")
        {
            if (assemblyTypes == null) assemblyTypes = new();
            assemblyType = assemblyTypes.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = assemblyTypes.Count();
        }
        if (SearcherValueMode == "MaterialAssembly")
        {
            if (ConceptMaterialsAssembly == null) ConceptMaterialsAssembly = new();
            ConceptMaterialAssembly = ConceptMaterialsAssembly.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = assemblyTypes.Count();
        }
        if (SearcherValueMode == "RecipeQualityModifier")
        {
            if (recipeModifiers != null)
            {
                recipeModifier = recipeModifiers.Where(s => s.Id != null && s.Id.Trim() == selectionId.Trim()).FirstOrDefault();

                StateHasChanged();
            }
        }
        if (SearcherValueMode == "TotalPriceItemTypeBasedOn")
        {
            if (totalPriceItemTypeBasedOns == null) totalPriceItemTypeBasedOns = new();
            totalPriceItemTypeBasedOn = totalPriceItemTypeBasedOns.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        if (SearcherValueMode == "InnerProductLabelStyleByDeafult")
        {
            if (InnerProductLabelStyleByDeafultsView == null) InnerProductLabelStyleByDeafultsView = new();
            InnerProductLabelStyleByDeafult = InnerProductLabelStyleByDeafultsView.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = InnerProductLabelStyleByDeafultsView.Count();
        }
        if (SearcherValueMode == "Material")
        {
            MaterialConcept = MaterialsConcept.Where(c => c.Id == selectionId).FirstOrDefault();
            ParamCountResul = MaterialsConcept.Count();
        }
        if (SearcherValueMode == "ItemComponent")
        {
            itemComponent = itemComponents.Where(s => s.Id != null && s.Id.Trim() == selectionId.Trim()).FirstOrDefault();
            ParamCountResul = itemComponents.Count();
        }

        Reload();
        await Refresh();
    }

    public async void OnContextMenuClick(ContextMenuClickEventArgs<MaterialRecipeItemView> args)
    {
        MaterialRecipeItemView ObjModel = null;
        ObjModel = args.RowInfo.RowData;

        materialRecipeItem = listOfMaterials.Where(s => s.Material.Id == ObjModel.Id).FirstOrDefault();
        if (args.Item.Id == "Edit" && materialRecipeItem != null)
        {
            ClosedAdd("ListOfMaterials");
        }
    }





    public void AddGroup(List<ConceptGroup> conceptGroups)
    {
        if (MaterialConcept.Groups == null) MaterialConcept.Groups = new();
        MaterialConcept.Groups = conceptGroups;
        StateHasChanged();
        //OpenAlert("Added", 0);
    }


    public void Reload()
    {
        PopupViewAddCustomer = false;
        PopupViewEditModel = false;
        PopupViewEditSeason = false;
        PopupViewEditBoxToSale = false;
        PopupViewEditBoxToBuy = false;
        PopupViewEditAssembly = false;
        PopupViewMaterialAssembly = false;
        PopupViewEdittotalPrice = false;
        PopupViewEditInnerProduct = false;
        PopupViewEditPalletLabelStyle = false;
        PopupViewEditBoxLabelStyle = false;
        PopupViewEditItemComponent = false;
        PopupViewEditMaterial = false;
        PopupViewEditItemModifier = false;
        PopupViewMaterialAssembly = false;
        ViewSelect = false;
        ParamCountResul = 0;
    }



    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
    void ConverToMaterialToMateriaView(List<MaterialRecipeItem> Materials)
    {
        ListOfMaterialsView = new List<MaterialRecipeItemView>();
        foreach (var Material in Materials)
        {
            ListOfMaterialsView.Add(new MaterialRecipeItemView
                {
                    Name = Material.Material != null ? Material.Material.Name : "",
                    Quantity = Material.Quantity != null ? Material.Quantity.ToString() : ""
                });
        }
    }




    void AddMaterialsOff()
    {
        btnAddMaterials = true;
        StateHasChanged();

    }



    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }

    public void OpenSubAdd(string value)
    {
        pageView = value;
        viewMsg = false;

    }

    private void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
    }
    private void Msg(string? Msg)
    {
        msg = Msg;
        viewMsg = true;

    }

    public void ClosedInputText()
    {
        PopupViewAddImg = false;
        ViewSelect = false;
        Reload();
        StateHasChanged();
    }

    public void SetMaterialToView()
    {
        ListOfMaterialsView = new();
        foreach (var item in listOfMaterials)
        {
            ListOfMaterialsView.Add(
       new MaterialRecipeItemView
           {
               Id = item.Material.Id,
               Name = item.Material.Name,
               FullClassName = item.Material.FullClassName,
               Code = item.Material.Code,
               Quantity = item.Quantity.ToString()
           }
       );
        }

    }

    public void SetStatus()
    {
        modeStatus = modeStatus ? false : true;

        ConceptStatus statust = new();
        if (modeStatus)
        {
            MateriaoNew.Status = statust = new ConceptStatus
                {
                    Id = "000000000000000000000001",
                    LegacyId = "1",
                    Code = "name",
                    Name = "ACTIVE",
                    IsEnabledForTransactions = true
                };
            colorStatus = "#008080";
        }
        else
        {
            MateriaoNew.Status = statust = new ConceptStatus
                {
                    Id = "",
                    LegacyId = "",
                    Code = "",
                    Name = "....",
                    IsEnabledForTransactions = false
                };
            colorStatus = "gary";
        }

    }

    public class MaterialRecipeItemView
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }

    }

    public class PackRecipeItemView
    {
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }
    }

}
