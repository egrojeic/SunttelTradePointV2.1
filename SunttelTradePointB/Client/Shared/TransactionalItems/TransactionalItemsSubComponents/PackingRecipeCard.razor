@page "/PackingRecipeCard/{transactionalItemId}"
@page "/PackingRecipeCard/{transactionalItemId}/{packingSpecsId}"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using SunttelTradePointB.Client.Shared.ConceptSelectors
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation
@inject ContextMenuService ContextMenuService


@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<form>
    <div class="content-new-packing-recipe" style=' display:@(!modeEdit?"block":"none"); };'>

        @if (@pageView == "ListOfMaterials")
        {
            <PageTitleComponent Title="@GetName( "Material", new MaterialRecipeItem())" IconName="material.png"
                            Description="@($"Here you can add {GetName( "Material", new MaterialRecipeItem()).ToLower()}")">
            </PageTitleComponent>
            <div class="panelMenuContainer">
                <div class="flex-horizontal-start">
                    <div class="nav-link-style">
                        <a target="_blank" href="/Products"><i class="fa-sharp fa-solid fa-circle-plus"></i> Material </a>
                    </div>

                </div>
            </div>
            <div>
                <div class="flex-horizontal-center">
                    <div class="grid-columns-2 box-shadow-mode">
                        <div>
                            <label>
                                @GetName( "Material", new MaterialRecipeItem())
                            </label>
                        </div>

                        <InputTextSelector3 TItem="Concept"
                                        Id="Material"
                                        caption="@(MaterialConcept != null ? MaterialConcept.Name : "")"
                                        EventSearcherValueAndId="EventSearcherValueAndId"
                                        EventIdSelectionAndId="SelectionMade"
                                        EventClosed="ClosedInputText"
                                        Items="MaterialsConcept">

                        </InputTextSelector3>
                        <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                        <div><input type="number" @bind="materialRecipeItem.Quantity" class="form-control border-color" required /></div>
                        <div></div>
                        <div class="flex-horizontal-end">
                            <button type="button" @onclick='()=>OpenAdd("Material")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                            <button type="button" @onclick='AddMaterials' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>

                    </div>

                </div>
            </div>
        }

        @if (@pageView == "Material")
        {
            <PageTitleComponent Title="@GetName( "Material", new MaterialRecipeItem())" IconName="material.png"
                            Description="@($"Here you can create {GetName( "Material", new MaterialRecipeItem()).ToLower()}")">
            </PageTitleComponent>


            <div class="grid-columns-2-img">
                <div class="grid-columns-header">
                    <div>
                        <label for="name">Name</label>
                    </div>
                    <div>
                        <input type="text" class="form-control" id="name" @bind-value="@MateriaoNew.Name" autocomplete="off" />
                    </div>

                    <div id="shortCutCodeGroup">
                        <label for="shortcutCode">Identifier Code</label>
                    </div>
                    <div>
                        <input type="text" class="form-control" @bind="MateriaoNew.Code" autocomplete="off" />
                    </div>
                    <div><label for="shortcutCode">@GetName("Status", new Concept())</label></div>
                    <div @onclick="SetStatus">
                        <label id="statusConcept" class="style-status" style="background-color:@colorStatus;">@(MateriaoNew.Status != null ? MateriaoNew.Status : "")</label>
                    </div>

                    <div class="lineFormGroup">
                        <TransactionalItemGroupSelector @ref="referGroup" Groups="@MateriaoNew.Groups" EventAddGroups="AddGroup"></TransactionalItemGroupSelector>
                    </div>

                </div>
                <div>
                    <label for="shortcutCode">@GetName("SkinImageName", new Concept())</label>
                    <br />
                    <div class="lineFormGroup" style="position:relative;">
                        <div class="form-group">
                            <div style="display:flex; flex-direction:row;">
                                <div class="conten-chip margin-left-control">
                                    <div class="position-input">
                                        <InputTextSelector3 TItem="TransactItemImage"
                                                        Id="SkinImageName"
                                                        EventSearcherValueAndId="EventSearcherValueAndId"
                                                        EventIdSelectionAndId="SelectionMade"
                                                        EventClosed="ClosedInputText"
                                                        Items="transactItemImages"
                                                        captionOff="true"
                                                        Visible="imgVisible">

                                        </InputTextSelector3>
                                    </div>
                                </div>
                                <div>
                                    @if (transactItemImages == null) transactItemImages = new List<TransactItemImage>();
                                    <img class="style-img" src="@(transactItemImage.PathImage !=null?transactionalService.Host+transactItemImage.PathImage:"/images/defaultImage.png")" @onclick='()=> SetViewElemnt("SkinImageName")' />
                                </div>


                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div>
                <div class="flex-horizontal-center">
                    <div class="grid-columns-2 box-shadow-mode">

                        <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                        <div><input type="number" @bind="materialRecipeItem.Quantity" class="form-control border-color" required /></div>
                        <div></div>
                        <div class="flex-horizontal-end">
                            <button type="button" @onclick='()=>ClosedAdd("ListOfMaterials")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                            <button type="button" @onclick='AddMaterials' class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>

                    </div>

                </div>
            </div>
        }

        @if (@pageView == "AssemblyRecipeItems")
        {
            <PageTitleComponent Title="@GetName("AssemblyRecipeItems", new PackingSpecs())" IconName="assemblyRecipe.png"
                            Description="@($"Here you can add {GetName("AssemblyRecipeItems", new PackingSpecs())}")">
            </PageTitleComponent>

            <div class="container-menu-g">
                <nav>
                    <button type="button" @onclick='()=>OpenAdd("AssemblyRecipeItems")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                    <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                        <SplitButtonEvents ItemSelected="ItemSelected_1">
                        </SplitButtonEvents>
                        <DropDownMenuItems>
                            <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Add" IconCss="fa-sharp fa-solid fa-circle-plus"></DropDownMenuItem>
                            <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                            <DropDownMenuItem Separator="true"></DropDownMenuItem>
                            <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                        </DropDownMenuItems>
                    </SfSplitButton>

                    <div class="nav-link-style">
                        <a target="_blank" href="/Products"><i class="fa-sharp fa-solid fa-circle-plus"></i> Product </a>
                    </div>

                </nav>
            </div>

            <div class="grid-columns-header ">
                <div>
                    <label>
                        @GetName( "ItemComponent", new PackRecipeItem())
                    </label>
                </div>

                <InputTextSelector3 TItem="Concept"
                                Id="ItemComponent"
                                caption="@(itemComponent != null ? itemComponent.Name : "")"
                                EventSearcherValueAndId="EventSearcherValueAndId"
                                EventIdSelectionAndId="SelectionMade"
                                EventClosed="ClosedInputText"
                                Items="itemComponents">

                </InputTextSelector3>
                <div>
                    <label>
                        @GetName( "RecipeQualityModifier", new PackRecipeItem())
                    </label>
                </div>

                <InputTextSelector3 TItem="ProductRecipeQualityModifier"
                                Id="RecipeQualityModifier"
                                caption="@(recipeQualityModifier != null ? recipeQualityModifier.Name : "")"
                                EventSearcherValueAndId="EventSearcherValueAndId"
                                EventIdSelectionAndId="SelectionMade"
                                EventClosed="ClosedInputText"
                                Items="recipeQualityModifiers">

                </InputTextSelector3>

                <div><label>@GetName( "Quantity",new MaterialRecipeItem())</label></div>
                <div><input type="number" @bind="assemblyRecipeItem.Quantity" class="form-control border-color" required /></div>
            </div>

            <SfTab Height="300px" HeaderPlacement="HeaderPosition.Left">
                <TabAnimationSettings>
                    <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                    <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
                </TabAnimationSettings>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName( "ListOfMaterials", new PackRecipeItem())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="flex-horizontal-center">
                                <div class="detailsTitleContainer">
                                    <h3 class="subTitleDetailForm">@GetName( "ListOfMaterials", new PackRecipeItem())</h3>
                                    <svg @onclick='()=>ClosedAdd("ListOfMaterialsAssembly")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                </div>

                                @if (materialsRecipeItemsAssembly == null) { materialsRecipeItemsAssembly = new List<MaterialRecipeItem>(); }


                                @if (materialsRecipeItemsAssembly != null)
                                {
                                    <RadzenDataGrid AllowFiltering="true"
                                            AllowColumnResize="true"
                                            AllowAlternatingRows="true"
                                            FilterMode="FilterMode.Advanced"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowSorting="true"
                                            PageSize="2"
                                            AllowPaging="true"
                                            PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                            ShowPagingSummary="true"
                                            Data="@materialsRecipeItemsAssembly"
                                            TItem="MaterialRecipeItem"
                                            ColumnWidth="300px"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            LogicalFilterOperator="LogicalFilterOperator.Or"
                                            CellContextMenu="@ShowContextMenuWithContent"
                                            PageNumbersCount="100">

                                        <Columns>
                                            <RadzenDataGridColumn TItem="MaterialRecipeItem" Property="Material.Name" Title="@GetName( "Name", new AtomConcept())" Frozen="false" Width="80px" />
                                            <RadzenDataGridColumn TItem="MaterialRecipeItem" Property="Quantity" Filterable="true" Title="@GetName( "Quantity", new AtomConcept())" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />

                                        </Columns>
                                    </RadzenDataGrid>
                                }


                            </div>

                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="@GetName( "ComponentItemRecipe", new PackRecipeItem())"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>

                            <div class="flex-horizontal-center">
                                <div class="detailsTitleContainer">
                                    <h3 class="subTitleDetailForm">@GetName( "ComponentItemRecipe", new PackRecipeItem())</h3>
                                    <svg @onclick='()=>ClosedAdd("ComponentItemRecipeChildren")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                </div>

                                @if (materialsRecipeItemsAssembly != null)
                                {
                                    <RadzenDataGrid AllowFiltering="true"
                                            AllowColumnResize="true"
                                            AllowAlternatingRows="true"
                                            FilterMode="FilterMode.Advanced"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowSorting="true"
                                            PageSize="2"
                                            AllowPaging="true"
                                            PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                            ShowPagingSummary="true"
                                            Data="@assemblyRecipeItemsChldren"
                                            TItem="PackRecipeItem"
                                            ColumnWidth="300px"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            LogicalFilterOperator="LogicalFilterOperator.Or"
                                            CellContextMenu="@ShowContextMenuWithContent"
                                            PageNumbersCount="100">

                                        <Columns>
                                            <RadzenDataGridColumn TItem="PackRecipeItem" Property="ItemComponent.Name" Title="@GetName( "Name", new AtomConcept())" Frozen="false" Width="80px" />
                                            <RadzenDataGridColumn TItem="PackRecipeItem" Property="Quantity" Filterable="true" Title="@GetName( "Quantity", new PackRecipeItem())" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />

                                        </Columns>
                                    </RadzenDataGrid>
                                }

                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>

        }

        @if (@pageView == "ListOfMaterialsAssembly")
        {
            <PageTitleComponent Title="@GetName( "MaterialRecipeItem", new PackRecipeItem())" IconName="material.png"
                            Description="@($"Here you can add {GetName( "MaterialRecipeItem", new PackRecipeItem()).ToLower()}")">
            </PageTitleComponent>

            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">
                    <div><label>@GetName( "ListOfMaterials", new PackRecipeItem())</label></div>
                    <div>

                        <InputTextSelector3 TItem="Concept"
                                        Id="ListOfMaterials"
                                        caption="@(conceptMaterialAssembly != null ? conceptMaterialAssembly.Name : "")"
                                        EventSearcherValueAndId="EventSearcherValueAndId"
                                        EventIdSelectionAndId="SelectionMade"
                                        EventClosed="ClosedInputText"
                                        Items="ConceptMaterialsAssembly">

                        </InputTextSelector3>

                    </div>
                    <div>
                        <label>
                            @GetName( "Quantity", new MaterialRecipeItem())
                        </label>
                    </div>
                    @if (materialRecipeItem == null) materialRecipeItem = new();
                    <div><input type="number" @bind="materialRecipeItem.Quantity" class="form-control border-color" maxlength="4" min="1" /></div>

                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>ClosedAdd("AssemblyRecipeItems")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button @onclick='AddMaterialsAssembly' type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }

        @if (@pageView == "ComponentItemRecipeAssembly")
        {
            <PageTitleComponent Title="@GetName( "ComponentItemRecipe", new PackRecipeItem())" IconName="assemblyRecipe.png"
                            Description="@($"Here you can add {GetName( "ComponentItemRecipe", new MaterialRecipeItem())}")">
            </PageTitleComponent>

            <div class="flex-horizontal-center">
                <div class="grid-columns-2 box-shadow-mode">

                    <div></div>
                    <div class="flex-horizontal-end">
                        <button type="button" @onclick='()=>ClosedAdd("AssemblyRecipeItems")' class="size-btn color-btn margin-left"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                        <button type="button" class="size-btn color-btn "><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>
                </div>
            </div>
        }

        @if (pageView == "ComponentItemRecipeChildren")
        {
            <ComponentItemRecipeChildrenCard transactionalItemId="transactionalItemId" @ref="recipeChildren" EventCallbackPage="ClosedAdd" EventCallAdd="AddAssemblyRecipeItemsChildren"></ComponentItemRecipeChildrenCard>
        }

    </div>

    <div class="content-new-packing-recipe" style=' display:@(modeEdit?"block":"none"); };'>
        <PageTitleComponent Title="@GetName("ProductPackingSpecs", new TransactionalItem())" IconName="PackingSpecs.png"
                            Description="@($"Here you can add {@GetName("ProductPackingSpecs", new TransactionalItem())}")">
        </PageTitleComponent>

        <div class="container-menu-g">
            <nav>
                <button @onclick='()=>Closed("control")' class="general-menu-button" style="text-align:center;"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

                <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                    <SplitButtonEvents ItemSelected="ItemSelected">
                    </SplitButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                        <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                        <DropDownMenuItem Separator="true"></DropDownMenuItem>
                        <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfSplitButton>

            </nav>
        </div>

        <SfTab @ref="referTag" Height="50px">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=Syncfusion.Blazor.AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("ProductPackingSpecs", new TransactionalItem())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        @*  @(pageView = "ProductPackingSpecs");*@
                        <div id="add-recipe">
                            <div class="grid-columns-4">
                                <div><label>@GetName( "Customer", new PackingSpecs())</label></div>
                                <InputTextSelector3 TItem="Concept"
                                                    Id="Customer"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    caption="@(Customer != null ? Customer?.Name : "")"
                                                    EventClosed="ClosedInputText"
                                                    Items="ListConcept">
                                </InputTextSelector3>
                                <div><label>@GetName( "Code", new AtomConcept())</label></div>
                                <div> <b><h6>@(Customer != null ? Customer.Code : "")</h6></b></div>
                                <div>
                                    <label>
                                        @GetName( "Season", new PackingSpecs())
                                    </label>
                                </div>
                                <InputTextSelector3 TItem="SeasonBusiness"
                                                    Id="Season"
                                                    caption="@(Season != null ? Season?.Name : "")"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    EventClosed="ClosedInputText"
                                                    Items="GetSeasonView">
                                </InputTextSelector3>

                                <div>
                                    <label>
                                        @GetName("ModelRecipe",new PackingSpecs())
                                    </label>
                                </div>
                                <InputTextSelector3 TItem="ProductModel"
                                                    Id="Model"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    caption="@(ModelRecipe != null ? ModelRecipe?.Name : "")"
                                                    Items="GetModelView">
                                </InputTextSelector3>

                                <div>
                                    <label>
                                        @GetName( "PackLayersToSale", new PackingSpecs())
                                    </label>
                                </div>
                                <div><input type="number" @bind="_PackingSpecs.PackLayersToSale" class="form-control border-color" autofocus required /></div>
                                <div><label>@GetName( "PackLayersToBuy",new PackingSpecs())</label></div>
                                <div><input type="number" @bind="_PackingSpecs.PackLayersToBuy" class="form-control border-color" required /></div>
                                <div>
                                    <label>
                                        @GetName( "PackingBoxToSale", new PackingSpecs())
                                    </label>
                                </div>
                                <InputTextSelector3 TItem="Box"
                                                    Id="PackingBoxToSale"
                                                    caption="@(BoxToSale != null ? BoxToSale?.Name : "")"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    EventClosed="ClosedInputText"
                                                    Items="GetBoxToSaleView">

                                </InputTextSelector3>

                                <div><label>@GetName( "PackingBoxToBuy", new PackingSpecs())</label></div>

                                <InputTextSelector3 TItem="Box"
                                                    caption="@(BoxToBuy != null ? BoxToBuy?.Name : "")"
                                                    Id="PackingBoxToBuy"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    EventClosed="ClosedInputText"
                                                    Items="GetBoxToBuyView">

                                </InputTextSelector3>

                                <div>
                                    <label>
                                        @GetName( "PackPerBoxLayer", new PackingSpecs())
                                    </label>
                                </div>
                                <div><input type="number" @bind="_PackingSpecs.PackPerBoxLayer" class="form-control border-color" maxlength="4" min="1" /></div>
                                <div><label> @GetName("UnitPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.UnitPrice" type="number" class="form-control border-color" /></div>
                                <div><label> @GetName("RetailPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.RetailPrice" type="number" class="form-control border-color" /></div>
                                <div><label> @GetName("RetailBulkNumberOfItems", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.RetailBulkNumberOfItems" type="number" class="form-control border-color" /></div>
                                <div><label> @GetName("RetailBulkPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.RetailBulkPrice" type="number" class="form-control border-color" /></div>
                                <div><label> @GetName("TotalPrice", new PriceInfo() )</label></div>
                                <div><input @bind="PriceInfo.TotalPrice" type="number" class="form-control border-color" /></div>

                                <div><label>@GetName( "TotalPriceItemTypeBasedOn", new PriceInfo())</label></div>

                                <InputTextSelector3 TItem="TransactionalItemType"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    caption="@(totalPriceItemTypeBasedOn != null ? totalPriceItemTypeBasedOn.Name : "")"
                                                    Id="TotalPriceItemTypeBasedOn"
                                                    EventClosed="ClosedInputText"
                                                    Items="totalPriceItemTypeBasedOns">

                                </InputTextSelector3>

                                <div>
                                    <label>
                                        @GetName("ItemAssemblyType",new PackingSpecs())
                                    </label>
                                </div>

                                <InputTextSelector3 TItem="AssemblyType"
                                                    caption="@(assemblyType != null ? assemblyType?.Name : "")"
                                                    Id="ItemAssemblyType"
                                                    EventClosed="ClosedInputText"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    Items="assemblyTypes">

                                </InputTextSelector3>

                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "CustomerLabelInstructions", new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        @(pageView = "PalletLabelStyle");
                        <div id="add-recipe">
                            <div class="grid-columns-4">
                                <div>
                                    <label>
                                        @GetName( "PalletLabelStyle", new LabelInstruction())
                                    </label>
                                </div>

                                <InputTextSelector3 TItem="LabelStyle"
                                                    Id="PalletLabelStyle"
                                                    caption="@(palletLabelStyle != null ? palletLabelStyle.Name : "")"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    EventClosed="ClosedInputText"
                                                    Items="palletLabelStylesView">

                                </InputTextSelector3>

                                <div>
                                    <label>
                                        @GetName( "BoxLabelStyle", new LabelInstruction())
                                    </label>
                                </div>

                                <InputTextSelector3 TItem="LabelStyle"
                                                    Id="BoxLabelStyle"
                                                    caption="@(BoxLabelStyle != null ? BoxLabelStyle.Name : "")"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    EventClosed="ClosedInputText"
                                                    Items="BoxLabelStylesView">

                                </InputTextSelector3>
                                @* string UPCName*@
                                <div><label> @GetName("UPCName", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCName" class="form-control border-color" required /></div>

                                <div>
                                    <label>
                                        @GetName( "InnerProductLabelStyleByDeafult", new LabelInstruction())
                                    </label>
                                </div>

                                <InputTextSelector3 TItem="LabelStyle"
                                                    Id="InnerProductLabelStyleByDeafult"
                                                    caption="@(InnerProductLabelStyleByDeafult != null ? InnerProductLabelStyleByDeafult.Name : "")"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    EventClosed="ClosedInputText"
                                                    Items="InnerProductLabelStyleByDeafultsView">

                                </InputTextSelector3>

                                <div><label> @GetName("UPCComments", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCComments" class="form-control border-color border-color" required /></div>
                                <div><label> @GetName("BoxUPCCode", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.BoxUPCCode" class="form-control border-color" required /></div>
                                <div><label> @GetName("InnerProductUPCCode", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.InnerProductUPCCode" class="form-control border-color" required /></div>
                                <div><label> @GetName("UPCDateCodeFormat", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCDateCodeFormat" type="number" class="form-control border-color" required /></div>
                                <div>
                                    <label>
                                        @GetName( "UPCDateCodeBasedOn", new LabelInstruction())
                                    </label>
                                </div>
                                <div style="position:relative;">
                                    <select class="form-control" @bind="labelInstruction.UPCDateCodeBasedOn" placeholder="Edit value">
                                        <option value="@DatesReferenceType.ProductionDate">@DatesReferenceType.ProductionDate.ToString()</option>
                                        <option value="@DatesReferenceType.BuyDate">@DatesReferenceType.BuyDate.ToString()</option>
                                        <option value="@DatesReferenceType.NotDefined">@DatesReferenceType.NotDefined.ToString()</option>
                                        <option value="@DatesReferenceType.DeliveryDate">@DatesReferenceType.DeliveryDate.ToString()</option>
                                        <option value="@DatesReferenceType.ShipDate">@DatesReferenceType.ShipDate.ToString()</option>
                                    </select>
                                </div>
                                <div><label> @GetName("UPCDateCodeDaysAfterReferenceDate", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.UPCDateCodeFormat" type="number" class="form-control border-color" required /></div>
                                <div><label> @GetName("OriginCountryLegend", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.OriginCountryLegend" class="form-control border-color" required /></div>
                                <div><label> @GetName("SKU", new LabelInstruction()) </label></div>
                                <div><input @bind="labelInstruction.SKU" class="form-control border-color" required /></div>
                                <div><label> @GetName("ShowRetailPriceUPCInfo", new LabelInstruction()) </label></div>
                                <div>
                                    <SfSwitch @bind-Checked="@labelInstruction.ShowRetailPriceUPCInfo"></SfSwitch>
                                </div>
                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName( "ListOfMaterials",new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        @{
                            pageView = "ListOfMaterials";
                        }
                        <div style="display:flex; flex-direction:column; justify-content:center;">

                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "ListOfMaterials", new PackingSpecs())</h3>
                                <svg @onclick='()=>ClosedAdd("ListOfMaterials")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>


                            @if (listOfMaterials != null)
                            {
                                <RadzenDataGrid AllowFiltering="true"
                                            AllowColumnResize="true"
                                            AllowAlternatingRows="true"
                                            FilterMode="FilterMode.Advanced"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowSorting="true"
                                            PageSize="4"
                                            AllowPaging="true"
                                            PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                            ShowPagingSummary="true"
                                            Data="@listOfMaterials"
                                            TItem="MaterialRecipeItem"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            LogicalFilterOperator="LogicalFilterOperator.Or"
                                            CellContextMenu="@ShowContextMenuWithContent"
                                            PageNumbersCount="100">

                                    <Columns>
                                        <RadzenDataGridColumn TItem="MaterialRecipeItem" Property="Material.Code" Title="@GetName("Code",new AtomConcept())" Frozen="false" Width="80px" />
                                        <RadzenDataGridColumn TItem="MaterialRecipeItem" Property="Material.Name" Filterable="true" Title="@GetName("Material",new MaterialRecipeItem())" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="MaterialRecipeItem" Property="Quantity" Title="@GetName("Quantity",new MaterialRecipeItem())" Width="200px" />
                                    </Columns>
                                </RadzenDataGrid>
                            }

                        </div>

                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@GetName("AssemblyRecipeItems", new PackingSpecs())"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div style="display:flex; flex-direction:column; justify-content:center;">

                            <div class="detailsTitleContainer">
                                <h3 class="subTitleDetailForm">@GetName( "AssemblyRecipeItems", new PackingSpecs())</h3>
                                <svg @onclick='()=>ClosedAdd("AssemblyRecipeItems")' title="Add new tag" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style svg-ico" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </div>

                            <div class="content-btn">
                                @* <button type="button" @onclick='()=>AddAssemblyControl(true)' class="size-btn color-btn" style=' display:@(btnAddMaterials?"block":"none");'>+</button>*@
                            </div>


                            @if (assemblyRecipeItems != null)
                            {
                                <RadzenDataGrid AllowFiltering="true"
                                            AllowColumnResize="true"
                                            AllowAlternatingRows="true"
                                            FilterMode="FilterMode.Advanced"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowSorting="true"
                                            PageSize="20"
                                            AllowPaging="true"
                                            PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                                            ShowPagingSummary="true"
                                            Data="@assemblyRecipeItems"
                                            TItem="PackRecipeItem"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            LogicalFilterOperator="LogicalFilterOperator.Or"
                                            CellContextMenu="@ShowContextMenuWithContent"
                                            PageNumbersCount="100">

                                    <Columns>
                                        <RadzenDataGridColumn TItem="PackRecipeItem" Property="ItemComponent.Name" Title="@GetName( "ComponentItemRecipe",new PackRecipeItem())" Frozen="false" Width="80px" />
                                        <RadzenDataGridColumn TItem="PackRecipeItem" Property="RecipeQualityModifier.Name" Filterable="true" Title="@GetName( "Quantity",new PackRecipeItem())" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="PackRecipeItem" Property="Quantity" Filterable="true" Title="@GetName( "RecipeQualityModifier",new PackRecipeItem())" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />

                                    </Columns>
                                </RadzenDataGrid>
                            }

                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    </div>


</form>

@code {
    [Parameter]
    public string transactionalItemId { get; set; }
    [Parameter]
    public string packingSpecsId { get; set; }
    public RenderFragment render { get; set; }
    [Parameter]
    public EventCallback<PackingSpecs> save { get; set; }
    [Parameter]
    public string Mode { get; set; } = "Add";
    bool viewMsg = false, modeEdit = true;
    string msg = "";
    string pageView = "";
    SfTab? referTag;
    TransactionalItemGroupSelector? referGroup;
    ComponentItemRecipeChildrenCard? recipeChildren;
    MaterialRecipeItemCard? addControl;
    public TransactionalItem? transactionalItems { get; set; }





    public int Page = 0;

    #region control Input Tex
    public string selectionControl = "";
    public bool imgVisible = false;
    #endregion Control Input Tex

    #region Tag 1
    public List<Concept>? ListConcept = new List<Concept>();
    public List<ProductModel>? SetModels = new List<ProductModel>();
    public List<ProductModel>? GetModelView = new List<ProductModel>();
    public List<SeasonBusiness>? GetSeasonView = new List<SeasonBusiness>();
    public List<Box>? SetBox = new List<Box>();
    public List<Box>? GetBoxToSaleView = new List<Box>();
    public List<Box>? GetBoxToBuyView = new List<Box>();

    public AssemblyType assemblyType = new();
    public List<AssemblyType> assemblyTypes = new();

    List<TransactionalItemType> totalPriceItemTypeBasedOns = new();
    TransactionalItemType totalPriceItemTypeBasedOn = new();


    PackingSpecs _PackingSpecs = new PackingSpecs();
    Concept Customer = new Concept();
    SeasonBusiness Season = new SeasonBusiness();
    ProductModel ModelRecipe = new ProductModel();
    Box BoxToSale = new Box();
    Box BoxToBuy = new Box();
    PriceInfo PriceInfo = new PriceInfo();
    #endregion Tag 1

    #region Tag 2
    LabelInstruction labelInstruction = new LabelInstruction();
    List<LabelStyle> palletLabelStylesView = new List<LabelStyle>();
    LabelStyle palletLabelStyle = new LabelStyle();
    List<LabelStyle> BoxLabelStylesView = new List<LabelStyle>();
    LabelStyle BoxLabelStyle = new LabelStyle();
    List<LabelStyle> InnerProductLabelStyleByDeafultsView = new List<LabelStyle>();
    LabelStyle InnerProductLabelStyleByDeafult = new LabelStyle();
    List<LabelStyle> UPCDateCodeBasedOnsView = new List<LabelStyle>();
    LabelStyle uPCDateCodeBasedOn = new LabelStyle();
    #endregion Tag 2

    #region Tag 3

    List<MaterialRecipeItem> listOfMaterials = new List<MaterialRecipeItem>();
    MaterialRecipeItem materialRecipeItem = new MaterialRecipeItem();
    List<Concept> MaterialsConcept = new List<Concept>();
    Concept MaterialConcept = new Concept();
    Concept MateriaoNew = new();
    string colorStatus = "";
    bool modeStatus = false;
    TransactItemImage transactItemImage = new();
    List<TransactItemImage> transactItemImages = new();
    #endregion Tag 3

    #region Tag 4
    bool addAssembly = false;

    List<PackRecipeItem> assemblyRecipeItemsChldren = new List<PackRecipeItem>();
    List<PackRecipeItem> assemblyRecipeItems = new List<PackRecipeItem>();
    PackRecipeItem assemblyRecipeItem = new PackRecipeItem();
    List<Concept> itemComponents = new();
    Concept itemComponent = new();
    List<RecipeModifier> recipeModifiers = new();
    List<ProductRecipeQualityModifier> recipeQualityModifiers = new();
    ProductRecipeQualityModifier recipeQualityModifier = new();
    List<MaterialRecipeItem> materialsRecipeItemsAssembly = new();
    MaterialRecipeItem materialRecipeItemsAssembly = new();
    List<Concept> ConceptMaterialsAssembly = new();
    Concept conceptMaterialAssembly = new();

    #endregion Tag 4

    #region Add Material
    public bool addMaterials = false;
    public bool btnAddMaterials = false;
    #endregion Add Material

    InputTextSelector? ReferInputTextSelector;



    protected override void OnInitialized()
    {
        InitializedAsync();
    }

    protected async void InitializedAsync()
    {
        SetBox = await transactionalService.GetSelectorListEntityBoxToBuy();

        if (transactionalItemId != null && packingSpecsId != null)
        {
            _PackingSpecs = await transactionalService.GetPackingRecipeById(transactionalItemId, packingSpecsId);
            if (_PackingSpecs != null)
            {
                #region Tag1
                Customer = _PackingSpecs.Customer != null ? _PackingSpecs.Customer : new Concept();
                Season = _PackingSpecs.Season != null ? _PackingSpecs.Season : new SeasonBusiness();
                ModelRecipe = _PackingSpecs.ModelRecipe != null ? _PackingSpecs.ModelRecipe : new ProductModel();
                PriceInfo = _PackingSpecs.Price != null ? _PackingSpecs.Price : new PriceInfo();
                BoxToBuy = _PackingSpecs.PackingBoxToBuy != null ? _PackingSpecs.PackingBoxToBuy : new Box(); ;
                BoxToSale = _PackingSpecs.PackingBoxToSale != null ? _PackingSpecs.PackingBoxToSale : new Box();
                listOfMaterials = _PackingSpecs.ListOfMaterials != null ? _PackingSpecs.ListOfMaterials : new List<MaterialRecipeItem>();
                labelInstruction = _PackingSpecs.CustomerLabelInstructions != null ? _PackingSpecs.CustomerLabelInstructions : new LabelInstruction();
                assemblyRecipeItems = _PackingSpecs.AssemblyRecipeItems != null ? _PackingSpecs.AssemblyRecipeItems : new();
                assemblyType = _PackingSpecs.ItemAssemblyType != null ? _PackingSpecs.ItemAssemblyType : new();


                if (_PackingSpecs.Price != null)
                {
                    totalPriceItemTypeBasedOn = _PackingSpecs.Price.TotalPriceItemTypeBasedOn != null ? _PackingSpecs.Price.TotalPriceItemTypeBasedOn : new();
                }


                #endregion Tag1

                #region Tag 2
                if (_PackingSpecs.CustomerLabelInstructions != null)
                {
                    labelInstruction = _PackingSpecs.CustomerLabelInstructions;
                    palletLabelStyle = labelInstruction.PalletLabelStyle != null ? labelInstruction.PalletLabelStyle : new();
                    BoxLabelStyle = labelInstruction.BoxLabelStyle != null ? labelInstruction.BoxLabelStyle : new();
                    InnerProductLabelStyleByDeafult = labelInstruction.InnerProductLabelStyleByDeafult != null ? labelInstruction.InnerProductLabelStyleByDeafult : new();
                }


                #endregion Tag 2
                if (_PackingSpecs == null) _PackingSpecs = new();
                StateHasChanged();
            }
            else
            {
                //Closed("control");
            }
        }
    }



    public async void ItemSelected(MenuEventArgs e)
    {

        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {

            bool status = false;
            #region Tag 1
            _PackingSpecs.Customer = Customer != null ? Customer : new();
            _PackingSpecs.Season = Season != null ? Season : new();
            _PackingSpecs.ModelRecipe = ModelRecipe != null ? ModelRecipe : new();
            _PackingSpecs.Price = PriceInfo != null ? PriceInfo : new();
            _PackingSpecs.Price.TotalPriceItemTypeBasedOn = totalPriceItemTypeBasedOn;
            _PackingSpecs.PackingBoxToBuy = BoxToBuy != null ? BoxToBuy : new();
            _PackingSpecs.PackingBoxToSale = BoxToSale != null ? BoxToSale : new();
            _PackingSpecs.ListOfMaterials = listOfMaterials != null ? listOfMaterials : new();
            _PackingSpecs.CustomerLabelInstructions = labelInstruction;
            assemblyRecipeItem.ItemComponent = itemComponent != null ? itemComponent : new();
            materialRecipeItemsAssembly.Material = conceptMaterialAssembly != null ? conceptMaterialAssembly : new();
            assemblyRecipeItem.ListOfMaterials = materialsRecipeItemsAssembly != null ? materialsRecipeItemsAssembly : new();
            assemblyRecipeItem.RecipeQualityModifier = recipeQualityModifier != null ? recipeQualityModifier : new();
            assemblyRecipeItems.Add(assemblyRecipeItem);
            _PackingSpecs.AssemblyRecipeItems = assemblyRecipeItems != null ? assemblyRecipeItems : new();
            _PackingSpecs.ItemAssemblyType = assemblyType != null ? assemblyType : new();


            #endregion Tag 1

            #region Tag 2
            _PackingSpecs.CustomerLabelInstructions = labelInstruction != null ? labelInstruction : new();
            _PackingSpecs.CustomerLabelInstructions.PalletLabelStyle = palletLabelStyle != null ? palletLabelStyle : new();
            _PackingSpecs.CustomerLabelInstructions.BoxLabelStyle = BoxLabelStyle != null ? BoxLabelStyle : new();
            _PackingSpecs.CustomerLabelInstructions.InnerProductLabelStyleByDeafult = InnerProductLabelStyleByDeafult != null ? InnerProductLabelStyleByDeafult : new();
            #endregion Tag 2

            #region Tag 3


            #endregion Tag 3




            var resul = await transactionalService.SaveProductPackingSpec(transactionalItemId, _PackingSpecs);

            if (resul)
            {
                Msg("Saved");

            }
            else
            {
                Msg("No saved");
            }




        }
        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }

    public async void ItemSelected_1(MenuEventArgs e)
    {

        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Add")
        {
            //assemblyRecipeItem.Id == null
            if (true)
            {
                assemblyRecipeItem.ItemComponent = itemComponent != null ? itemComponent : new();
                assemblyRecipeItem.ListOfMaterials = materialsRecipeItemsAssembly != null ? materialsRecipeItemsAssembly : new();
                assemblyRecipeItem.RecipeQualityModifier = recipeQualityModifier != null ? recipeQualityModifier : new();
                assemblyRecipeItem.ComponentItemRecipe = assemblyRecipeItemsChldren != null ? assemblyRecipeItemsChldren : new();
                assemblyRecipeItems.Add(assemblyRecipeItem);
                StateHasChanged();
                Msg("Added");
            }



        }


        StateHasChanged();


    }

    public async void ItemSelectedConcept(MenuEventArgs e)
    {
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Material")
        {

        }

        if (tile == "Product")
        {
            Navigation.NavigateTo("target='_blank', /Products");
        }

        if (tile == "Save as...")
        {

        }


        StateHasChanged();


    }

    private void AddMaterials()
    {
        if (materialRecipeItem != null)
        {
            if (materialRecipeItem.Material == null) materialRecipeItem.Material = new();
            if (materialRecipeItem.Material.Id == null)
            {
                materialRecipeItem.Material = MaterialConcept;
                listOfMaterials.Add(materialRecipeItem);
                materialRecipeItem = new();
                MaterialConcept = new();
                Msg("Added");
            }
            else
            {
                materialRecipeItem.Material = MaterialConcept;
                materialRecipeItem = new();
                MaterialConcept = new();
                Msg("Update");
            }

        }
        StateHasChanged();
    }

    private void AddMaterialsAssembly()
    {
        if (materialRecipeItemsAssembly != null)
        {
            if (materialRecipeItemsAssembly.Material == null) materialRecipeItemsAssembly.Material = new();

            materialRecipeItemsAssembly.Material = conceptMaterialAssembly;
            materialsRecipeItemsAssembly.Add(materialRecipeItemsAssembly);
            materialRecipeItemsAssembly = new();
            conceptMaterialAssembly = new();
            Msg("Added");


        }
        StateHasChanged();
    }

    public void AddAssemblyRecipeItemsChildren(List<PackRecipeItem> _assemblyRecipeItems)
    {
        if (assemblyRecipeItems == null) assemblyRecipeItems = new();
        foreach (var item in _assemblyRecipeItems)
        {
            var remove = assemblyRecipeItems.Where(s => s.Id == item.Id).FirstOrDefault();
            if (remove == null)
            {
                assemblyRecipeItemsChldren.Add(item);
            }
            else
            {
                assemblyRecipeItemsChldren.Remove(remove);
                assemblyRecipeItemsChldren.Add(item);

            }
        }
        StateHasChanged();

    }

    public async Task Refresh()
    {
        if (ReferInputTextSelector != null) await ReferInputTextSelector.Refresh();
        StateHasChanged();
    }

    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo($"/TransactionalItemCard/{transactionalItemId}");
    }


    protected async void EventSearcherValueAndId((string value, string selectionId) arg)
    {
        selectionControl = arg.selectionId;
        if (arg.selectionId == "Customer")
        {
            ListConcept = await transactionalService.GetSelectorListEntityActors(arg.value, "MassMarket");

        }
        if (arg.selectionId == "Model")
        {
            if (SetModels == null) SetModels = new();
            SetModels = await transactionalService.GetSelectorListEntityProductModel(transactionalItemId);
            GetModelView = SetModels;
            if (!arg.value.ToLower().Contains("all") && !arg.value.ToLower().Contains("todo")) GetModelView = SetModels.Where(s => s.Name.ToLower().Contains(arg.value.ToLower())).ToList();

        }
        if (arg.selectionId == "Season")
        {
            GetSeasonView = await transactionalService.GetSelectorListSeasonBusiness(arg.value);

        }
        if (arg.selectionId == "PackingBoxToSale")
        {
            GetBoxToSaleView = await transactionalService.GetSelectorListBoxes(arg.value);

        }
        if (arg.selectionId == "PackingBoxToBuy")
        {
            if (SetBox == null) SetBox = new();
            GetBoxToBuyView = await transactionalService.GetBoxTable(arg.value);

        }
        if (arg.selectionId == "UPCDateCodeBasedOn")
        {
            UPCDateCodeBasedOnsView = UPCDateCodeBasedOnsView.Where(s => s.Name.ToLower().Contains(arg.value.ToLower())).ToList();

        }
        if (arg.selectionId == "ItemAssemblyType")
        {
            if (assemblyTypes == null) assemblyTypes = new();

            assemblyTypes = await transactionalService.GetSelectorListAssemblyTypes(arg.value);

        }
        if (arg.selectionId == "ListOfMaterials")
        {
            if (ConceptMaterialsAssembly == null) ConceptMaterialsAssembly = new();
            ConceptMaterialsAssembly = await transactionalService.GetSelectorListPackingMaterials(arg.value);

        }

        if (arg.selectionId == "RecipeQualityModifier")
        {
            recipeQualityModifiers = new();
            if (itemComponents != null)
            {

                ConceptType type = itemComponent.TypeOfConcept != null ? itemComponent.TypeOfConcept : null;
                if (type != null)
                {
                    var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);

                    if (itemTypes != null)
                    {

                        var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();

                        if (!arg.value.ToLower().Contains("all") && !arg.value.ToLower().Contains("todo"))
                        {
                            recipeModifiers = resul.InRecipeModifiers.Where(s => s.Name.ToLower().Contains(arg.value.ToLower())).ToList();

                        }
                        else
                        {

                            if (resul != null) recipeModifiers = resul.InRecipeModifiers;

                        }
                        foreach (var item in recipeModifiers)
                        {
                            recipeQualityModifiers.Add(new ProductRecipeQualityModifier
                                    {
                                        Id = item.Id,
                                        Name = item.Name
                                    });
                        }

                    }
                }
            }


        }

        if (arg.selectionId == "TotalPriceItemTypeBasedOn")
        {
            if (totalPriceItemTypeBasedOns == null) totalPriceItemTypeBasedOns = new();
            totalPriceItemTypeBasedOns = await transactionalService.GetTransactionalItemTypes(arg.value);

        }
        if (arg.selectionId == "PalletLabelStyle")
        {
            palletLabelStylesView = await transactionalService.GetLabelStyles(arg.value);

        }
        if (arg.selectionId == "BoxLabelStyle")
        {
            BoxLabelStylesView = await transactionalService.GetLabelStyles(arg.value);

        }
        if (arg.selectionId == "InnerProductLabelStyleByDeafult")
        {
            InnerProductLabelStyleByDeafultsView = await transactionalService.GetLabelStyles(arg.value);

        }
        if (arg.selectionId == "Material")
        {
            MaterialsConcept = await transactionalService.GetSelectorListPackingMaterials(arg.value);

        }
        if (arg.selectionId == "ItemComponent")
        {
            var data = await transactionalService.GetTransactionalItemsList(1, 50, arg.value);
            //itemComponents = await transactionalService.GetConceptProduct(value);

            foreach (TransactionalItem item in data)
            {
                itemComponents.Add(new Concept
                        {
                            Name = item.Name != null ? item.Name : "",
                            Id = item.Id != null ? item.Id : "",
                            AuditRecord = item.AuditRecord != null ? item.AuditRecord : new(),
                            Code = item.Code != null ? item.Code : "",
                            SkinImageName = item.SkinImageName != null ? item.SkinImageName : "",
                            Status = item.Status != null ? item.Status : new(),
                            IsSelected = item.IsSelected != null ? item.IsSelected : false,
                            Groups = item.Groups != null ? item.Groups : new(),
                            HasChanged = item.HasChanged != null ? item.HasChanged : false,
                            IsLoadingData = item.IsLoadingData != null ? item.IsLoadingData : default(bool),
                            LegacyId = item.LegacyId != null ? item.LegacyId : "",
                            Notes = item.Notes != null ? item.Notes : "",
                            TypeOfConcept = item.TypeOfConcept != null ? item.TypeOfConcept : new(),

                        });

            }

        }

        StateHasChanged();
    }
    #region Control
    public void SelectionMade(Concept arg)
    {
        if (selectionControl == "Material")
        {
            MaterialConcept = arg;
        }
        if (selectionControl == "ItemComponent")
        {
            itemComponent = arg;
        }
        if (selectionControl == "ListOfMaterials")
        {
            conceptMaterialAssembly = arg;
        }
        if (selectionControl == "Customer")
        {
            Customer = arg;
        }


        StateHasChanged();
    }
    public void SelectionMade(TransactItemImage arg)
    {
        if (selectionControl == "SkinImageName")
        {
            transactItemImage = arg;
        }
        StateHasChanged();
    }
    public void SelectionMade(ProductRecipeQualityModifier arg)
    {
        if (selectionControl == "RecipeQualityModifier")
        {
            recipeQualityModifier = arg;
        }
        StateHasChanged();
    }

    public void SelectionMade(SeasonBusiness arg)
    {
        if (selectionControl == "Season")
        {
            Season = arg;
        }
        StateHasChanged();
    }
    public void SelectionMade(Box arg)
    {
        if (selectionControl == "PackingBoxToSale")
        {
            BoxToSale = arg;
        }
        if (selectionControl == "PackingBoxToBuy")
        {
            BoxToBuy = arg;
        }
        StateHasChanged();
    }
    public void SelectionMade(TransactionalItemType arg)
    {
        if (selectionControl == "TotalPriceItemTypeBasedOn")
        {
            totalPriceItemTypeBasedOn = arg;
        }
        StateHasChanged();
    }
    public void SelectionMade(AssemblyType arg)
    {
        if (selectionControl == "ItemAssemblyType")
        {
            assemblyType = arg;
        }
        StateHasChanged();
    }

    public void SelectionMade(LabelStyle arg)
    {
        if (selectionControl == "PalletLabelStyle")
        {
            palletLabelStyle = arg;
        }
        if (selectionControl == "InnerProductLabelStyleByDeafult")
        {
            InnerProductLabelStyleByDeafult = arg;
        }
        if (selectionControl == "BoxLabelStyle")
        {
            BoxLabelStyle = arg;
        }

        StateHasChanged();
    }
    public void SelectionMade(ProductModel arg)
    {
        if (selectionControl == "Model")
        {
            ModelRecipe = arg;
        }



        StateHasChanged();
    }

    public void SetViewElemnt(string item)
    {
        selectionControl = item;
        imgVisible = true;
    }

    #endregion control



    public async void OnContextMenuClick(ContextMenuClickEventArgs<MaterialRecipeItemView> args)
    {
        MaterialRecipeItemView ObjModel = null;
        ObjModel = args.RowInfo.RowData;

        if (args.Item.Text == "Edit" && pageView == "ListOfMaterials")
        {
            materialRecipeItem = listOfMaterials.Where(s => s.Material.Id == ObjModel.Id).FirstOrDefault();
            MaterialConcept = materialRecipeItem.Material != null ? materialRecipeItem.Material : new();
            if (materialRecipeItem != null)
            {
                ClosedAdd("ListOfMaterials");
            }

        }
        if (args.Item.Text == "Edit" && materialRecipeItem != null && pageView == "ListOfMaterialsAssembly")
        {
            materialRecipeItemsAssembly = materialsRecipeItemsAssembly.Where(s => s.Material.Id == ObjModel.Id).FirstOrDefault();
            conceptMaterialAssembly = materialRecipeItemsAssembly.Material != null ? materialRecipeItemsAssembly.Material : new();
            ClosedAdd("ListOfMaterialsAssembly");

        }
    }





    public void AddGroup(List<ConceptGroup> conceptGroups)
    {
        if (MaterialConcept.Groups == null) MaterialConcept.Groups = new();
        MaterialConcept.Groups = conceptGroups;
        StateHasChanged();
        //OpenAlert("Added", 0);
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }



    void AddMaterialsOff()
    {
        btnAddMaterials = true;
        StateHasChanged();

    }



    public void OpenAdd(string value)
    {
        pageView = value;
        modeEdit = true;
        viewMsg = false;

    }

    public void ClosedAdd(string value)
    {
        pageView = value;
        modeEdit = false;
        viewMsg = false;
    }

    public void OpenSubAdd(string value)
    {
        pageView = value;
        viewMsg = false;

    }

    private void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
    }
    private void Msg(string? Msg)
    {
        msg = Msg;
        viewMsg = true;

    }

    public void ClosedInputText()
    {
        imgVisible = false;
        StateHasChanged();
    }



    public void SetStatus()
    {
        modeStatus = modeStatus ? false : true;

        ConceptStatus statust = new();
        if (modeStatus)
        {
            MateriaoNew.Status = statust = new ConceptStatus
                    {
                        Id = "000000000000000000000001",
                        LegacyId = "1",
                        Code = "name",
                        Name = "ACTIVE",
                        IsEnabledForTransactions = true
                    };
            colorStatus = "#008080";
        }
        else
        {
            MateriaoNew.Status = statust = new ConceptStatus
                    {
                        Id = "",
                        LegacyId = "",
                        Code = "",
                        Name = "....",
                        IsEnabledForTransactions = false
                    };
            colorStatus = "gary";
        }

    }

    public class MaterialRecipeItemView
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }

    }

    public class PackRecipeItemView
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Code { get; set; }
        public string SkinImageName { get; set; }
        public string FullClassName { get; set; }
    }



    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<MaterialRecipeItem> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        MaterialRecipeItem argObj = (MaterialRecipeItem)args.Value;
        if (pageView == "ListOfMaterials")
        {
            materialRecipeItem = listOfMaterials.Where(s => s.Material.Id == argObj.Material.Id).FirstOrDefault();
            MaterialConcept = materialRecipeItem.Material != null ? materialRecipeItem.Material : new();
            if (materialRecipeItem != null)
            {
                ClosedAdd("ListOfMaterials");
            }


        }
        if (materialRecipeItem != null && pageView == "ListOfMaterialsAssembly")
        {
            materialRecipeItemsAssembly = materialsRecipeItemsAssembly.Where(s => s.Material.Id == argObj.Material.Id).FirstOrDefault();
            conceptMaterialAssembly = materialRecipeItemsAssembly.Material != null ? materialRecipeItemsAssembly.Material : new();
            ClosedAdd("ListOfMaterialsAssembly");

        }
    }

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<PackRecipeItem> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick_1">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick_1(MenuItemEventArgs args)
    {
        PackRecipeItem argObj = (PackRecipeItem)args.Value;
        if (argObj.Id != null)
        {
            assemblyRecipeItem = assemblyRecipeItems.Where(s => s.Id != null && s.Id == argObj.Id).FirstOrDefault();

            if (materialRecipeItem != null)
            {
                itemComponent = assemblyRecipeItem.ItemComponent != null ? assemblyRecipeItem.ItemComponent : new();
                materialsRecipeItemsAssembly = assemblyRecipeItem.ListOfMaterials != null ? assemblyRecipeItem.ListOfMaterials : new();
                recipeQualityModifier = assemblyRecipeItem.RecipeQualityModifier != null ? assemblyRecipeItem.RecipeQualityModifier : new();
                assemblyRecipeItemsChldren = assemblyRecipeItem.ComponentItemRecipe != null ? assemblyRecipeItem.ComponentItemRecipe : new();
                ClosedAdd("AssemblyRecipeItems");
            }

        }
        else
        {
            Msg("Invalid id");
        }
    }



    #endregion Grid


}
