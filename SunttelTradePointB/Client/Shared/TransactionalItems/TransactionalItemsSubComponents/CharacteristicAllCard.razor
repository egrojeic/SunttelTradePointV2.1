@page "/CharacteristicAllCard/{transactionalItemId}"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }
</style>



@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<PageTitleComponent Title="@GetName("TransactionalItemTypeCharacteristics", new TransactionalItemType())" IconName="characteristics.png"
                    Description="@($"Here you can add {GetName("TransactionalItemTypeCharacteristics", new TransactionalItemType())}")">
</PageTitleComponent>

<div id="add-recipe">
    <div class="flex-verical-center-new">
        @foreach (var characteristic in transactionalItemCharacteristicPairs)
        {
            <div class="grid-columns-2 box-shadow-mode">
                <div>
                    <label class="info-text-size">
                        @GetName( "ItemCharacteristics", new TransactionalItem())
                    </label>
                </div>
                <div>
                    <div style="position:relative;">
                        <InputTextSelector @ref="ReferInputTextSelector"
                                       Id="ItemCharacteristics"
                                       caption="@(characteristic.TransactionalItemCharacteristic != null ? characteristic.TransactionalItemCharacteristic.Name : "")"
                                       EventSearcherValueAndId="EventSearcherValueAndId"
                                       EventIdSelectionAndId="EventIdSelectionAndId"
                                       ParamCountResul="ParamCountResul"
                                       ViewSelect="ViewPopupCount"
                                       EventClosed="ClosedInput">
                            @{
                                if (transactionalItemTypeCharacteristics != null)
                                {
                                    foreach (var Obj in transactionalItemTypeCharacteristics)
                                    {
                                        <option value="@Obj.Name">@Obj.Name</option>
                                    }
                                }
                            }
                        </InputTextSelector>
                    </div>
                </div>
                <div>  <label class="info-text-size"> @GetName("Value", new TransactionalItemCharacteristicPair()) </label></div>
                <div>
                    <select @bind="characteristic.Value" class="form-control info-text-size">
                        @foreach (var item in GetPosibleValues(characteristic.TransactionalItemCharacteristic.Id))
                        {
                            <option value="@item.Name">@item.Name</option>
                        }
                    </select>
                </div>

            </div>
        }
        <div class="grid-columns-2 ">
            <div>
            </div>
            <div class="flex-horizontal-end">
                <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
                <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string transactionalItemId { get; set; }
    public List<TransactionalItemCharacteristicPair> transactionalItemCharacteristicPairs = new();
    public TransactionalItemCharacteristicPair transactionalItemCharacteristicPair = new();
    List<TransactionalItemTypeCharacteristic> transactionalItemTypeCharacteristics = new();
    TransactionalItemTypeCharacteristic transactionalItemTypeCharacteristic = new();
    InputTextSelector? ReferInputTextSelector;
    public List<TransactionalItemCharacteristic> possibleValues = new();
    bool viewMsg = false;
    string msg = "";
    int status = 0;
    public int ParamCountResul = 0;
    bool ViewPopupCount = false;
    string ModeSearcher = "";


    #region TileName
    public string Title { get; set; }

    public string Value { get; set; }
    #endregion TitleName

    protected async override void OnInitialized()
    {
        
        var transactionalItems = await transactionalService.GetTransactionalItemById(transactionalItemId);
        transactionalItemTypeCharacteristics = new();
        if (transactionalItems != null)
        {
            ConceptType type = transactionalItems.TypeOfConcept != null ? transactionalItems.TypeOfConcept : null;
            if (type != null)
            {
                var itemTypes = await transactionalService.GetTransactionalItemTypes(type.Name);
                var resul = itemTypes.Where(s => s.Id == type.Id).FirstOrDefault();
                if (resul != null)
                {
                    transactionalItemTypeCharacteristics = resul.TransactionalItemTypeCharacteristics != null ? resul.TransactionalItemTypeCharacteristics : new();
                    foreach (var characteristic in transactionalItemTypeCharacteristics)
                    {
                        if (characteristic.Name != "" && characteristic.Name != null)
                        {
                            transactionalItemCharacteristicPairs.Add(new TransactionalItemCharacteristicPair
                                {
                                    TransactionalItemCharacteristic = characteristic,
                                    Value = ""
                                });
                        }

                    }
                }

            }
        }
        StateHasChanged();



    }

    private async void Save()
    {
        string Msg = "";
        int count = 0;
        foreach (var characteristic in transactionalItemCharacteristicPairs)
        {
            if (characteristic.Value != null && characteristic.Value != "")
            {
                var resul = await transactionalService.SaveCharacteristics(transactionalItemId, characteristic);
                if (resul)
                {
                    count++;
                }
            }
        }
        if (count > 0) MsgOpen("saved : " + count + " of " + transactionalItemCharacteristicPairs.Count(), 1);
        if (count <= 0) MsgOpen("No saved", 1);

        StateHasChanged();

    }

    public async Task Refresh()
    {
        //ReferInputTextSelector.Refresh();
        StateHasChanged();
    }

    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo($"/TransactionalItemCard/{transactionalItemId}");
    }


    public List<TransactionalItemCharacteristic> GetPosibleValues(string Id)
    {
        if (transactionalItemTypeCharacteristics != null)
        {
            var characteristic = transactionalItemTypeCharacteristics.Where(s => s.Id != null && s.Id.Trim() == Id.Trim()).FirstOrDefault();
            if (characteristic != null) return possibleValues = characteristic.PossibleValues != null ? characteristic.PossibleValues : new();
            return new List<TransactionalItemCharacteristic>();
            StateHasChanged();
        }
        else
        {
            return new List<TransactionalItemCharacteristic>();
        }
    }

    protected async void EventIdSelectionAndId((string value, string selectionId) arg)
    {
        //transactionalItemTypeCharacteristics = await transactionalService.GetTransactionalItemDetailsQualityParameters();
        transactionalItemTypeCharacteristic = transactionalItemTypeCharacteristics.Where(c => c.Id == arg.value).FirstOrDefault();
        if (transactionalItemTypeCharacteristic == null) transactionalItemTypeCharacteristic = new();
        ParamCountResul = 0;
        ViewPopupCount = false;

        await Refresh();
    }

    protected async void EventSearcherValueAndId((string value, string selectionId) arg)
    {
        ViewPopupCount = true;

        if (arg.selectionId == "TransactionalItemTypeCharacteristic")
        {

            if (transactionalItemTypeCharacteristics != null)
            {
                if (!arg.selectionId.ToLower().Contains("all") && !arg.selectionId.ToLower().Contains("todo"))
                    transactionalItemTypeCharacteristics = transactionalItemTypeCharacteristics.Where(s => s.Name.ToLower().Contains(arg.selectionId.ToLower())).ToList();
                if (!arg.selectionId.ToLower().Contains("all") && !arg.selectionId.ToLower().Contains("todo"))
                    transactionalItemTypeCharacteristics = transactionalItemTypeCharacteristics;

                ParamCountResul = transactionalItemTypeCharacteristics.Count();
                ViewPopupCount = ParamCountResul > 0;
            }
            else
            {
                ViewPopupCount = false;
                ParamCountResul = 0;
            }
        }
        await Refresh();
    }


    public void ClosedInput()
    {
        ViewPopupCount = false;
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void MsgOpen(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }
}
