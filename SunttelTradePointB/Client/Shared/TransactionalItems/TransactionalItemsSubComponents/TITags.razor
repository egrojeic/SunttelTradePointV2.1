@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@inject ContextMenuService ContextMenuService
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Tags</h3>
    <svg @onclick="@OpenAdd" title="Add new tag" style="margin-left:20px;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
</div>


@if (isLoading)
{

    <WaitingProcessIndicator loadingTopic="Transactional Items"></WaitingProcessIndicator>

}
else
{
    @if (TransactionalItemTags != null)
    {
        <RadzenDataGrid AllowFiltering="true"
                Data="@TransactionalItemTags"
                TItem="TransactionalItemTag"
                AllowColumnResize="true"
                AllowAlternatingRows="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true"
                PageSize="4"
                AllowPaging="true"
                PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                ShowPagingSummary="true"
                ColumnWidth="300px"
                SelectionMode="DataGridSelectionMode.Single"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                CellContextMenu="@ShowContextMenuWithContent"
                PageNumbersCount="100">

            <Columns>
                <RadzenDataGridColumn TItem="TransactionalItem" Property="Key" Title="@Key" Frozen="false" Width="80px" />
                <RadzenDataGridColumn TItem="TransactionalItem" Property="Value" Filterable="true" Title="@Value" Frozen="false" Width="180px" TextAlign="Radzen.TextAlign.Center" />

            </Columns>
        </RadzenDataGrid>
    }
}



@code {
    [Parameter]
    public string IdTransactionalItem { get; set; }
    List<TransactionalItemTag> TransactionalItemTags = new List<TransactionalItemTag>();
    SfGrid<TransactionalItemTag>? DataGrid;
    #region TileName
    public string Key { get; set; }
    public string Value { get; set; }
    #endregion TitleName

    bool isLoading = false;

    protected async override void OnInitialized()
    {
        isLoading = true;
        InitializedUICommonFunctions();
        if (IdTransactionalItem != null)
        {
            TransactionalItemTags = await transactionalService.GetSelectorListTag(IdTransactionalItem);
            isLoading = false;
            StateHasChanged();
        }


    }

    public async void InitializedUICommonFunctions()
    {
        Key = UICommonFunctions.GetDisplayName(new PackingSpecs(), "Key");
        Value = UICommonFunctions.GetDisplayName(new PackingSpecs(), "Value");
        StateHasChanged();
    }



    #region Grid
    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItemTag> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItemTag argObj = (TransactionalItemTag)args.Value;


        if (argObj != null && argObj.Id != null)
        {
            Navigation.NavigateTo($"/TagCard/TransactionalItemCard/{IdTransactionalItem}/{argObj.Id}");
        }
    }

    #endregion Grid


    public void OpenAdd()
    {
        Navigation.NavigateTo($"/TagCard/TransactionalItemCard/{IdTransactionalItem}");
    }













}



