@using SunttelTradePointB.Client.Shared.TransactionalItems
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids

@inject ContextMenuService ContextMenuServices
@inject NavigationManager Navigation
@inject TransactionalItemsService transactionalService;

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>


<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Quality Requirements</h3>
    <svg @onclick='()=>ViewNewQualityPair($"/QualityParametersCard/TransactionalItemCard/{IdTransactionalItem}")' xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style img-ico-list" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
    </svg>
    <img class="img-ico-list" src="/images/desploy.png" @onclick='()=>ViewNewQualityPair($"QualityParametersCardAll/{IdTransactionalItem}")' />

</div>


<div class="row">
    <div class="grid-width">
        @if (isLoading)
        {

            <WaitingProcessIndicator loadingTopic="TransactionalItem Quality Items"></WaitingProcessIndicator>

        }
        else
        {
            @if (qualityParameters != null)
            {
                <RadzenDataGrid AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowAlternatingRows="true"
                        FilterMode="FilterMode.Advanced"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowSorting="true"
                        AllowPaging="true"
                        PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        Data="@qualityParameters"
                        PageSize="50"
                        TItem="TransactionalItemQualityPair"
                        SelectionMode="DataGridSelectionMode.Single"
                        LogicalFilterOperator="LogicalFilterOperator.Or"
                        CellContextMenu="@ShowContextMenuWithContent"
                        PageNumbersCount="100">

                    <Columns>
                        <RadzenDataGridColumn TItem="TransactionalItemQualityPair" Property="TransactionalItemQualityPair.TransactionalItemQuality.Name" Title="@GetName( "TransactionalItemQuality", new TransactionalItemQualityPair())" />
                        <RadzenDataGridColumn TItem="TransactionalItemQualityPair" Property="TransactionalItemQualityPair.Value" Title="@GetName( "Value", new TransactionalItemQualityPair())" FormatString="{0:N2}" TextAlign="Radzen.TextAlign.Right" />

                    </Columns>
                </RadzenDataGrid>
                  <div class="container-total">
                    <div class="item">
                        <label>
                            @(
                                $"Records: {qualityParameters.Count}"
                                )
                        </label>
                    </div>
                </div>

            }
        }
    </div>
</div>


@code {
    List<TransactionalItemQualityPair> qualityParameters { get; set; }

    [Parameter]
    public string IdTransactionalItem { get; set; }
    bool isLoading = false;

    #region TileName
    public string Title { get; set; }
    public string Name { get; set; }
    public string Value { get; set; }
    #endregion TitleName

    protected override void OnInitialized()
    {
        isLoading = true;
        InitializedUICommonFunctions();

        InitializedQualityParameters();

    }

    protected async void InitializedQualityParameters()
    {
        if (IdTransactionalItem != null)
        {
            qualityParameters = await transactionalService.GetTransactionalItemDetailsQualityParameters(IdTransactionalItem);

            StateHasChanged();
        }
        if (qualityParameters == null) qualityParameters = new();
        isLoading = false;
        StateHasChanged();
    }

    public async void InitializedUICommonFunctions()
    {
        Title = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItem(), "QualityParameters"));
        Name = ValidateName(UICommonFunctions.GetDisplayName(new AtomConcept(), "Name"));
        Value = ValidateName(UICommonFunctions.GetDisplayName(new TransactionalItemQualityPair(), "Value"));
        StateHasChanged();
    }

    private string ValidateName(string? Name)
    {
        return Name != null ? Name : "-";
    }

    public void ViewNewQualityPair(string value)
    {
        Navigation.NavigateTo(value);

    }

    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<TransactionalItemQualityPair> args) => ContextMenuServices.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        TransactionalItemQualityPair argObj = (TransactionalItemQualityPair)args.Value;


        if (argObj != null)
        {

            Navigation.NavigateTo($"/QualityParametersCard/TransactionalItemCard/{IdTransactionalItem}/{argObj.Id}");

        }
    }


    #endregion Grid



    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

}
