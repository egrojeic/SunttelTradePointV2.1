@page "/ImageCard"
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Formats.Jpeg;
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@using Microsoft.AspNetCore.Http
@using System.IO
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation
@inject IJSRuntime JS

@using Microsoft.AspNetCore.Http
@using System.Threading;
@using System.Net.Http.Headers


@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}
<PageTitleComponent Title="@Title"
                    Description="Here you can add image">
</PageTitleComponent>


<div class="flex-horizontal-center">
    <div class="conten-new-imge">
        <div>
            <table style="width:300px; border-collapse:collapse; ">
                <tr>
                    <td><h5>@Name</h5></td>
                    <td rowspan="3">
                        <div>
                            <img src="@imgUrl" style="height:120px; width:180px; border-radius:10px 10px 0px 0px; margin-left:5px;" @ref="previewImageElem" /><br />
                            <div class="btn color-btn width">
                                <label for="file-input">
                                    <div><p> Choose your file </p></div>
                                </label>
                                <InputFile id="file-input" @ref="inputFile" OnChange="@LoadFiles" class="btn color-btn" style="color:transparent;width:180px; border-radius:0px 0px 10px 10px; display:none;" />
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td rowspan="2">
                        <textarea style="width:350px; height:150px; resize: none;" cols="13" placeholder="Edit description" @bind="transactItemImage.Name">
                        </textarea>
                    </td>
                </tr>
                <tr><td><br /><br /></td></tr>
                <tr>
                    <td colspan="2">
                        <div style="display:flex; flex-direction:row; align-items:center; justify-content:center; margin-right:10px;"><label style="width:120px;">@PathImage</label><input value="@transactItemImage.PathImage" class="form-control" readonly /> </div>

                    </td>

                </tr>
            </table>
        </div>
        <br />
        <div class="flex-horizontal-end">
            <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
            <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<TransactItemImage> EventCallbackSave { get; set; }
    private InputFile? inputFile;

    private ElementReference previewImageElem;
    TransactItemImage transactItemImage = new TransactItemImage();
    string imgUrl = "/images/defaultImage.png";
    string imgId = "";
    public bool PopupViewDialog = false;
    string urlImageStorage = "";
    public string transactionalItemId { get; set; }

    public MultipartFormDataContent fileUpload { get; set; }
    public enum UploadingFileType
    {
        TransactionalItemImage,
        EntityImage
    }
    #region TileName
    public string Title { get; set; }
    public string Name { get; set; }
    public string PathImage { get; set; }

    public string msg = "";
    public bool viewMsg = false;

    #endregion TitleName

    protected override void OnInitialized()
    {
        InitializedUICommonFunctions();
        if (transactionalService?.transactionalItemId != null && transactionalService?.transactionalItemId != "")
        {
            transactionalItemId = transactionalService?.transactionalItemId;
        }
    }

    public async void InitializedUICommonFunctions()
    {
        Title = UICommonFunctions.GetDisplayName(new TransactionalItem(), "PathImages");
        Name = UICommonFunctions.GetDisplayName(new TransactItemImage(), "Name");
        PathImage = UICommonFunctions.GetDisplayName(new TransactItemImage(), "PathImage");


        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    public void Closed(string value)
    {
        if (value == "control") Navigation.NavigateTo("/TransactionalItemCard/3");
        Refresh();
    }

    public async void Save()
    {

        if (fileUpload !=null) {
            var resulFile = await transactionalService.UploadFiles(fileUpload);

            if (resulFile != "")
            {
                await transactionalService.SaveImage(transactionalItemId, transactItemImage);
                transactItemImage = new TransactItemImage();
                Msg("Saved");
            }
            else
            {
                Msg("No saved");
            }
        }
        else
        {
            Msg("No saved img required");
        }
      
        imgUrl = "/images/defaultImage.png";
        Refresh();
      
    }



    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var maxFiles = 1;
        var format = "img/png";

        foreach (var imagefile in e.GetMultipleFiles())
        {

            var resizeFile = await imagefile.RequestImageFileAsync(format, 400, 400);
            var bufer = new byte[resizeFile.Size];

            await resizeFile.OpenReadStream().ReadAsync(bufer);

            var img = $"data:{format};base64,{Convert.ToBase64String(bufer)}";
            imgUrl = img;

            var file = e.File;
            string fileName = Guid.NewGuid().ToString();
            transactItemImage.PathImage = fileName+".png";

            var resizedFile = await file.RequestImageFileAsync("image/png", 300, 500);
            // Convert the image to a byte array
            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {

                // Upload the image to the server using HttpClient
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "photo", file.Name);
                content.Add(new StringContent("0"), "uploadingFileType");
                content.Add(new StringContent(fileName), "photoName");


                await transactionalService.UploadFiles(content);
                fileUpload = content;

            }


            bufer = null;
            Refresh();


        }

    }

    private void Msg(bool mode)
    {
        msg = mode ? "Saved" : "No saved";
        viewMsg = true;
    }
    private void Msg(string? Msg)
    {
        msg = Msg;
        viewMsg = true;
    }



}


