@page "/ProductModelCard"
@page "/ProductModelCard/{Mode}"

@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation




@if (@viewMsg)
{
    <MessageSaveComponent isVisible="viewMsg" message="@msg">
    </MessageSaveComponent>
}

<PageTitleComponent Title="@GetName("ModelRecipe", new PackingSpecs())" IconName="recipeModel.png"
                    Description="Here you can add tags">
</PageTitleComponent>



<div class="flex-horizontal-center">
    <div class="grid-columns-2  box-shadow-mode">
        <div><label>@GetName("Name",new AtomConcept())</label></div>
        <div><input @bind-value="productModel.Name" class="form-control" placeholder="Edit value" /></div>
        <div>
            <label>@GetName("Code",new AtomConcept())</label>
        </div>
        <div><input @bind-value="productModel.Code" class="form-control" placeholder="Edit value" /></div>
        <div>
            <label>@GetName("Description",new ProductModel())</label>
        </div>
        <div><input @bind-value="productModel.Description" class="form-control" placeholder="Edit value" /></div>
        <div>
            <label>@GetName("Notes",new AtomConcept())</label>
        </div>
        <div><input @bind-value="productModel.Notes" class="form-control" placeholder="Edit value" /></div>
        <div></div>
        <div class="flex-horizontal-end">
            <button @onclick='()=>Closed("control")' class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
            <button @onclick="Save" class="size-btn color-btn"><i class="fa-regular fa-floppy-disk color-hover "></i></button>
        </div>
    </div>

</div>




@code {
    [Parameter]
    public string Mode { get; set; } = "Add";
    string transactionalItemId = "";
    ProductModel productModel = new();
    bool viewMsg = false;
    string msg = "";
    int status = 0;

    protected override Task OnInitializedAsync()
    {
        if (transactionalService?.transactionalItemId != null && transactionalService?.transactionalItemId != "")
        {
            transactionalItemId = transactionalService.transactionalItemId;
        }

        if (Mode == "Edit")
        {
            if (transactionalService.ConceptProductModel != null)
            {
                productModel = transactionalService.ConceptProductModel;
            }
            else
            {
                Closed("Control");
            }
        }

        if (Mode == "Add")
        {

        }

        return base.OnInitializedAsync();
    }


    public async void Save()
    {
        if (productModel.Name != null)
        {
            var resul = await transactionalService.SaveTransactionalItemModels(transactionalItemId, productModel);
            if (resul)
            {
                Msg("Saved", 1);
            }
            else
            {
                Msg("No saved", 1);
            }
            StateHasChanged();
        }

    }



    public async Task Closed(string Element)
    {
        if (Element == "control") Navigation.NavigateTo($"/TransactionalItemCard/{transactionalItemId}");
       
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    void Msg(string _msg, int _status)
    {
        viewMsg = true;
        msg = _msg;
        status = _status;
    }
}
