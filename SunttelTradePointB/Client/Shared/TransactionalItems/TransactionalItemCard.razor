@page "/TransactionalItemCard"
@page "/TransactionalItemCard/{transactionalItemId}"
@page "/TransactionalItemCard/{filter}/{transactionalItemId}"
@using SunttelTradePointB.Client.Shared.ConceptSelectors
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntitySubComponents
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection;
@inject IJSRuntime Js
@inject IEntityNodes actorsNodeServive;
@inject ITransactionalItemsService transactionalService;
@inject NavigationManager Navigation


<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

@if (@AlertOpen)
{
    <MessageSaveComponent isVisible="AlertOpen" message="@msg">
    </MessageSaveComponent>
}


<form>
    <div class="panelMenuContainer" style="max-width:95%;">
        <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

        <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                @if (transactionalItemId != null)
                {
                    <DropDownMenuItem Text="Print" IconCss="e-menu-icon e-menu-icon fa-solid fa-print"></DropDownMenuItem>
                }
                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
            </DropDownMenuItems>

        </SfSplitButton>


        <SfSplitButton Content="Related Concepts" IconCss="e-icons e-user-defined" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected_1">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Id="TypesTransactionalItems" Text="Types" IconCss="fa-solid fa-sitemap"></DropDownMenuItem>
                <DropDownMenuItem Id="Groups" Text="Groups" IconCss="fa-solid fa-group-arrows-rotate"></DropDownMenuItem>
                <DropDownMenuItem Id="Boxes" Text="Box Types" IconCss="fa-solid fa-box"></DropDownMenuItem>
                <DropDownMenuItem Id="SeasonsGeneral" Text="Seasons" IconCss="fa-solid fa-tree"></DropDownMenuItem>
                <DropDownMenuItem Id="Status" Text="Status" IconCss="fa-solid fa-signal"></DropDownMenuItem>
                <DropDownMenuItem Id="LabelStyles" Text="Label Styles" IconCss="fa-solid fa-palette"></DropDownMenuItem>
                <DropDownMenuItem Id="Duties" Text="Duties" IconCss="fa-solid fa-comments-dollar"></DropDownMenuItem>
                <DropDownMenuItem Id="PaperConcept/TransactionalItemCard/Add" Text="Paper" IconCss="fa-sharp fa-solid fa-circle-plus"></DropDownMenuItem>
                <DropDownMenuItem Id="ItemAssemblyType/TransactionalItemCard/Add" Text="Assembly Type" IconCss="fa-sharp fa-solid fa-circle-plus"></DropDownMenuItem>
            </DropDownMenuItems>

        </SfSplitButton>

    </div>



    @if (currentItem == null) currentItem = new();
    @*id="identificationGroup"*@

    <div class="grid-columns-2-img">
        <div class="grid-columns-header">
            <div>
                <label class="info-text-size" for="name">Name</label>
            </div>
            <div>
                <input type="text" class="form-control info-text-size" id="name" @bind-value="@currentItem.Name" autocomplete="off" />
            </div>

            <div id="shortCutCodeGroup">
                <label class="info-text-size" for="shortcutCode">Identifier Code</label>
            </div>
            <div>
                <input type="text" class="form-control info-text-size" @bind="currentItem.Code" autocomplete="off" />
            </div>
            <div><label class="info-text-size" for="shortcutCode">@GetName("Status", new Concept())</label></div>
            <div @onclick="SetStatus">
                <label id="statusConcept" class="style-status info-text-size" style="background-color:@colorStatus;">
                    @(currentItem.Status != null ? currentItem.Status?.Name : "")
                </label>
            </div>
            <div id="shortCutCodeGroup">
                <label for="shortcutCode" class="info-text-size">@GetName("ReferenceCost", new TransactionalItem())</label>
            </div>
            <div>
                <input type="number" class="form-control info-text-size" @bind="currentItem.ReferenceCost" autocomplete="off" />
            </div>
            <div><label class="info-text-size">@GetName("TypeOfConcept", new Concept())</label></div>
            <div>
                <InputTextSelector3 TItem="ConceptType"
                                    caption="@(currentItem.TypeOfConcept != null ? currentItem.TypeOfConcept.Name : "")"
                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                    EventIdSelectionAndId="SelectionMade"
                                    Id="TypeOfConcept"
                                    Items="typeOfConcepts">

                </InputTextSelector3>
            </div>

            <div class="lineFormGroup">
                <TransactionalItemGroupSelector PopupViewAddGroup="@PopupViewAddGroup" @ref="referGroup" Groups="@currentItem.Groups" EventAddGroups="AddGroup" EventChanged="OnParametersSet"></TransactionalItemGroupSelector>
            </div>
        </div>
        <div>
            <label for="shortcutCode">@GetName("SkinImageName", new Concept())</label>
            <br />
            <div class="lineFormGroup" style="position:relative;">
                <div class="form-group">
                    <div style="display:flex; flex-direction:row;">
                        <div class="conten-chip margin-left-control">
                            <InputTextSelector3 TItem="TransactItemImage"
                                                captionOff="true"
                                                EventSearcherValueAndId="EventSearcherValueAndId"
                                                EventIdSelectionAndId="SelectionMade"
                                                Visible="PopupViewAddImg"
                                                style="left:-100px;"
                                                EventClosed="EventClosed"
                                                Id="SkinImageName"
                                                Items="transactItemImages">

                            </InputTextSelector3>
                        </div>
                        <div>
                            <img class="style-img" src="@(currentItem.SkinImageName !=null && currentItem.SkinImageName !="." ?transactionalService.Host+currentItem.SkinImageName:"/images/defaultImage.png")" @onclick='()=> SetViewElemnt()' />
                        </div>

                    </div>

                </div>
            </div>
        </div>


    </div>

    <hr />
    <div class="detailsContainer">
        <div class="menuOptions">
            <nav class="navVerticalOptions">
                <ul>
                    <li class="@StyleClassItem(0)" @onclick="@(()=>SetMenuOption(0))">Packing Recipe<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(1)" @onclick="@(()=>SetMenuOption(1))">Production Specs<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(2)" @onclick="@(()=>SetMenuOption(2))">Quality Parameters<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(3)" @onclick="@(()=>SetMenuOption(3))">Images<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(4)" @onclick="@(()=>SetMenuOption(4))">Tags<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(5)" @onclick="@(()=>SetMenuOption(5))">Characteristics<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(6)" @onclick="@(()=>SetMenuOption(6))">Models<span class="arrowhead"></span></li>

                </ul>
            </nav>
        </div>
        <div class="workArea">
            @{
                if (currentItem != null && currentItem.Id != null)
                {
                    @switch (verticalMenuOptionSelected)
                    {
                        case 0:
                            <TIPackingRecipe IdTransactionalItem="@transactionalItemId" />
                            break;

                        case 1:
                            <TIProductionSpecs IdTransactionalItem="@transactionalItemId" />
                            break;

                        case 2:
                            <TIQualityParameters IdTransactionalItem="@transactionalItemId" />
                            break;

                        case 3:
                            <TIImages transactionalItemId="@transactionalItemId" />
                            break;

                        case 4:
                            <TITags IdTransactionalItem="@transactionalItemId" />

                            break;
                        case 5:
                            <TICharacteristic IdTransactionalItem="@transactionalItemId" />
                            break;
                        case 6:
                            <TIProductModel IdTransactionalItem="@transactionalItemId" />
                            break;
                        default:
                            <TIPackingRecipe IdTransactionalItem="@transactionalItemId" />
                            break;
                    }
                }
            }

        </div>
    </div>
</form>




@code {
    [Parameter]
    public string Page { get; set; } = "0";
    [Parameter]
    public string filter { get; set; }
    [Parameter]
    public string transactionalItemId { get; set; }
    public string hostPrint { get; set; } = "https://localhost:7166/";

    public string msg = "";
    public string backgroundColor = "";
    public int status = 0;
    public bool AlertOpen = false;
    bool modeStatus = false;
    bool requiereSave = false;
    bool PopupViewAddGroup = false;
    Alert? referAlert;

    InputTextSelector2a<ConceptType> conceptType;
    InputTextSelector? inputTextSelectorImg;

    public TransactionalItem? currentItem = new TransactionalItem();
    List<ConceptType> typeOfConcepts = new();
    List<TransactItemImage> transactItemImages = new();
    TransactionalItemGroupSelector? referGroup;

    int verticalMenuOptionSelected = 0;


    public string nameTemp { get; set; }
    string colorStatus = "gray", SearcherValueMode = "";
    bool PopupViewAddImg = false;


    protected override void OnParametersSet()
    {
        LoadObj();
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        if (transactionalItemId != null)
        {
            currentItem = await transactionalService.GetTransactionalItemById(transactionalItemId);
            LoadObj();
            if (currentItem != null)
            {
                nameTemp = currentItem.Name;
                LoadObj();
                StateHasChanged();
            }
            else
            {
                Home();
            }
        }
        else
        {
            LoadObj();
            SetStatus();
            StateHasChanged();

        }

        int PageMode = Convert.ToInt32((Page != null ? Page : "0"));
        SetMenuOption(PageMode);


    }

    protected void LoadObj()
    {
        if (currentItem == null) currentItem = new();
        if (currentItem.ProductionSpecs == null) currentItem.ProductionSpecs = new();
        if (currentItem.Groups == null) currentItem.Groups = new();
        if (currentItem.ItemCharacteristics == null) currentItem.ItemCharacteristics = new();
        if (currentItem.SkinImageName == null) currentItem.SkinImageName = ".";
        if (currentItem.ItemCatalog == null) currentItem.ItemCatalog = new CatalogItem();
        if (currentItem.ItemCharacteristics == null) currentItem.ItemCharacteristics = new List<TransactionalItemCharacteristicPair>();
        if (currentItem.ProductPackingSpecs == null) currentItem.ProductPackingSpecs = new List<PackingSpecs>();
        if (currentItem.ProductionSpecs == null) currentItem.ProductionSpecs = new List<TransactionalItemProcessStep>();
        if (currentItem.PathImages == null) currentItem.PathImages = new List<TransactItemImage>();
        if (currentItem.PriceOverridenByPriceList == null) currentItem.PriceOverridenByPriceList = new PriceListTransactionalItems();
        if (currentItem.QualityParameters == null) currentItem.QualityParameters = new List<TransactionalItemQualityPair>();
        if (currentItem.TransactionalItemTags == null) currentItem.TransactionalItemTags = new List<TransactionalItemTag>();
        if (currentItem.TypeOfConcept == null) currentItem.TypeOfConcept = new();
        if (currentItem.Status == null) currentItem.Status = new();

    }

    public string StyleClassItem(int item)
    {
        return (verticalMenuOptionSelected == item ? "menu-item selected" : "menu-item");
    }

    public void SetMenuOption(int item)
    {
        verticalMenuOptionSelected = item;


    }

    public void AddGroup(List<ConceptGroup> conceptGroups)
    {
        if (currentItem.Groups == null) currentItem.Groups = new();
        currentItem.Groups = conceptGroups;
        OpenAlert("Added", 0);
        PopupViewAddGroup = false;
        StateHasChanged();
    }

    public async void ItemSelected(MenuEventArgs e)
    {
        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {
            TransactionalItem item = null;
            if (currentItem.Status != null) item = await transactionalService.SaveTransactionalItem(currentItem);


            bool resul = (item != null ? true : false);
            if (resul && currentItem.Status != null)
            {
                currentItem = item;
                transactionalItemId = item.Id;
            }

            if (currentItem.Status == null)
            {
                msg = "Required status";
            }
            else
            {
                msg = resul ? "save" : "no save";
            }
            AlertOpen = true;
        }
        if (tile == "Save as...")
        {

            var currentItemCopy = currentItem;
            currentItemCopy.Id = null;
            if (currentItemCopy.Name != nameTemp)
            {
                var item = await transactionalService.SaveTransactionalItem(currentItemCopy);
                bool resul = item != null ? true : false;
                OpenAlert((resul ? "saved as " + nameTemp : "no saved"), 0);
                currentItem.Name = nameTemp;
            }
            else
            {
                OpenAlert("no saved you need to add a different name", 1);


            }

        }
        if (tile == "Boxes")
        {
            Navigation.NavigateTo("/BoxeCard");
        }
        if (tile == "Seasons")
        {
            Navigation.NavigateTo("/SeasonBusinessCard");
        }

        if (tile == "Print")
        {
            string name = "Item";
            string skinImage = UIClientGlobalVariables.ActiveSquad != null ? UIClientGlobalVariables.ActiveSquad.SkinImage : "";
            Js.InvokeAsync<object>("open", $"{hostPrint}TransactionalItemReport/{name}?transactionalItemId={transactionalItemId}&SkinImage={skinImage}", "_blank");

        }

        if (referAlert != null) referAlert.Load();
        StateHasChanged();

    }

    public async void ItemSelected_1(MenuEventArgs e)
    {
        string tile = e.Item != null ? e.Item.Id : "";
        if (e.Item != null)
        {
            Js.InvokeAsync<object>("open", e.Item.Id, "_blank");
        }
    }

    #region ControlInput
    protected async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        if (arg.IdControl == "SkinImageName")
        {
            transactItemImages = new();
            transactItemImages = await transactionalService.GetTransactionalItemDetailsPathImages(transactionalItemId);
            if (transactItemImages != null && !arg.value.ToLower().Contains("all")) transactItemImages = currentItem.PathImages.Where(s => s.Name != null && s.Name.ToLower().Contains(arg.value.ToLower())).ToList();
            StateHasChanged();
        }

        if (arg.IdControl == "TypeOfConcept")
        {
            if (typeOfConcepts == null) typeOfConcepts = new();
            var data = await transactionalService.GetTransactionalItemTypes(arg.value);
            if (data != null)
            {
                foreach (var item in data)
                {
                    typeOfConcepts.Add(new ConceptType
                        {
                            Name = item.Name,
                            Notes = item.Notes,
                            Groups = item.Groups,
                            AuditRecord = item.AuditRecord,
                            HasChanged = item.HasChanged,
                            Code = item.Code,
                            Id = item.Id,
                            IsLoadingData = item.IsLoadingData,
                            IsSelected = item.IsSelected,

                        });
                }
            }
            StateHasChanged();
        }

    }

    public void SelectionMade(ConceptType arg)
    {
        this.currentItem.TypeOfConcept = arg;
        StateHasChanged();
    }
    public void SelectionMade(TransactItemImage arg)
    {
        this.currentItem.SkinImageName = arg.PathImage;
        StateHasChanged();
    }
    #endregion End ControlInput

    public void SetViewElemnt()
    {
        PopupViewAddImg = PopupViewAddImg = true;
    }

    public void EventClosed()
    {
        PopupViewAddImg = false;
    }

    public void ChangeEventInputControl()
    {
        conceptType.Refresh();
        ConceptType concept = new ConceptType();
        conceptType.referValue(ref concept);
        currentItem.TypeOfConcept = concept != null ? concept : currentItem.TypeOfConcept;
        StateHasChanged();

    }


    public void Home()
    {
        string paramFilter = filter != null ? filter : "";
        Navigation.NavigateTo($"/Products/{paramFilter}");
    }

    public void OpenAlert(string _msg, int _status)
    {

        AlertOpen = true;
        msg = _msg;
        status = _status;

    }

    public void SetStatus()
    {
        modeStatus = modeStatus ? false : true;

        ConceptStatus statust = new();

        if (modeStatus)
        {
            currentItem.Status = statust = new ConceptStatus
                {
                    Id = "000000000000000000000001",
                    LegacyId = "1",
                    Code = "name",
                    Name = "ACTIVE",
                    IsEnabledForTransactions = true
                };
            colorStatus = "#008080";
        }
        else
        {
            currentItem.Status = null;
            colorStatus = "gray";
        }

    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void RequiredSave(bool status)
    {
        requiereSave = status;
    }
}
