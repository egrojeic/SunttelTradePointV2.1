@page "/TransactionalItemCard"
@page "/TransactionalItemCard/{Page}/{Mode}"
@using SunttelTradePointB.Client.Shared.ConceptSelectors
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntitySubComponents
@using SunttelTradePointB.Client.Shared.TransactionalItems.TransactionalItemsSubComponents
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@inject ActorsNodeService actorsNodeServive;
@inject TransactionalItemsService transactionalService;
@inject NavigationManager Navigation


@if (@AlertOpen)
{
    <MessageSaveComponent isVisible="AlertOpen" message="@msg">
    </MessageSaveComponent>
}


<form>
    <div class="panelMenuContainer" style="max-width:95%;">
        <button @onclick="Home" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>
        
            <SfSplitButton Content="File" IconCss="fa-solid fa-folder-closed" CssClass="splitButtonsStyle">
                <SplitButtonEvents ItemSelected="ItemSelected">
                </SplitButtonEvents>
                <DropDownMenuItems>
                    <DropDownMenuItem Text="New" IconCss="fa-solid fa-file"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>
                </DropDownMenuItems>

            </SfSplitButton>
     

        <SfSplitButton Content="Related Concepts" IconCss="e-icons e-user-defined" CssClass="splitButtonsStyle">
            <SplitButtonEvents ItemSelected="ItemSelected">
            </SplitButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="Boxes" IconCss="fa-solid fa-cloud-arrow-up"></DropDownMenuItem>
                <DropDownMenuItem Text="Seasons" IconCss="fa-solid fa-file-csv"></DropDownMenuItem>
                <DropDownMenuItem Text="Types and Groups" IconCss="fa-solid fa-file-csv"></DropDownMenuItem>
            </DropDownMenuItems>

        </SfSplitButton>

    </div>



    @if (currentItem == null) currentItem = new();
    @*id="identificationGroup"*@

    <div class="grid-columns-2-img">
        <div class="grid-columns-header">
            <div>
                <label for="name">Name</label>
            </div>
            <div>
                <input type="text" class="form-control" id="name" @bind-value="@currentItem.Name" autocomplete="off" />
            </div>

            <div id="shortCutCodeGroup">
                <label for="shortcutCode">Identifier Code</label>
            </div>
            <div>
                <input type="text" class="form-control" @bind="currentItem.Code" autocomplete="off" />
            </div>
            <div><label for="shortcutCode">@GetName("Status", new Concept())</label></div>
            <div @onclick="SetStatus">
                <label id="statusConcept" class="style-status" style="background-color:@colorStatus;">@currentItemStatus</label>
            </div>
            <div id="shortCutCodeGroup">
                <label for="shortcutCode">@GetName("ReferenceCost", new TransactionalItem())</label>
            </div>
            <div>
                <input type="number" class="form-control" @bind="currentItem.ReferenceCost" autocomplete="off" />
            </div>           
            <div><label>@GetName("TypeOfConcept", new Concept())</label></div>
            <div>
                <div style="position:relative;">

                    <div class="item-edit">
                        <label>@(typeOfConcept != null ? typeOfConcept.Name : "")</label>
                        <button type="button" @onclick='()=>SetViewElemnt("TypeOfConcept")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                    </div>

                    <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventClosed="ClosedInputText" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewTypeProduct">
                        @{
                            if (typeOfConcepts != null)
                            {
                                foreach (var Box in typeOfConcepts)
                                {
                                    <option value="@Box?.Id">@Box?.Name</option>
                                }
                            }
                        }
                    </InputTextSelector>
                </div>
            </div>

            <div class="lineFormGroup">
                <TransactionalItemGroupSelector @ref="referGroup" Groups="@currentItem.Groups" EventAddGroups="AddGroup"></TransactionalItemGroupSelector>
            </div>
        </div>
        <div>
            <label for="shortcutCode">@GetName("SkinImageName", new Concept())</label>
            <br />
            <div class="lineFormGroup" style="position:relative;">
                <div class="form-group">
                    <div style="display:flex; flex-direction:row;">
                        <div class="conten-chip margin-left-control">
                            <InputTextSelector @ref="ReferInputTextSelector" EventSearcherValue="EventSearcherValue" EventClosed="ClosedInputText" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewAddImg">
                                @{
                                    if (transactItemImages != null)
                                    {
                                        foreach (var group in transactItemImages)
                                        {
                                            <option value="@group?.Id">@group?.Name</option>
                                        }
                                    }

                                }
                            </InputTextSelector>
                        </div>
                        <div>
                            @if (transactItemImages == null) transactItemImages = new List<TransactItemImage>();
                            <img class="style-img" src="@(transactItemImage.PathImage !=null?transactionalService.Host+transactItemImage.PathImage:"/images/defaultImage.png")" @onclick='()=> SetViewElemnt("img")' />
                        </div>


                    </div>

                </div>
            </div>
        </div>


    </div>

    <hr />
    <div class="detailsContainer">
        <div class="menuOptions">
            <nav class="navVerticalOptions">
                <ul>
                    <li class="@StyleClassItem(0)" @onclick="@(()=>SetMenuOption(0))">Packing Recipe<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(1)" @onclick="@(()=>SetMenuOption(1))">Production Specs<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(2)" @onclick="@(()=>SetMenuOption(2))">Quality Parameters<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(3)" @onclick="@(()=>SetMenuOption(3))">Images<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(4)" @onclick="@(()=>SetMenuOption(4))">Tags<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(5)" @onclick="@(()=>SetMenuOption(5))">Characteristics<span class="arrowhead"></span></li>
                    <li class="@StyleClassItem(6)" @onclick="@(()=>SetMenuOption(6))">Models<span class="arrowhead"></span></li>

                </ul>
            </nav>
        </div>
        <div class="workArea">
            @{
                if (currentItem != null && currentItem.Id != null)
                {
                    @switch (verticalMenuOptionSelected)
                    {
                        case 0:
                            <TIPackingRecipe />
                            break;

                        case 1:
                            <TIProductionSpecs />
                            break;

                        case 2:
                            <TIQualityParameters />
                            break;

                        case 3:
                            <TIImages />
                            break;

                        case 4:
                            <TITags />

                            break;
                        case 5:
                            <TICharacteristic />
                            break;
                        case 6:
                            <TIProductModel />
                            break;
                        default:
                            <TIPackingRecipe />
                            break;
                    }
                }
            }

        </div>
    </div>
</form>




@code {
    [Parameter]
    public string Page { get; set; } = "0";
    [Parameter]
    public string Mode { get; set; } = "Add";
    public string msg = "", backgroundColor = "";
    public int status = 0;
    public bool AlertOpen = false;
    bool modeStatus = false;
    bool requiereSave = false;
    Alert? referAlert;

    InputTextSelector? ReferInputTextSelector;


    public TransactionalItem? currentItem = new TransactionalItem();
    List<ConceptGroup> conceptGroups = new List<ConceptGroup>();
    List<PackingSpecs> productPackingSpecs = new();
    List<TransactionalItemProcessStep> productionSpecs = new();
    List<TransactItemImage> pathImages = new();
    List<TransactionalItemQualityPair> qualityParameters = new();
    List<TransactionalItemTag> transactionalItemTags = new();
    Concept typeOfConcept = new();
    List<Concept> typeOfConcepts = new();
    TransactItemImage transactItemImage = new();
    List<TransactItemImage> transactItemImages = new();
    TransactionalItemGroupSelector? referGroup;


    int verticalMenuOptionSelected = 0;
    int ParamCountResul = 0;
    public string transactionalItemId { get; set; }
    public string currentItemStatus { get; set; }
    public string nameTemp { get; set; }
    string colorStatus = "gray", SearcherValueMode = "";
    bool ViewSelect = false;
    bool PopupViewAddImg = false;
    bool PopupViewTypeProduct = false;

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (Mode == "Edit")
        {
            transactionalItemId = transactionalService.transactionalItemId != null ? transactionalService.transactionalItemId : "";
            currentItem = transactionalService.TransactionalItems;

            if (currentItem != null)
            {
                nameTemp = currentItem.Name;
                currentItemStatus = currentItem.Status != null ? currentItem.Status.Name : "";
            }
        }


        if (Mode == "Add" || currentItem == null)
        {
            transactionalService.transactionalItemId = null;
            currentItem = new();
            SetStatus();
        }

        int PageMode = Convert.ToInt32((Page != null ? Page : "0"));
        SetMenuOption(PageMode);
        SetStatus();
        StateHasChanged();

    }

    public string StyleClassItem(int item)
    {
        return (verticalMenuOptionSelected == item ? "menu-item selected" : "menu-item");
    }

    public void SetMenuOption(int item)
    {
        verticalMenuOptionSelected = item;


    }

    public void AddGroup(List<ConceptGroup> conceptGroups)
    {
        if (currentItem.Groups == null) currentItem.Groups = new();
        currentItem.Groups = conceptGroups;
        StateHasChanged();
        OpenAlert("Added", 0);
    }

    public async void ItemSelected(MenuEventArgs e)
    {


        StateHasChanged();
        string tile = e.Item != null ? e.Item.Text : "";
        if (tile == "Save")
        {
            if (currentItem.ItemCatalog == null) currentItem.ItemCatalog = new CatalogItem();
            if (currentItem.ItemCharacteristics == null) currentItem.ItemCharacteristics = new List<TransactionalItemCharacteristicPair>();
            if (currentItem.ProductPackingSpecs == null) currentItem.ProductPackingSpecs = new List<PackingSpecs>();
            if (currentItem.ProductionSpecs == null) currentItem.ProductionSpecs = new List<TransactionalItemProcessStep>();
            if (currentItem.PathImages == null) currentItem.PathImages = new List<TransactItemImage>();
            if (currentItem.PriceOverridenByPriceList == null) currentItem.PriceOverridenByPriceList = new PriceListTransactionalItems();
            if (currentItem.QualityParameters == null) currentItem.QualityParameters = new List<TransactionalItemQualityPair>();
            if (currentItem.TransactionalItemTags == null) currentItem.TransactionalItemTags = new List<TransactionalItemTag>();


            TransactionalItem item = await transactionalService.SaveTransactionalItem(currentItem);
            bool resul = (item != null ? true : false);
            if (resul)
            {
                currentItem = item;
                transactionalService.TransactionalItems = item;
                transactionalService.transactionalItemId = item.Id;
            }
            msg = resul ? "save" : "no save";
            AlertOpen = true;
        }
        if (tile == "Save as...")
        {
            currentItem.Groups = conceptGroups;
            var currentItemCopy = currentItem;
            currentItemCopy.Id = null;
            if (currentItemCopy.Name != nameTemp)
            {
                var item = await transactionalService.SaveTransactionalItem(currentItemCopy);
                bool resul = item != null ? true : false;
                OpenAlert((resul ? "saved as " + nameTemp : "no saved"), 0);
                currentItem.Name = nameTemp;
            }
            else
            {
                OpenAlert("no saved you need to add a different name", 1);


            }

        }
        if (tile == "Boxes")
        {
            Navigation.NavigateTo("/BoxeCard");
        }
        if (tile == "Seasons")
        {
            Navigation.NavigateTo("/SeasonBusinessCard");
        }

        if (referAlert != null) referAlert.Load();
        StateHasChanged();


    }



    protected async void EventSearcherValue(string value)
    {
        if (SearcherValueMode == "img")
        {
            transactItemImages = await transactionalService.GetTransactionalItemDetailsPathImages(transactionalItemId);
            if (transactItemImages == null) transactItemImages = new List<TransactItemImage>();

            transactItemImages = transactItemImages.Where(s => s.Name != null && s.Name.ToLower().Contains(value.ToLower())).ToList();
            ParamCountResul = transactItemImages != null ? transactItemImages.Count() : 0;
            ViewSelect = ParamCountResul > 0;
            if (ReferInputTextSelector != null) ReferInputTextSelector.Refresh();
            StateHasChanged();

        }

        if (SearcherValueMode == "TypeOfConcept")
        {
            if (typeOfConcepts == null) typeOfConcepts = new();
            var data = await transactionalService.GetTransactionalItemTypes(value);
            if (data != null)
            {
                foreach (var item in data)
                {
                    typeOfConcepts.Add(new Concept
                        {
                            Name = item.Name,
                            Notes = item.Notes,
                            Groups = item.Groups,
                            AuditRecord = item.AuditRecord,
                            HasChanged = item.HasChanged,
                            Code = item.Code,
                            Id = item.Id,
                            IsLoadingData = item.IsLoadingData,
                            IsSelected = item.IsSelected
                        });
                }
            }

            ParamCountResul = typeOfConcepts != null ? typeOfConcepts.Count() : 0;
            ViewSelect = ParamCountResul > 0;
            if (ReferInputTextSelector != null) ReferInputTextSelector.Refresh();
        }

    }


    protected async void EventIdSelectionInput(string selectionId)
    {

        if (SearcherValueMode == "img")
        {
            if (transactItemImages == null) transactItemImages = new();
            transactItemImage = transactItemImages.Where(c => c.Id == selectionId).FirstOrDefault();
            currentItem.SkinImageName = transactItemImage.Name;
            ViewSelect = false;
            PopupViewAddImg = false;

        }

        if (SearcherValueMode == "TypeOfConcept")
        {
            if (typeOfConcepts == null) typeOfConcepts = new();
            typeOfConcept = typeOfConcepts.Where(s => s.Id == selectionId).FirstOrDefault();
            if (typeOfConcepts == null) typeOfConcepts = new();
            ParamCountResul = typeOfConcepts != null ? typeOfConcepts.Count() : 0;
            ViewSelect = false;
            PopupViewTypeProduct = false;
        }

        if (ReferInputTextSelector != null) ReferInputTextSelector.Refresh();
        StateHasChanged();

    }

    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        SearcherValueMode = Element;
        if (Element == "img") { PopupViewAddImg = true; }
        if (Element == "TypeOfConcept") { PopupViewTypeProduct = true; }
        StateHasChanged();
    }


    public void Home()
    {
        Navigation.NavigateTo("/Products");
    }

    public void OpenAlert(string _msg, int _status)
    {

        AlertOpen = true;
        msg = _msg;
        status = _status;

    }

    public void SetStatus()
    {
        modeStatus = modeStatus ? false : true;

        ConceptStatus statust = new();
        if (modeStatus)
        {
            currentItem.Status = statust = new ConceptStatus
                {
                    Id = "000000000000000000000001",
                    LegacyId = "1",
                    Code = "name",
                    Name = "ACTIVE",
                    IsEnabledForTransactions = true
                };
            colorStatus = "#008080";
        }
        else
        {
            currentItem.Status = statust = new ConceptStatus
                {
                    Id = "",
                    LegacyId = "",
                    Code = "",
                    Name = "....",
                    IsEnabledForTransactions = false
                };
            colorStatus = "gary";
        }
        if (currentItem != null) currentItemStatus = currentItem.Status != null ? currentItem.Status.Name : "";
    }

    public void ClosedInputText()
    {
        PopupViewAddImg = false;
        ViewSelect = false;
        StateHasChanged();
    }

    public string GetName(string Name, Object Obj)
    {
        Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }

    public void RequiredSave(bool status)
    {
        requiereSave = status;
    }
}
