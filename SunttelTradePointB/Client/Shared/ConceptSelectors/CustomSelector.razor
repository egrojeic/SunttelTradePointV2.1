@using SunttelTradePointB.Shared.Common;
<!--
    Component intended to be used as a selector for a concept.
    This recieves a list of concepts and a concept id and displays the concept name.
-->
<div>
    <div class="item-edit">
        <label class="info-text-size">@(objectBinded != null ? objectBinded.Name : "")</label>
        <button type="button" @onclick='()=>ShowList()' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
    </div>


    <div class="component-input" style="@style; display:@(showListControl?"block":"none");  position:relative; width:278px;">
        <div style=" flex-direction:row; display:@(!showListControl?"flex":"none"); ">
            <input @bind="searchFilter" class="form-control info-text-size " autocomplete="on" />
            <img id="btn-img" src="images/search.svg" @onclick="Search" />
        </div>
        <div id="div-Popup">

            <select @onchange="SelectedItemChanged" class="info-text-size" style="display:@(showListControl?"block":"none");  background-color:@backgroundSelection; color:@colorSelection;  border-color:gray; ">
                <option value=""> select </option>
                @if (ChildContent != null)
                {
                    @ChildContent
                }
            </select>
            <div>
                <p class="info-text-size" style="background-color:@(ParamCountResul>0?"#8affa8":"orange"); display:@(ShowPopupCount?"block":"none");">@(ParamCountResul > 0 ? ParamCountResul : "searching")</p>
            </div>

        </div>
        <input type="button" value="✓" @onclick="SelectedItem" id="Success" />
        <input type="button" value="X" @onclick="Closed" id="Closed" />
    </div>


</div>

@code {
    [Parameter]
    public List<AtomConcept> bindingSourceList { get; set; }
    [Parameter]
    public AtomConcept objectBinded { get; set; }

    [Parameter]
    public string datasourceId { get; set; } = "";

    [Parameter]
    public EventCallback<string> EventSearch { get; set; }
    [Parameter]
    public EventCallback<string> EventIdSelection { get; set; }
    [Parameter]
    public EventCallback EventClosed { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback<string> objectBindedChanged { get; set; }


    [Parameter]
    public string style { get; set; } = "";

    [Parameter]
    public int? ParamCountResul { get; set; }

    [Parameter]
    public string id { get; set; } = "";
    
    [Parameter]
    public string name { get; set; } = "";


    public bool showListControl = false;

    public string? searchFilter { get; set; }

    bool ShowPopupCount = false;


    string valueSelection = "", backgroundSelection = "", colorSelection = "";

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();

    }

    public void ShowList()
    {
        showListControl = true;
    }

    private void SelectedItem()
    {
        if (valueSelection != "")
        {
            EventIdSelection.InvokeAsync(valueSelection);
            valueSelection = "";
            backgroundSelection = "";
            colorSelection = "";
            showListControl = false;
         
            StateHasChanged();
        }
    }


    public async void Search()
    {
       
        if (searchFilter != null && searchFilter != "")
        {
            await EventSearch.InvokeAsync(searchFilter);
        }
        else
        {
            await EventSearch.InvokeAsync("all");
        }
        backgroundSelection = "white";
        colorSelection = "black";

        StateHasChanged();
    }


     private void SelectedItemChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            valueSelection = e.Value.ToString();

        }
    }


    public void Closed()
    {      
        showListControl = false;
        backgroundSelection = "";
        colorSelection = "";
        EventClosed.InvokeAsync();
       
    }

}
