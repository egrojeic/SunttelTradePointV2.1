@page "/Actors/{Id}/Image"
@page "/Image/{Id}/{Page}"

@using System.IO
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Formats.Jpeg;
@using System.Threading;
@using Microsoft.AspNetCore.Http
@using System.Net.Http.Headers
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents

@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeService

<div class="control-section">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 container">
            <SfCard>
                <CardHeader Title="Add a new skin image" />
                <CardContent>
                    <form onsubmit="event.preventDefault();">                       
                        <div>
                            <img src="@imgUrl" style="height:120px; width:180px; border-radius:10px 10px 0px 0px; margin-left:5px;" @ref="previewImageElem" /><br />
                            <div class="btn color-btn width">
                                <label class="btn-file" for="file-input">
                                    <div><p> Choose your img </p></div>
                                </label>                              
                                <InputFile id="file-input" @ref="referInputFile" lang="en" OnChange="@LoadFile" accept="image/*" style="color:transparent;width:180px; border-radius:0px 0px 10px 10px; display:none;" />                               
                            </div>
                        </div>

                        <MessageSaveComponent message="Image saved" isVisible="visible"></MessageSaveComponent>

                        <div class="py-2">
                            <button type="submit" class="size-btn color-btn" style="float:right" @onclick="Save"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
                            <button type="button" class="btn" style="float:right" @onclick="GoBack"><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
                        </div>

                    </form>
                </CardContent>
            </SfCard>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public EventCallback<string> EventCallbackNameImg { get; set; }
    [Parameter]
    public EventCallback<string> EventCallbackOpenClosedPage { get; set; }
    [Parameter]
    public bool Component { get; set; } = false;
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Page { get; set; }


    public bool visible = false;

    private ElementReference previewImageElem;
    string imgUrl = "/images/defaultImage.png";

    InputFile? referInputFile;
    TransactItemImage itemImage = new TransactItemImage();
    private string entityImage { get; set; } = "";

    public MultipartFormDataContent fileUpload { get; set; }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var maxFiles = 1;
        var format = "img/png";

        foreach(var imagefile in e.GetMultipleFiles())
        {
            var resizeFile = await imagefile.RequestImageFileAsync(format, 400, 400);
            var bufer = new byte[resizeFile.Size];

            await resizeFile.OpenReadStream().ReadAsync(bufer);

            var img = $"data:{format};base64,{Convert.ToBase64String(bufer)}";
            imgUrl = img;

            var file = e.File;
            string fileName = Guid.NewGuid().ToString();
            entityImage = $"{fileName}.png";

            var resizedFile = await file.RequestImageFileAsync("image/png", 300, 300);

            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "photo", file.Name);
                content.Add(new StringContent("1"), "uploadingFileType");
                content.Add(new StringContent(entityImage), "photoName");

                var resul = await actorsNodeService.UploadFiles(content);
                fileUpload = content;
            }

            bufer = null;

            StateHasChanged();
        }
    }

    public async void Save()
    {

        if(fileUpload != null)
        {
            var resul = await actorsNodeService.UploadFiles(fileUpload);
            if (resul !=null && resul !="")
            {
                await actorsNodeService.SaveEntitySkinImage(Id, entityImage);
                if (Component == true) EventCallbackNameImg.InvokeAsync(entityImage+".png");
                entityImage = "";
            }          
         
        }
        imgUrl = "/images/defaultImage.png";
        StateHasChanged();
    }

    public void GoBack()
    {
        if (Component == false) navigationManager.NavigateTo($"/Actors/{Id}");
        if (Component == true) EventCallbackOpenClosedPage.InvokeAsync(Page);
    }










    public class FileUpload : IFormFile
    {
        public string ContentType { get; set; }

        public string ContentDisposition { get; set; }

        public IHeaderDictionary Headers { get; set; }

        public long Length { get; set; }

        public string Name { get; set; }

        public string FileName { get; set; }

        public void CopyTo(Stream target)
        {
            throw new NotImplementedException();
        }

        public Task CopyToAsync(Stream target, CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        public Stream OpenReadStream()
        {
            throw new NotImplementedException();
        }
    }


}
