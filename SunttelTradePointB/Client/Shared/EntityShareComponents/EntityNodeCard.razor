@page "/register/NewUser"
@page "/ActorCard/{Id}"
@page "/Actors/{Id}"
@page "/Actors/{Id}/{Page}"
@page "/Actors/NewActor"
@using SunttelTradePointB.Client.Shared.ConceptSelectors
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntitySubComponents
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents
@using System.Text;
@using System.Text.Json;
@using System.Net;
@using System.IO;

@inject IJSRuntime jsRuntime
@inject ActorsNodeService actorsNodeServive
@inject NavigationManager navigationManager
<MessageSaveComponent message="@message" isVisible="visible"></MessageSaveComponent>
@if (EntityNode != null)
{
    <form>

        <div class="panelMenuContainer">
            <button @onclick="NavigateToTable" class="size-btn color-btn"><i class="fa-sharp fa-solid fa-circle-arrow-left color-hover"></i></button>

            <SfSplitButton Content="Create new" IconCss="fa-sharp fa-solid fa-circle-plus" CssClass="splitButtonsStyle">
                <DropDownMenuItems>
                    <DropDownMenuItem Text="Customer" IconCss="fa-solid fa-people-arrows"></DropDownMenuItem>
                    <DropDownMenuItem Text="Provider" IconCss="fa-solid fa-arrow-up-from-ground-water"></DropDownMenuItem>
                    <DropDownMenuItem Text="Transporter" IconCss="fa-solid fa-truck-field"></DropDownMenuItem>
                    <DropDownMenuItem Text="Employee" IconCss="fa-solid fa-person-walking-luggage"></DropDownMenuItem>

                </DropDownMenuItems>

            </SfSplitButton>

            <SfSplitButton Content="File" IconCss="fa-solid fa-file" CssClass="splitButtonsStyle">
                <DropDownMenuItems>
                    <SplitButtonEvents ItemSelected="ItemSelected">

                    </SplitButtonEvents>
                    <DropDownMenuItem Text="Save" IconCss="fa-solid fa-floppy-disk"></DropDownMenuItem>
                    <DropDownMenuItem Text="Save as..." IconCss="e-icons e-save-as"></DropDownMenuItem>
                    <DropDownMenuItem Separator="true"></DropDownMenuItem>
                    <DropDownMenuItem Text="Inactivate..." IconCss="fa-solid fa-eject" style="color: red;"></DropDownMenuItem>

                </DropDownMenuItems>

            </SfSplitButton>

            <SfSplitButton Content="Related Concepts" IconCss="e-icons e-user-defined" CssClass="splitButtonsStyle">
                <DropDownMenuItems>
                    <SplitButtonEvents ItemSelected="ItemSelected">

                    </SplitButtonEvents>
                    <DropDownMenuItem Text="Entities Types" IconCss="fa-solid fa-group-arrows-rotate"></DropDownMenuItem>
                    <DropDownMenuItem Text="Groups" IconCss="fa-solid fa-layer-group"></DropDownMenuItem>
                    <DropDownMenuItem Text="Identification Types" IconCss="fa-solid fa-box"></DropDownMenuItem>
                    <DropDownMenuItem Text="Roles" IconCss="fa-solid fa-dice-d20"></DropDownMenuItem>
                    <DropDownMenuItem Text="Status" IconCss="fa-solid fa-signal"></DropDownMenuItem>
                    <DropDownMenuItem Text="Pallet Type" IconCss="fa-sharp fa-solid fa-palette"></DropDownMenuItem>

                </DropDownMenuItems>

            </SfSplitButton>
        </div>

        <div class="flex-content box-shadow-mode">

            <div class="grid-columns-2 vertical-position">
                <div class="grid-columns-2 width-form    ">
                    @if (EntityNode == null)
                    {
                        <div>
                            <label for="name">UserName*</label>
                        </div>
                        <div>
                            <input type="text" class="form-control" id="name" @bind-value="EntityNode.Name" />
                        </div>

                        <div>
                            <labe for="eMailAddress">Password*</labe>l
                        </div>
                        <div>
                            <input type="text" class="form-control" id="eMailAddress" @bind-value="EntityNode.EMailAddress" />
                        </div>

                        <div>
                            <label for="sunttelUserId">Confirm Password*</label>
                        </div>
                        <div>
                            <input type="text" class="form-control" id="sunttelUserId" @bind-value="EntityNode.SunttelUserId" />
                        </div>
                    }
                    <div>
                        <label for="name">@lblName*</label>
                    </div>
                    <div>
                        <input type="text" class="form-control" id="name" @bind-value="EntityNode.Name" />
                    </div>


                    <div>
                        <label>@lblEmail*</label>
                    </div>
                    <div>
                        <input type="text" class="form-control" @bind-value="EntityNode.EMailAddress" />
                    </div>
                    <div>
                        <label>@lblSquarUser*</label>
                    </div>
                    <div>
                        <input type="text" class="form-control" id="sunttelUserId" @bind-value="EntityNode.SunttelUserId" />
                    </div>
                    <div>
                        <label>@lblInvoicingAddress*</label>
                    </div>
                    <div>
                        <span>@(EntityNode != null ? EntityNode.InvoicingAddress : "")</span>
                        <span @onclick="(() => NavigateToInvocingAddress())" class="px-3">
                            <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0     8 8">
                                <path fill="currentColor" d="M6 0L5 1l2 2    l1-1l-2-2zM4 2L0 6v2h2l4-4l-2-2z" />
                            </svg>
                        </span>
                    </div>
                    <div id="shortCutCodeGroup">
                        <label for="shortcutCode">@lblShortcutCode*</label>
                    </div>
                    <div>
                        <input type="text" class="form-control" @bind-value="EntityNode.Code" />
                    </div>
              
                    <div><label for="sunttelUserId">@lblRole*</label></div>
                    <div>
                        <div class="item-edit">
                            <label>@(role != null ? role.Name : "")</label>
                            <button type="button" style="float:right" @onclick='()=>SetViewElement("Roles")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>
                        <InputTextSelector @ref="inputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectorInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" Visible="PopupViewRoles">
                            @{
                                if (entityRoles != null)
                                {
                                    foreach (var entity in entityRoles)
                                    {
                                        <option value="@entity?.Id">@entity?.Name</option>
                                    }
                                }

                            }
                        </InputTextSelector>
                    </div>


                </div>

                <div class="flex-horizontal-center-node ">

                    <div>
                        @if (Id != null)
                        {

                            <div class="img-ico">
                                <div class="col-sm">

                                    @*<img src="@(imageRute!=""? actorsNodeServive.Host+imageRute:"/avatar_male_man_person_user_icon.png")" alt="imagen" width="80px" height="90px">*@

                                    <img src="@(imageRute!=""? imageRute:"/avatar_male_man_person_user_icon.png")" alt="imagen" id="EntityImage">

                                </div>
                                <div class="col">
                                    <span @onclick="NavigateToImage">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0     8 8">
                                            <path fill="currentColor" d="M6 0L5 1l2 2    l1-1l-2-2zM4 2L0 6v2h2l4-4l-2-2z" />
                                        </svg>
                                    </span>
                                </div>
                            </div>

                        }
                    </div>

                    <div class="grid-columns-2  ">

                        <div>
                            <label for="ComercialGroup">@lblGroup*</label>
                        </div>
                        <div>
                            <button type="button" @onclick='() => SetViewElement("Group")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                        </div>
                        <div class="conten-chip">
                            <SfChip @ref="referChip" EnableDelete="true" CssClass="chip-style" EnableRtl="false">
                                <ChipEvents Deleted="@onDeleted"></ChipEvents>
                                <ChipItems>
                                    @{
                                        if (FilterListGroups != null)
                                        {
                                            @foreach (var Group in FilterListGroups)
                                            {
                                                if (Group != null && Group.Name != null)
                                                {
                                                    <ChipItem Text="@Group?.Name" LeadingIconCss="anne"></ChipItem>
                                                }

                                            }
                                        }
                                    }
                                </ChipItems>
                            </SfChip>
                            <InputTextSelector @ref="inputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectorInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" Visible="PopupViewGroups">
                                @{
                                    if (ListGroups != null)
                                    {
                                        foreach (var group in ListGroups)
                                        {
                                            <option value="@group?.Id">@group?.Name</option>
                                        }

                                    }
                                }
                            </InputTextSelector>
                        </div>
                    </div>
                  
                </div>
            </div>


        </div>



        @if (EntityNode == null || Id == null)
        {

        }
        else
        {
            <div class="detailsContainer">
                <div class="menuOptions">
                    <nav class="navVerticalOptions">
                        <ul>
                            <li class="@StyleClassItem(0)" @onclick="@(()=>SetMenuOption(0))">Shipping places<span class="arrowhead"></span></li>
                            <li class="@StyleClassItem(1)" @onclick="@(()=>SetMenuOption(1))">Identifications<span class="arrowhead"></span></li>
                            <li class="@StyleClassItem(2)" @onclick="@(()=>SetMenuOption(2))">Electronic addresses<span class="arrowhead"></span></li>
                            <li class="@StyleClassItem(3)" @onclick="@(()=>SetMenuOption(3))">Phones<span class="arrowhead"></span></li>
                            <li class="@StyleClassItem(4)" @onclick="@(()=>SetMenuOption(4))">Shipping setup<span class="arrowhead"></span></li>
                            <li class="@StyleClassItem(5)" @onclick="@(()=>SetMenuOption(5))">Commercial Conditions<span class="arrowhead"></span></li>
                        </ul>
                    </nav>
                </div>
                <div class="workArea">
                    @switch (verticalMenuOptionSelected)
                    {
                        case 0:
                            <EntityShippingPlaces EntityId="@Id" Code="@EntityNode.Code" />
                            break;
                        case 1:
                            <EntityIdentifications EntityId="@Id" />
                            break;
                        case 2:
                            <EntityElectronicAddress EntityId="@Id" />
                            break;
                        case 3:
                            <EntityPhones EntityId="@Id" />
                            break;
                        case 4:
                            <EntityShippingSetUp EntityId="@Id" />
                            break;
                        case 5:
                            <EntityComercialConditions EntityId="@Id" />
                            break;
                        default:
                            <EntityShippingPlaces EntityId="@Id" />
                            break;
                    }

                </div>
            </div>
        }
    </form>
}




@code {
    public EntityActor? currentEntityActor { get; set; }
    EntityActor EntityNode;
    EntityActor actor;
    List<EntityActor> newActor = new List<EntityActor>();
    Address addressNew;
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Page { get; set; } = "0";
    [Parameter]
    public bool ViewSelect { get; set; } = false;

    private bool visible { get; set; } = false;
    private string message { get; set; } = "";

    private string userId { get; set; } = "";
    private string ipAddress { get; set; } = "";

    SfChip? referChip;
    EntityRoleSelector? entityRoleSelector;

    int verticalMenuOptionSelected = 0;

    private InvocingAddressPopUp? invocingAddressPopUp;
    Address InvocingAddress = new Address();
    City city = new City();

    InputTextSelector? inputTextSelector;

    public bool PopupViewGroups = false;
    public bool PopupViewRoles = false;
    public string SearchValueMode = "";
    public int ParamCountResul = 0;

    List<ConceptGroup>? ListGroups = new List<ConceptGroup>();
    List<ConceptGroup>? FilterListGroups = new List<ConceptGroup>();


    //display
    public string lblName = "";
    public string lblEmail = "";
    public string lblSquarUser = "";
    public string lblGroup = "";
    public string lblShortcutCode = "";
    public string lblLegacyId = "";
    public string lblRole = "";
    public string lblInvoicingAddress = "";

    private string imageRute { get; set; } = "";
    private string imageDefault = $"/avatar_male_man_person_user_icon.png";

    EntityRole role = new EntityRole();
    List<EntityRole>? entityRoles;

    string entityRoleSelectedId = "";
    private async Task GetRoles()
    {
        var response = await actorsNodeServive.EntityRolesList();
        if (response != null)
            entityRoles = response;
    }



    public string StyleClassItem(int item)
    {
        return (verticalMenuOptionSelected == item ? "menu-item selected" : "menu-item");
    }

    protected override async Task OnInitializedAsync()
    {
        SetMenuOption(Convert.ToInt32(Page != null ? Page : "0"));
        lblName = UICommonFunctions.GetDisplayName(new EntityActor(), "Name");
        lblEmail = UICommonFunctions.GetDisplayName(new EntityActor(), "EMailAddress");
        lblSquarUser = UICommonFunctions.GetDisplayName(new EntityActor(), "SunttelUserId");
        lblGroup = UICommonFunctions.GetDisplayName(new EntityActor(), "Groups");
        lblShortcutCode = UICommonFunctions.GetDisplayName(new EntityActor(), "Code");
        lblLegacyId = UICommonFunctions.GetDisplayName(new EntityActor(), "LegacyId");
        lblRole = UICommonFunctions.GetDisplayName(new EntityActor(), "DefaultEntityRole");
        lblInvoicingAddress = UICommonFunctions.GetDisplayName(new EntityActor(), "InvoicingAddress");
        if (Id == null)
        {
            actor = await actorsNodeServive.NewEntityActor(EntityNode);
            var address = await actorsNodeServive.NewEntityActorAddress(addressNew);
            if (actor != null)
            {
                EntityNode = actor;
                role = actor.DefaultEntityRole;
                FilterListGroups = actor.Groups;
                EntityNode.InvoicingAddress = address;
            }

            StateHasChanged();
        }
        if (Id != null)
        {
            await ActorEntityNode(Id);
            await GetRoles();
        }
        else
        {
            if (actor == null)
                EntityNode = new EntityActor();
        }


        if (currentEntityActor == null)
        {
            currentEntityActor = new EntityActor();
        }
        else
        {
            EntityNode = currentEntityActor;
            FilterListGroups = EntityNode.Groups;
        }



        await Refresh();
    }

    async Task CreateEntityNodeFace()
    {
        await actorsNodeServive.SaveEntity("",currentEntityActor);
    }

    async Task UpdateEntityNodeFace()
    {
        await actorsNodeServive.UpdateEntityActor(currentEntityActor);
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        FilterListGroups?.RemoveAt(args.Index);
        EntityNode.Groups = FilterListGroups;
        StateHasChanged();
    }

    public void SetMenuOption(int item)
    {
        verticalMenuOptionSelected = item;

    }

    private async Task ActorEntityNode(string entityActorId)
    {
        currentEntityActor = await actorsNodeServive.GetEntityActor(entityActorId);
        if (currentEntityActor != null)
            EntityNode = currentEntityActor;
        role = EntityNode.DefaultEntityRole;
        var rute = actorsNodeServive.Host;
        if (EntityNode.SkinImageName == "" || EntityNode.SkinImageName == null)
        {
            imageRute = imageDefault;
        }
        else
        {
            var pathimages = UIClientGlobalVariables.PathEntityImages;
            string fullPath = Path.Combine(pathimages, EntityNode.SkinImageName.Replace("/", ""));
            imageRute =  fullPath;

        }
        StateHasChanged();
    }


    public void SetViewElement(string Element)
    {
        ViewSelect = false;
        SearchValueMode = Element;
        if (Element == "Group" && !PopupViewGroups) { PopupViewGroups = true; }
        if (Element == "Roles" && !PopupViewRoles) { PopupViewRoles = true; }
        Refresh();
        StateHasChanged();
    }

    protected async void EventSearcherValue(string group)
    {
        if (SearchValueMode == "Group")
        {
            ListGroups = await actorsNodeServive.GetEntityGroups(group);
            ParamCountResul = ListGroups.Count();
        }
        if (SearchValueMode == "Roles")
        {
            entityRoles = await actorsNodeServive.GetListEntityRoles(group);
            ParamCountResul = entityRoles.Count();
        }
        if (ParamCountResul > 0)
        {
            ViewSelect = true;
        }
        else
        {
            ViewSelect = false;
        }
        await Refresh();
    }

    protected async void EventIdSelectorInput(string selectionId)
    {
        if (SearchValueMode == "Group")
        {
            FilterListGroups.Add(ListGroups.Where(c => c.Id == selectionId).FirstOrDefault());
        }
        if (SearchValueMode == "Roles")
        {
            role = entityRoles.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        await Refresh();
    }

    public async void ItemSelected(MenuEventArgs menuEventArgs)
    {
        string title = menuEventArgs != null ? menuEventArgs.Item.Text : "";
        if (title == "Save")
        {
            EntityNode.SkinImageName = EntityNode.SkinImageName == null ? (imageRute != "" ? imageRute : "") : EntityNode.SkinImageName;
            EntityNode.DefaultEntityRole = role;
            EntityNode.Groups = FilterListGroups;
           EntityNode.SkinImageName =  EntityNode.SkinImageName == null ? imageDefault : EntityNode.SkinImageName;
            var result = await actorsNodeServive.SaveEntity(Id, EntityNode);
            if (result.IsSuccess)
            {
                message = "Entity Actor Saved";
                visible = true;
                StateHasChanged();
                if (actor != null)
                {
                    newActor = await actorsNodeServive.GetEntityActorFaceList(actor.Name);
                    navigationManager.NavigateTo($"/Actors/{newActor[0].Id}");
                }
            }

        }
        if (title == "Save as...")
        {
            EntityNode.DefaultEntityRole = role;
            EntityNode.Groups = FilterListGroups;
            EntityNode.Name = "New " + EntityNode.Name;
            EntityNode.Id = null;
            var result = await actorsNodeServive.SaveEntity(null, EntityNode);
            if (result.IsSuccess)
            {
                message = "New Entity Actor Saved As: " + EntityNode.Name;
                visible = true;
                StateHasChanged();
            }

        }
        if (title == "Entities Types")
        {
            jsRuntime.InvokeAsync<object>("window.open", "/TypesEntities", "_blank");
        }
        if (title == "Groups")
        {
            jsRuntime.InvokeAsync<object>("window.open", "/GroupsEntities", "_blank");
        }
        if (title == "Identification Types")
        {
            jsRuntime.InvokeAsync<object>("window.open", "/IdentificationTyes", "_blank");
        }
        if (title == "Roles")
        {
            jsRuntime.InvokeAsync<object>("window.open", "/EntityRoles", "_blank");
        }
        if (title == "Status")
        {
            jsRuntime.InvokeAsync<object>("window.open", "/EntityStatus", "_blank");
        }
        if (title == "Pallet Type")
        {
            jsRuntime.InvokeAsync<object>("window.open", "/EntityPalletType", "_blank");
        }
    }

    public async Task Refresh()
    {
        if (inputTextSelector != null) await inputTextSelector.Refresh();
        StateHasChanged();
    }

    public bool EmptyFolder(string path)
    {
        StateHasChanged();
        return Directory.GetFiles(path).Length == 0;
    }

    public async Task NavigateToInvocingAddress()
    {
        if (Id != null)
        {
            navigationManager.NavigateTo($"/Actors/{Id}/InvocingAddress");
        }
        else
        {
            if (EntityNode != null && Id == null)
            {
                EntityNode.DefaultEntityRole = role;
                EntityNode.Groups = FilterListGroups;
                actorsNodeServive.NewEntityActor(EntityNode);
                navigationManager.NavigateTo("/Actors/NewActor/InvocingAddress");
            }
        }

    }

    public async Task NavigateToTable()
    {
        navigationManager.NavigateTo($"/Actors/");
    }

    public async Task NavigateToImage()
    {
        navigationManager.NavigateTo($"/Actors/{Id}/Image");
    }


}