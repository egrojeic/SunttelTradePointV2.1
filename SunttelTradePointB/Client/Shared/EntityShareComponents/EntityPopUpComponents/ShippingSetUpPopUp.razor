@page "/Actors/{Id}/ShippingInfo"
@page "/Actors/{Id}/ShippingInfo/{shippingId}/Edit"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Navigations

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive
@inject TransactionalItemsService transactionalService


<div class="control-section">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 container">
           
                    <form onsubmit="event.preventDefault();">

                        <div class="form-group py-2">
                            <label class="info-text-size">@lblCarrier*:</label>
                            <div class="col">
                                <InputTextSelector3 Id="Carrier"
                                                    TItem="EntityActor"
                                                    caption="@(entityActorCarrier != null ? entityActorCarrier.Name : "")"
                                                    Items="ListEntityActorCarrier"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade">
                                </InputTextSelector3>
                            </div>
                        </div>

                        <div class="form-group py-2">
                            <label class="info-text-size">@lblDeliveryAddress*:</label>
                            <div class="col">
                                <input type="text" class="form-control" placeholder="Address" @bind-value="@deliver.Name" required />
                            </div>
                        </div>
                        <div class="form-group py-2">
                            <label class="info-text-size">@lblCutOff24Hours*:</label>
                            <div class="col">
                                <input type="number" class="form-control info-text-size" placeholder="Cut of 24 hours" @bind-value="@shippingInfo.CutOff24Hour" required />
                            </div>
                        </div>
                        <div class="form-group py-2">
                            <label class="info-text-size">@lblCutOffMinute*:</label>
                            <div class="col">
                                <input type="number" class="form-control info-text-size" placeholder="Cut of minute" @bind-value="@shippingInfo.CutOffMinute" required />
                            </div>
                        </div>
                        <div class="form-group py-2">
                            <label class="info-text-size">@lblDalayTimeDays*:</label>
                            <div class="col">
                                <input type="number" class="form-control info-text-size" placeholder="Time Days" @bind-value="@shippingInfo.DelayTimeDays" required />
                            </div>
                        </div>


                        <div class="form-group py-2">
                            <label class="info-text-size">@lblPalletTypeShipping*:</label>
                            <div class="col">

                                <InputTextSelector3 TItem="PalletType"
                                                    Id="Pallet"
                                                    caption="@(entityActorPallet != null ? entityActorPallet.Name : "")"
                                                    Items="palletTypeList"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade">

                                </InputTextSelector3>

                            </div>
                        </div>
                        <div class="form-group py-2">
                            <label class="info-text-size">Days*:</label>
                            <div class="col">
                                <SfCheckBox Label="Monday" @bind-Checked="isCheckedMonday"></SfCheckBox>
                                <SfCheckBox Label="Tuesday" @bind-Checked="isCheckedTuesday"></SfCheckBox>
                                <SfCheckBox Label="Wednesday" @bind-Checked="isCheckedWednesday"></SfCheckBox>
                                <SfCheckBox Label="Thursday" @bind-Checked="isCheckedThursday"></SfCheckBox>
                                <SfCheckBox Label="Friday" @bind-Checked="isCheckedFriday"></SfCheckBox>
                                <SfCheckBox Label="Saturday" @bind-Checked="isCheckedSaturday"></SfCheckBox>
                                <SfCheckBox Label="Sunday" @bind-Checked="isCheckedSunday"></SfCheckBox>
                                <SfCheckBox Label="All" @bind-Checked="isCheckedAll" @onchange="(e => HandleCheckBoxClick(isCheckedAll))"></SfCheckBox>
                            </div>
                        </div>

                        <MessageSaveComponent message="Shipping Set Up Saved" isVisible="visible"></MessageSaveComponent>

                        <div class="py-2">
                            <button type="submit" class="size-btn color-btn" style="float:right" @onclick="(() => SaveShoppingSetUp(Id, shippingInfo))"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
                            <button type="button" class="btn" style="float:right" @onclick="GoBack"><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
                        </div>
                    </form>

              
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string shippingId { get; set; }
    [Parameter]
    public bool ViewSelect { get; set; } = false;

    public bool visible = false;

    private bool isCheckedMonday = false;
    private bool isCheckedTuesday = false;
    private bool isCheckedWednesday = false;
    private bool isCheckedThursday = false;
    private bool isCheckedFriday = false;
    private bool isCheckedSaturday = false;
    private bool isCheckedSunday = false;
    private bool isCheckedAll { get; set; } = false;

    //Sender
    EntityActor entityActor = new EntityActor();
    List<EntityActor> ListEntityActor = new List<EntityActor>();
    //Carrier
    EntityActor entityActorCarrier = new EntityActor();
    List<EntityActor> ListEntityActorCarrier = new List<EntityActor>();
    //Pallet
    PalletType entityActorPallet = new PalletType();
    List<PalletType> palletTypeList = new List<PalletType>();
    List<PalletType> palletTypeListTest = new List<PalletType>();

   
    AtomConcept carrier = new AtomConcept();
    Address deliver = new Address();
    PalletType palletType = new PalletType();
    ShippingInfo shippingInfo = new ShippingInfo();
    ShippingInfo getShippingInfo = new ShippingInfo();
    InputTextSelector? refInputTextSelector;

    public string lblSender = "";
    public string lblCarrier = "";
    public string lblDeliveryAddress = "";
    public string lblCutOff24Hours = "";
    public string lblCutOffMinute = "";
    public string lblDalayTimeDays = "";
    public string lblPalletTypeShipping = "";

    public string SearcherValueMode = "";
    public bool PopupViewEntitiesSender = false;
    public bool PopupViewEntitiesCarrier = false;
    public bool PopupViewEntitiesPallet = false;
    public int ParamCountResul = 0;

    protected override async Task OnInitializedAsync()
    {
        lblSender = UICommonFunctions.GetDisplayName(new ShippingInfo(), "Sender");
        lblCarrier = UICommonFunctions.GetDisplayName(new ShippingInfo(), "Carrier");
        lblDeliveryAddress = UICommonFunctions.GetDisplayName(new ShippingInfo(), "DeliveryAddress");
        lblCutOff24Hours = UICommonFunctions.GetDisplayName(new ShippingInfo(), "CutOff24Hour");
        lblCutOffMinute = UICommonFunctions.GetDisplayName(new ShippingInfo(), "CutOffMinute");
        lblDalayTimeDays = UICommonFunctions.GetDisplayName(new ShippingInfo(), "DelayTimeDays");
        lblPalletTypeShipping = UICommonFunctions.GetDisplayName(new ShippingInfo(), "PalletTypeShipping");
        await GetShippingInfoById(shippingId);
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/Actors/{Id}/4");
    }

    public async Task Refresh()
    {
        if (refInputTextSelector != null) await refInputTextSelector.Refresh();
        StateHasChanged();
    }

    public async Task SaveShoppingSetUp(string entityId, ShippingInfo shippingInfo)
    {
        if (entityId != null && shippingInfo != null)
        {
            if (shippingId != null)
                shippingInfo.Id = shippingId;            
            shippingInfo.Carrier = entityActorCarrier;
            shippingInfo.DeliveryAddress = deliver;
            shippingInfo.PalletTypeShipping = entityActorPallet;
            shippingInfo.Monday = isCheckedMonday;
            shippingInfo.Tuesday = isCheckedThursday;
            shippingInfo.Wednesday = isCheckedWednesday;
            shippingInfo.Thursday = isCheckedThursday;
            shippingInfo.Friday = isCheckedFriday;
            shippingInfo.Saturday = isCheckedSaturday;
            shippingInfo.Sunday = isCheckedSunday;
            await actorsNodeServive.SaveShippingSetup(entityId, shippingInfo);
            visible = true;
        }
    }

    private async Task GetShippingInfoById(string shippingId)
    {
        if (shippingId != null)
        {
            getShippingInfo = await actorsNodeServive.GetShippingSetUpById(shippingId);
            if (getShippingInfo != null)
            {
                
                entityActorCarrier.Name = getShippingInfo.Carrier.Name;
                deliver.Name = getShippingInfo.DeliveryAddress.Name;
                shippingInfo.CutOff24Hour = getShippingInfo.CutOff24Hour;
                shippingInfo.CutOffMinute = getShippingInfo.CutOffMinute;
                shippingInfo.DelayTimeDays = getShippingInfo.DelayTimeDays;
                entityActorPallet.Name = getShippingInfo.PalletTypeShipping.Name;
                isCheckedMonday = getShippingInfo.Monday;
                isCheckedTuesday = getShippingInfo.Tuesday;
                isCheckedWednesday = getShippingInfo.Wednesday;
                isCheckedThursday = getShippingInfo.Thursday;
                isCheckedFriday = getShippingInfo.Friday;
                isCheckedSaturday = getShippingInfo.Saturday;
                isCheckedSunday = getShippingInfo.Sunday;
            }
        }
    }

    public void HandleCheckBoxClick(bool value)
    {
        if (value)
        {
            CheckAll(true);
        }
        else
        {
            CheckAll(false);
        }
    }


    private void CheckAll(bool value)
    {
        isCheckedMonday = value;
        isCheckedTuesday = value;
        isCheckedWednesday = value;
        isCheckedThursday = value;
        isCheckedFriday = value;
        isCheckedSaturday = value;
        isCheckedSunday = value;
        StateHasChanged();
    }



    protected async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        SearcherValueMode = arg.IdControl;
        if (SearcherValueMode == "Sender")
        {
            ListEntityActor = await actorsNodeServive.GetEntityActorFaceList(arg.value);
            ParamCountResul = ListEntityActor != null ? ListEntityActor.Count() : 0;
        }
        if (SearcherValueMode == "Carrier")
        {
            ListEntityActorCarrier = await actorsNodeServive.GetEntityActorFaceList(arg.value);
            ParamCountResul = ListEntityActorCarrier != null ? ListEntityActorCarrier.Count() : 0;
        }
        if (SearcherValueMode == "Pallet")
        {
            palletTypeList = await actorsNodeServive.GetPalletTypes();
            if (!arg.value.ToLower().Contains("all") && !arg.value.ToLower().Contains("todo"))
            {
                palletTypeList = palletTypeList.Where(s => s.Name.ToLower().Contains(arg.value.ToLower())).ToList();
            }
            if (palletTypeList != null)
            {
                ParamCountResul = palletTypeList.Count();
            }
        }

        await Refresh();
    }

    public void SelectionMade(EntityActor arg)
    {
        if (SearcherValueMode == "Sender")
        {
            entityActor = arg;
        }
        if (SearcherValueMode == "Carrier")
        {
            entityActorCarrier = arg;
        }

        StateHasChanged();
    }
    public void SelectionMade(PalletType arg)
    {
        if (SearcherValueMode == "Pallet")
        {
            entityActorPallet = arg;
        }
        StateHasChanged();
    }


    private void Reload()
    {
        PopupViewEntitiesSender = false;
        PopupViewEntitiesCarrier = false;
        PopupViewEntitiesPallet = false;
    }

}