@page "/Actors/{Id}/Identification"
@page "/Actors/{Id}/Identification/{identificationId}/Edit"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntitySubComponents
@using Syncfusion.Blazor.Cards

@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive

<div class="control-section">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 container">
            <SfCard>
                <CardHeader Title="Add a new identification" />
                <CardContent>
                    <form onsubmit="event.preventDefault();">
                        <div class="form-group row">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblCode: </label>
                                <div class="col">
                                    <input type="number" class="form-control" @bind-value="identificationEntity.Code" required/>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <div class="form-group row">
                                <label class="control-label col-md-12">@lblEntityIssuer: </label>
                                <div class="col">
                                    <div class="item-edit">
                                        <label>@(identificationType != null ? identificationType.Name : "")</label>
                                        <button type="button" style="float:right" @onclick='()=>SetViewElemnt("Identification")' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
                                    </div>
                                    <InputTextSelector @ref="refInputTextSelector" EventSearcherValue="EventSearcherValue" EventIdSelection="EventIdSelectionInput" ParamCountResul="ParamCountResul" ViewSelect="ViewSelect" ViewControl="PopupViewIdentification">
                                        @{
                                            if (identificationTypesList != null)
                                            {
                                                foreach (var entity in identificationTypesList)
                                                {
                                                    <option value="@entity?.Id">@entity?.Name</option>
                                                }
                                            }

                                        }
                                    </InputTextSelector>
                                </div>
                            </div>
                        </div>

                        <MessageSaveComponent message="Identification Saved" isVisible="visible"></MessageSaveComponent>

                        <div class="py-2">
                            <button type="submit" class="size-btn color-btn" style="float:right" @onclick="(() => SaveIdentification(Id, identificationEntity))"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
                            <button type="button" class="btn" style="float:right" @onclick="GoBack"><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
                        </div>
                    </form>

                </CardContent>
            </SfCard>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string identificationId { get; set; }
    [Parameter]
    public bool ViewSelect { get; set; } = false;

    public bool visible = false;

    public bool PopupViewIdentification = false;
    public string SearchValueMode = "";
    public int ParamCountResul = 0;

    IdentificationEntity identificationEntity = new IdentificationEntity();
    List<IdentificationEntity> identificationEntityList = new List<IdentificationEntity>();
    IdentificationType identificationType = new IdentificationType();
    List<IdentificationType> identificationTypesList = new List<IdentificationType>();
    InputTextSelector? refInputTextSelector;

    public string lblCode = "";
    public string lblEntityIssuer = "Type of identification";

    private string userId = UIClientGlobalVariables.UserId;
    private string ipAddress = UIClientGlobalVariables.PublicIpAddress;

    protected override async Task OnInitializedAsync()
    {
        lblCode = UICommonFunctions.GetDisplayName(new IdentificationEntity(), "Code");
        //lblEntityIssuer = UICommonFunctions.GetDisplayName(new IdentificationType(), "Identification type");
        await GetEntityIdentifierList(Id);
        GetIdentificationsType();
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/Actors/{Id}/1");
    }

    public async void GetIdentificationsType()
    {
        identificationTypesList = await actorsNodeServive.GetIdentificationTypes();
        StateHasChanged();
    }

    private async void SaveIdentification(string entityId, IdentificationEntity identificationEntity)
    {
        if(entityId != null && identificationEntity != null)
        {
            if (identificationId != null)
            {
                identificationEntity.Id = identificationId;
            }
            identificationEntity.EntityTypeId = identificationType;
            await actorsNodeServive.SaveIdentificationCode(userId, ipAddress, entityId, identificationEntity);
            visible = true;
            StateHasChanged();  
        }

    }

    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        SearchValueMode = Element;
        if (Element == "Identification" && !PopupViewIdentification) { PopupViewIdentification = true; }
        StateHasChanged();
    }

    protected async void EventSearcherValue(string value)
    {
        if (SearchValueMode == "Identification")
        {
            identificationTypesList = await actorsNodeServive.GetIdentificationTypes();
            ParamCountResul = identificationTypesList != null ? identificationTypesList.Count() : 0;
        }
        if (ParamCountResul > 0) { ViewSelect = true; } else { ViewSelect = false; }
        await Refresh();
    }

    protected async void EventIdSelectionInput(string selectionId)
    {

        if (SearchValueMode == "Identification")
        {
            identificationType = identificationTypesList.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        PopupViewIdentification = false;
        await Refresh();
    }

    public async Task Refresh()
    {
        if (refInputTextSelector != null) await refInputTextSelector.Refresh();
        StateHasChanged();
    }

    public async Task GetEntityIdentifierList(string entityId)
    {
        if(identificationId != null)
        {
            identificationEntityList = await actorsNodeServive.GetEntityIdentifierList(userId, ipAddress, entityId);
            foreach (var identifierList in identificationEntityList)
            {
                if (identifierList.Id == identificationId)
                {
                    identificationEntity.Code = identifierList.Code;
                    identificationType.Name = identifierList.EntityTypeId.Name;
                }
            }
        }
    }

    public void Reload()
    {
        identificationEntity = new IdentificationEntity();
        identificationType = new IdentificationType();
    }
}
