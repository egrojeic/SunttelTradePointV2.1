@page "/Actors/{Id}/ComercialConditions"
@page "/Actors/{Id}/ComercialConditions/{comercialId}/Edit"
@using Syncfusion.Blazor.Popups
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Services.MasterTablesServices
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntitySubComponents
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Cards

@inject IJSRuntime JSRuntime
@inject ActorsNodeService actorsNodeServive
@inject NavigationManager navigationManager

<div class="control-section">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 container">
           
                    <form onsubmit="event.preventDefault();">
                        <div class="form-group row">
                            <label class="info-text-size">@lblRelatedEntity*:</label>
                            <div class="col">
                                <InputTextSelector3 TItem="EntityActor"                                   
                                                    caption="@(entityActor != null ? entityActor.Name : "")"
                                                    EventSearcherValueAndId="EventSearcherValueAndId"
                                                    EventIdSelectionAndId="SelectionMade"
                                                    Items="ListEntityActor"
                                                    Id="Entity">

                                </InputTextSelector3>

                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <label class="control-label col-md-12 info-text-size">@lblLimitCreditDays*: </label>
                            <div class="col">
                                <input type="number" class="form-control info-text-size" @bind-value="entitiesCommercialRelationShip.LimitCreditDays" required />
                            </div>
                        </div>

                        <div class="form-group row py-2">
                            <label class="control-label col-md-12 info-text-size">@lblLimitCreditAmount*: </label>
                            <div class="col">
                                <input type="number" class="form-control info-text-size" @bind-value="entitiesCommercialRelationShip.LimitCreditAmount" required />
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="control-label col-md-12 info-text-size">@lblRelationType*: </label>
                            <div class="col">
                                <SfDropDownList CssClass="info-text-size" TValue="string" TItem="EntitiyRelationshipType" Placeholder="Select a relation type" AllowFiltering="true" DataSource="@entitiyRelationshipTypeList" @bind-Value="entitiyRelationshipType.Name">
                                    <DropDownListEvents TItem="EntitiyRelationshipType" TValue="string" ValueChange="@ValueChangeRelation"></DropDownListEvents>
                                    <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        </div>

                        <MessageSaveComponent message="Comercial Condition Saved" isVisible="succesful"></MessageSaveComponent>

                        <div class="py-2">
                            <button type="submit" class="size-btn color-btn" style="float:right" @onclick="(() => SaveCommercialCondition(Id, entitiesCommercialRelationShip))"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
                            <button type="button" class="btn" style="float:right" @onclick="GoBack"><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
                        </div>
                    </form>
              
        </div>
    </div>
</div>


@code {
    [Parameter]
    public bool ViewSelect { get; set; } = false;
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string comercialId { get; set; }

    public bool succesful = false;

    public bool PopupViewEntities = false;
    public string SearchValueMode = "";

    public string lblRelatedEntity = "";
    public string lblLimitCreditDays = "";
    public string lblLimitCreditAmount = "";
    public string lblRelationType = "";
    public int ParamCountResul = 0;
    public bool PopupViewEditionBox = false;

    EntitiesCommercialRelationShip entitiesCommercialRelationShip = new EntitiesCommercialRelationShip();
    Concept concept = new Concept();
    ConceptStatus conceptStatus = new ConceptStatus();
    InputTextSelector? refInputTextSelector;
    AtomConcept entityActor = new AtomConcept();
    List<EntityActor> ListEntityActor = new List<EntityActor>();
    List<EntitiesCommercialRelationShip> entitiesCommercialRelationsList = new List<EntitiesCommercialRelationShip>();
    List<EntitiyRelationshipType> entitiyRelationshipTypeList = new List<EntitiyRelationshipType>();
    EntitiyRelationshipType entitiyRelationshipType = new EntitiyRelationshipType();
    EntitiesCommercialRelationShip relations = new EntitiesCommercialRelationShip();

    protected override async Task OnInitializedAsync()
    {
        lblRelatedEntity = UICommonFunctions.GetDisplayName(new EntitiesCommercialRelationShip(), "RelatedEntity");
        lblLimitCreditDays = UICommonFunctions.GetDisplayName(new EntitiesCommercialRelationShip(), "LimitCreditDays");
        lblLimitCreditAmount = UICommonFunctions.GetDisplayName(new EntitiesCommercialRelationShip(), "LimitCreditAmount");
        lblRelationType = UICommonFunctions.GetDisplayName(new EntitiesCommercialRelationShip(), "EntitiyCommercialRelationShipType");
        await GetRelationType();
        await GetCommercialConditions(comercialId);
    }

    public void SetViewElemnt(string Element)
    {
        ViewSelect = false;
        SearchValueMode = Element;
        if (Element == "Entity" && !PopupViewEntities) { PopupViewEntities = true; }
        StateHasChanged();
    }

    protected async void EventSearcherValueAndId((string value, string IdControl) arg)
    {
        if (arg.IdControl == "Entity")
        {          
            ListEntityActor = await actorsNodeServive.GetEntityActorFaceList(arg.value);
            ParamCountResul = ListEntityActor != null ? ListEntityActor.Count() : 0;
        }
        if (ParamCountResul > 0) { ViewSelect = true; } else { ViewSelect = false; }
        await Refresh();
    }

   public void SelectionMade(EntityActor arg)
    {
        entityActor = arg;
        StateHasChanged();
    }

   

    public async Task SaveCommercialCondition(string entityId, EntitiesCommercialRelationShip comercialConditions)
    {
        if (entityId != null && comercialConditions != null)
        {
            if (comercialId != null)
            {
                comercialConditions.Id = comercialId;
            }
            comercialConditions.RelatedEntity = entityActor;
            comercialConditions.EntitiyCommercialRelationShipType = entitiyRelationshipType;
            await actorsNodeServive.SaveCommercialConditions(entityId, comercialConditions);
            succesful = true;
            //RefreshMe();
            StateHasChanged();
        }
    }

    public async Task GetCommercialConditions(string entityId)
    {
        if (comercialId != null)
        {
            relations = await actorsNodeServive.GetCommercialRelationShip(entityId);
            entityActor = relations.RelatedEntity;
            entitiesCommercialRelationShip = relations;
            entitiyRelationshipType = relations.EntitiyCommercialRelationShipType;
        }
    }

    public void RefreshMe()
    {
        entityActor = new EntityActor();
        entitiesCommercialRelationShip = new EntitiesCommercialRelationShip();
    }

    public async Task GetRelationType()
    {
        entitiyRelationshipTypeList = await actorsNodeServive.GetEntityRelationType();
    }

    public async Task Refresh()
    {
        if (refInputTextSelector != null) await refInputTextSelector.Refresh();
        StateHasChanged();
    }

    private void ValueChangeRelation(ChangeEventArgs<string, EntitiyRelationshipType> args)
    {
        entitiyRelationshipType = args.ItemData;
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/Actors/{Id}/5");
    }

}
