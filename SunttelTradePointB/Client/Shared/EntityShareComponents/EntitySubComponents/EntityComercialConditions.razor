@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents

@inject ActorsNodeService actorsNodeServive;
@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Commercial Conditions</h3>
    <span class="btn" title="Add new shipping to address" @onclick="(() => NavigateCommercialConditions())">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
        </svg>
    </span>
</div>


<div class="tableBodyContainer">

    @if (entityCommercialCondition != null)
    {
        <SfGrid DataSource="entityCommercialCondition"
            Height="auto"
            Width="auto"
            TValue="EntitiesCommercialRelationShip"
            AllowFiltering="true"
            AllowTextWrap="false"
            AllowPaging="true"
            AllowResizing="true"
            ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
            <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
            <GridColumns>
                <GridColumn Field="RelatedEntity.Name" HeaderText="Entity" Width="110"></GridColumn>
                <GridColumn Field="@nameof(EntitiesCommercialRelationShip.LimitCreditDays)" HeaderText="Limit Credit Days" Width="110"></GridColumn>
                <GridColumn Field="@nameof(EntitiesCommercialRelationShip.LimitCreditAmount)" HeaderText="Limit Credit Amount" Width="110"></GridColumn>
                <GridColumn Field="EntitiyCommercialRelationShipType.Name" HeaderText="Relation Type" Width="110"></GridColumn>
            </GridColumns>
            <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="EntitiesCommercialRelationShip"></GridEvents>
        </SfGrid>

    }


</div>


@code {
    [Parameter]
    public string? EntityId { get; set; }
    List<EntitiesCommercialRelationShip> entityCommercialCondition = new List<EntitiesCommercialRelationShip>();
    IList<EntitiesCommercialRelationShip> selectedCommercialCondition;

    RadzenDataGrid<EntitiesCommercialRelationShip>? refDataGrid;
    EntitiyRelationshipType entitiyRelationshipType = new EntitiyRelationshipType();
    Concept concept = new Concept();
    ConceptStatus conceptStatus = new ConceptStatus();

    protected override async Task OnInitializedAsync()
    {
        await GetComercialConditions();
    }

    private async Task GetComercialConditions()
    {
        if (EntityId != null)
        {
            var response = await actorsNodeServive.GetCommercialConditions(EntityId);
            if (response != null)
                entityCommercialCondition = response;
            StateHasChanged();
        }
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<EntitiesCommercialRelationShip> args)
    {
        EntitiesCommercialRelationShip _EntitiesCommercialRelationShip = new();
        _EntitiesCommercialRelationShip = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            navigationManager.NavigateTo($"/Actors/{EntityId}/ComercialConditions/{_EntitiesCommercialRelationShip.Id}/Edit");
        }
    }

    private async Task NavigateCommercialConditions()
    {
        navigationManager.NavigateTo($"/Actors/{EntityId}/ComercialConditions");
    }

}
