@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents

@inject ActorsNodeService actorsNodeServive;
@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Commercial Conditions</h3>
    <span class="btn" title="Add new shipping to address" @onclick="(() => NavigateCommercialConditions())">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
        </svg>
    </span>
</div>


<div class="tableBodyContainer">

    @if (entityIdentificationList != null)
    {
        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    PageSize="5"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@entityIdentificationList"
                    TItem="EntitiesCommercialRelationShip"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    @bind-Value=@selectedentityIdentification Class="m-4"
                    CellContextMenu="@ShowContextMenuWithContent"
                    @ref="refDataGrid">

            <Columns>
                <RadzenDataGridColumn TItem="EntitiesCommercialRelationShip" Property="RelatedEntity.Name" Title="Status" Frozen="false" Width="100px" />
                <RadzenDataGridColumn TItem="EntitiesCommercialRelationShip" Property="RelatedEntity.Status.IsEnabledForTransactions" Title="Enable For Transactions" Frozen="false" Width="100px" />
                <RadzenDataGridColumn TItem="EntitiesCommercialRelationShip" Property="RelatedEntity.Status.IsEditable" Title="Editable" Frozen="false" Width="100px" />
                <RadzenDataGridColumn TItem="EntitiesCommercialRelationShip" Property="RelatedEntity.Status.SystemBlocked" Title="System Blocked" Frozen="false" Width="100px" />
                <RadzenDataGridColumn TItem="EntitiesCommercialRelationShip" Property="LimitCreditDays" Title="Limit Credit Days" Frozen="false" Width="100px" />
                <RadzenDataGridColumn TItem="EntitiesCommercialRelationShip" Property="LimitCreditAmount" Title="Limit Credit Amount" Frozen="false" Width="100px" />
                <RadzenDataGridColumn TItem="EntitiesCommercialRelationShip" Property="EntitiyCommercialRelationShipType.Name" Title="Relation Type" Frozen="false" Width="100px" />
              

            </Columns>


        </RadzenDataGrid>
    }


</div>


@code {
    [Parameter]
    public string? EntityId { get; set; }
    List<EntitiesCommercialRelationShip> entityIdentificationList = new List<EntitiesCommercialRelationShip>();
    IList<EntitiesCommercialRelationShip> selectedentityIdentification;
    private CommercialConditionsPopUp? comercialConditionsPopUp;

    RadzenDataGrid<EntitiesCommercialRelationShip>? refDataGrid;
    EntitiyRelationshipType entitiyRelationshipType = new EntitiyRelationshipType();
    Concept concept = new Concept();
    ConceptStatus conceptStatus = new ConceptStatus();

    public void SaveData(EntitiesCommercialRelationShip entitiesCommercialRelationShip)
    {
        //concept = entitiesCommercialRelationShip.RelatedEntity;
        //conceptStatus = entitiesCommercialRelationShip.RelatedEntity.Status;
        entitiyRelationshipType = entitiesCommercialRelationShip.EntitiyCommercialRelationShipType;
        entityIdentificationList.Add(new EntitiesCommercialRelationShip
        {
            LimitCreditAmount = entitiesCommercialRelationShip.LimitCreditAmount,
            LimitCreditDays = entitiesCommercialRelationShip.LimitCreditDays,
            RelatedEntity = concept,
            EntitiyCommercialRelationShipType = entitiyRelationshipType
        });
        refDataGrid.Reload();
    }

    /*protected override async Task OnInitializedAsync()
    {
        await GetEntityAddress();
    }

    private async Task GetEntityAddress()
    {
        if (EntityId != null)
        {
            var response = await actorsNodeServive.GetEntityDetailsOf<IdentificationEntity>(EntityId, EntityDetailsSection.IdentifiersList);
            if (response != null)
                entityIdentificationList = response;
            StateHasChanged();
        }
    }*/


    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<EntitiesCommercialRelationShip> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
            <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
            <RadzenMenuItem Text="Delete" Value=args.Data Icon="delete"></RadzenMenuItem>
            <RadzenMenuItem Text="Show in Map" Value=args.Data Icon="location_on"></RadzenMenuItem>

    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        Address argObj = (Address)args.Value;

        Console.WriteLine($"Menu item with Value={argObj.Name} clicked");
        if (!args.Value.Equals(3) && !args.Value.Equals(4))
        {
            ContextMenuService.Close();
        }
    }

    private async Task NavigateCommercialConditions()
    {
        navigationManager.NavigateTo($"/Actors/{EntityId}/ComercialConditions");
    }

}
