@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents
@using Syncfusion.Blazor.Grids
@inject ActorsNodeService actorsNodeServive;
@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager

<div class="GeneralContainerDetails">

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Shipping Places</h3>
        <a class="btn" title="Add new shipping to address" @onclick="(() => NavigateShippingPlaces())">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
            </svg>
        </a>
</div>



<div class="tableBodyContainer">

    @if (entityAddressList != null)
    {
        <SfGrid 
            DataSource="entityAddressList"
            Height="auto"
            Width="auto"
            TValue="Address"
            AllowFiltering="true"
            AllowTextWrap="false"
            AllowPaging="true"
            AllowResizing="true"    
            ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
            <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
            <GridColumns>
                <GridColumn Field="@nameof(Address.Name)" HeaderText="Name" Width="auto"></GridColumn>
                <GridColumn Field="@nameof(Address.AddressLine1)" HeaderText="Address Line 1" Width="auto"></GridColumn>
                <GridColumn Field="@nameof(Address.AddressLine2)" HeaderText="Address Line 2" Width="auto"></GridColumn>
                <GridColumn Field="@nameof(Address.CityAddress.RegionCity.CountryRegion.Name)" HeaderText="Country" Width="auto"></GridColumn>
                <GridColumn Field="@nameof(Address.CityAddress.RegionCity.Name)" HeaderText="Region/State" Width="auto"></GridColumn>
                <GridColumn Field="@nameof(Address.CityAddress.Name)" HeaderText="City" Width="auto"></GridColumn>
                <GridColumn Field="@nameof(Address.ZipCode)" HeaderText="Zip Code" Width="auto"></GridColumn>
            </GridColumns>
            <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="Address"></GridEvents>
        </SfGrid>

    }

</div>
</div>

@code {
    [Parameter]
    public string? EntityId { get; set; }
    [Parameter]
    public string Code { get; set; }

    List<Address> entityAddressList;
    IList<Address> selectedAddres;
    RadzenDataGrid<Address>? referGrid;
    City city = new City();
    GeoRegion geoRegion = new GeoRegion();

    protected override async Task OnInitializedAsync()
    {
        await GetEntityAddress();
    }

    private async Task GetEntityAddress()
    {
        if (EntityId != null)
        {
            var response = await actorsNodeServive.GetEntityActorAddressList(EntityId);
            if (response != null)
                entityAddressList = response;
            StateHasChanged();
        }
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<Address> args)
    {
        Address _Address = new();
        _Address = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            navigationManager.NavigateTo($"/Actors/{EntityId}/ShippingPlaces/{_Address.Id}/Edit");
        }
    }

    private async Task NavigateShippingPlaces()
    {
        navigationManager.NavigateTo($"/Actors/{EntityId}/{Code}/ShippingPlaces");
    }

}
