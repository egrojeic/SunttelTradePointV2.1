
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common



@using SunttelTradePointB.Client.Shared.ConceptSelectors
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntitySubComponents
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents


@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject GeographicPlacesService geoPlaces
@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive

<div class="control-section">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 container">
            <SfCard style="width:550px">
                <CardHeader Title="New User" />
                <CardContent>

                    <div class="form-group py-2">
                        <label for="name">@lblName</label>
                        <input type="text" class="form-control" id="name" @bind-value="EntityNode.Name" />
                    </div>

                    <div class="form-group py-2">
                        <label for="eMailAddress">@lblEmail</label>
                        <input type="text" class="form-control" id="eMailAddress" @bind-value="EntityNode.EMailAddress" />
                    </div>

                    <div class="form-group py-2">
                        <label for="sunttelUserId">@lblSquarUser</label>
                        <input type="text" class="form-control" id="sunttelUserId" @bind-value="EntityNode.SunttelUserId" />
                    </div>

                    <AddressComponent></AddressComponent>

                    <div class="form-group">
                        <label for="eMailAddress">Password*</label>
                        <input type="password" class="form-control" id="eMailAddress" @bind-value="EntityNode.EMailAddress" />
                    </div>

                    <div class="form-group">
                        <label for="sunttelUserId">Confirm Password*</label>
                        <input type="password" class="form-control" id="sunttelUserId" @bind-value="EntityNode.SunttelUserId" />
                    </div>

                    <button type="submit" class="btn btn-primary py-2">Save</button>

                </CardContent>
            </SfCard>
        </div>
    </div>
</div>



@code {
    public EntityActor? currentEntityActor { get; set; }
    EntityActor EntityNode = new EntityActor();
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Page { get; set; } = "0";
    [Parameter]
    public bool ViewSelect { get; set; } = false;

    private bool visible { get; set; } = false;
    private string message { get; set; } = "";

    private string userId { get; set; } = "";
    private string ipAddress { get; set; } = "";

    SfChip? referChip;
    EntityRoleSelector? entityRoleSelector;

    int verticalMenuOptionSelected = 0;

    private InvocingAddressPopUp? invocingAddressPopUp;
    Address InvocingAddress = new Address();
    City city = new City();

    InputTextSelector? inputTextSelector;

    public bool PopupViewGroups = false;
    public bool PopupViewRoles = false;
    public string SearchValueMode = "";
    public int ParamCountResul = 0;

    List<ConceptGroup>? ListGroups = new List<ConceptGroup>();
    List<ConceptGroup>? FilterListGroups = new List<ConceptGroup>();


    //display
    public string lblName = "";
    public string lblEmail = "";
    public string lblSquarUser = "";
    public string lblGroup = "";
    public string lblShortcutCode = "";
    public string lblLegacyId = "";
    public string lblRole = "";
    public string lblInvoicingAddress = "";

    EntityRole role = new EntityRole();
    List<EntityRole>? entityRoles;

    string entityRoleSelectedId = "";
    private async Task GetRoles()
    {
        var response = await actorsNodeServive.EntityRolesList();
        if (response != null)
            entityRoles = response;
    }



    public string StyleClassItem(int item)
    {
        return (verticalMenuOptionSelected == item ? "menu-item selected" : "menu-item");
    }

    protected override async Task OnInitializedAsync()
    {
        lblName = UICommonFunctions.GetDisplayName(new EntityActor(), "Name");
        lblEmail = UICommonFunctions.GetDisplayName(new EntityActor(), "EMailAddress");
        lblSquarUser = UICommonFunctions.GetDisplayName(new EntityActor(), "SunttelUserId");
        lblGroup = UICommonFunctions.GetDisplayName(new EntityActor(), "Groups");
        lblShortcutCode = UICommonFunctions.GetDisplayName(new EntityActor(), "Code");
        lblLegacyId = UICommonFunctions.GetDisplayName(new EntityActor(), "LegacyId");
        lblRole = UICommonFunctions.GetDisplayName(new EntityActor(), "DefaultEntityRole");
        lblInvoicingAddress = UICommonFunctions.GetDisplayName(new EntityActor(), "InvoicingAddress");

        await GetRoles();
        await Refresh();
    }

    async Task CreateEntityNodeFace()
    {
        await actorsNodeServive.CreateNewEntityActor(currentEntityActor);
    }

    async Task UpdateEntityNodeFace()
    {
        await actorsNodeServive.UpdateEntityActor(currentEntityActor);
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        FilterListGroups?.RemoveAt(args.Index);
        EntityNode.Groups = FilterListGroups;
        StateHasChanged();
    }

    public void SetMenuOption(int item)
    {
        verticalMenuOptionSelected = item;

    }

    private async Task ActorEntityNode(string entityActorId)
    {
        currentEntityActor = await actorsNodeServive.GetEntityActor(entityActorId);
        if (currentEntityActor != null)
            EntityNode = currentEntityActor;
        role = EntityNode.DefaultEntityRole;
        StateHasChanged();
    }


    public void SetViewElement(string Element)
    {
        ViewSelect = false;
        SearchValueMode = Element;
        if (Element == "Group" && !PopupViewGroups) { PopupViewGroups = true; }
        if (Element == "Roles" && !PopupViewRoles) { PopupViewRoles = true; }
        Refresh();
        StateHasChanged();
    }

    protected async void EventSearcherValue(string group)
    {
        if (SearchValueMode == "Group")
        {
            ListGroups = await actorsNodeServive.GetEntityGroups(group);
            ParamCountResul = ListGroups.Count();
        }
        if (SearchValueMode == "Roles")
        {
            entityRoles = await actorsNodeServive.GetListEntityRoles(group);
            ParamCountResul = entityRoles.Count();
        }
        if (ParamCountResul > 0)
        {
            ViewSelect = true;
        }
        else
        {
            ViewSelect = false;
        }
        await Refresh();
    }

    protected async void EventIdSelectorInput(string selectionId)
    {
        if (SearchValueMode == "Group")
        {
            FilterListGroups.Add(ListGroups.Where(c => c.Id == selectionId).FirstOrDefault());
        }
        if (SearchValueMode == "Roles")
        {
            role = entityRoles.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        await Refresh();
    }


    public async Task Refresh()
    {
        if (inputTextSelector != null) await inputTextSelector.Refresh();
        StateHasChanged();
    }

    public bool EmptyFolder(string path)
    {
        StateHasChanged();
        return Directory.GetFiles(path).Length == 0;
    }

    public async Task NavigateToInvocingAddress()
    {
        navigationManager.NavigateTo($"/Actors/{Id}/InvocingAddress");
    }

    public async Task NavigateToTable()
    {
        navigationManager.NavigateTo($"/Actors/");
    }

    public async Task NavigateToImage()
    {
        navigationManager.NavigateTo($"/Actors/{Id}/Image");
    }

}
