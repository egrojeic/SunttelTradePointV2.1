
@using SunttelTradePointB.Client.Models;
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common



@using SunttelTradePointB.Client.Shared.ConceptSelectors
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntitySubComponents
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents


@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject GeographicPlacesService geoPlaces
@inject NavigationManager navigationManager
@inject ActorsNodeService actorsNodeServive

<div class="control-section">
    <div class="row align-items-center">
        <div class="col-md-2">
            <img src="/images/logo.png" id="tradePintLogo" />
        </div>
        <div class="col-md-10">
            <h1>Feel the power of the bull being connected to the squads</h1>
        </div>
        
    </div>
    
    <div id="RegistrationContainer">
        <div id="regiterPrompt">
            <h2>You are one step away from being connected to the world!</h2>
            <p>
                Welcome to our business network platform, where you can connect with like-minded professionals and grow your business to new heights! We're excited to have you join our community and start taking advantage of the many benefits that come with being a part of our network. By registering with us, you'll gain access to a powerful platform that allows you to connect with other professionals in your industry, find new business opportunities, and expand your reach to a wider audience. Our platform is designed to make networking and business growth easy and convenient, with tools and features that help you stay connected and stay on top of your game. Joining our network is easy - simply register with us today and start building connections with other professionals in your industry. Once you're part of our community, you'll have access to a range of resources and opportunities that can help you take your business to the next level. Whether you're looking to grow your network, find new clients or partners, or simply stay up-to-date with the latest industry trends, our business network platform is the perfect place for you. So why wait? Register with us today and start connecting with other professionals who share your passion for success!
            </p>
        
        </div>
        <div id="registerCardContainer">
            <SfCard style="width:550px">
                
                <CardContent>

                    <div class="row rowForm">
                        <div class="form-group col-6">
                            <label for="name">@lblName</label>
                            <input type="text" class="form-control" id="name" @bind-value="EntityNode.Name" />
                        </div>

                        <div class="form-group col-6">
                            <label for="eMailAddress">@lblEmail</label>
                            <input type="text" class="form-control" id="eMailAddress" @bind-value="EntityNode.EMailAddress" />
                        </div>

                    </div>
                    
                    <div class="form-group py-2">
                        <label for="sunttelUserId">@lblSquarUser</label>
                        <input type="text" class="form-control" id="sunttelUserId" @bind-value="EntityNode.SunttelUserId" />
                    </div>

                    <AddressComponent address="EntityNode.InvoicingAddress"></AddressComponent>

                    <div class="row rowForm">
                        <div class="form-group col-6">
                            <label for="password1">Password*</label>
                            <input autocomplete="off" type="password" class="form-control" id="password1" />
                        </div>

                        <div class="form-group col-6">
                            <label for="sunttelUserId">Confirm Password*</label>
                            <input autocomplete="off" type="password" class="form-control" id="sunttelUserId" @bind-value="passwordNewUser" />
                        </div>
                    </div>
                   
                    <hr />

                    <div class="row">
                        <div class="col-3">
                            <button type="submit" class="form-button" @onclick="SaveEntity">Let's do it</button>
                        </div>
                        <div class="col-3">
                            <button class="form-button" @onclick="ReturnToLogin">No ready yet</button>
                        </div>
                       

                    </div>
                   

                </CardContent>
            </SfCard>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public EventCallback<NewUserResponse> EntitySaved { get; set; }


    public EntityActor? currentEntityActor { get; set; }
    EntityActor EntityNode = new EntityActor();
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Page { get; set; } = "0";
    [Parameter]
    public bool ViewSelect { get; set; } = false;

    private bool visible { get; set; } = false;
    private string message { get; set; } = "";

    private string userId { get; set; } = "";
    private string ipAddress { get; set; } = "";

    private string passwordNewUser { get; set; } = "";


    SfChip? referChip;
    EntityRoleSelector? entityRoleSelector;

    int verticalMenuOptionSelected = 0;

    private InvocingAddressPopUp? invocingAddressPopUp;
    Address InvocingAddress = new Address();
    City city = new City();

    InputTextSelector? inputTextSelector;

    public bool PopupViewGroups = false;
    public bool PopupViewRoles = false;
    public string SearchValueMode = "";
    public int ParamCountResul = 0;

    List<ConceptGroup>? ListGroups = new List<ConceptGroup>();
    List<ConceptGroup>? FilterListGroups = new List<ConceptGroup>();


    //display
    public string lblName = "";
    public string lblEmail = "";
    public string lblSquarUser = "";
    public string lblGroup = "";
    public string lblShortcutCode = "";
    public string lblLegacyId = "";
    public string lblRole = "";
    public string lblInvoicingAddress = "";

    EntityRole role = new EntityRole();
    List<EntityRole>? entityRoles;

    string entityRoleSelectedId = "";
    private async Task GetRoles()
    {
        var response = await actorsNodeServive.EntityRolesList();
        if (response != null)
            entityRoles = response;
    }



    public string StyleClassItem(int item)
    {
        return (verticalMenuOptionSelected == item ? "menu-item selected" : "menu-item");
    }

    protected override async Task OnInitializedAsync()
    {
        lblName = UICommonFunctions.GetDisplayName(new EntityActor(), "Name");
        lblEmail = UICommonFunctions.GetDisplayName(new EntityActor(), "EMailAddress");
        lblSquarUser = UICommonFunctions.GetDisplayName(new EntityActor(), "SunttelUserId");
        lblGroup = UICommonFunctions.GetDisplayName(new EntityActor(), "Groups");
        lblShortcutCode = UICommonFunctions.GetDisplayName(new EntityActor(), "Code");
        lblLegacyId = UICommonFunctions.GetDisplayName(new EntityActor(), "LegacyId");
        lblRole = UICommonFunctions.GetDisplayName(new EntityActor(), "DefaultEntityRole");
        lblInvoicingAddress = UICommonFunctions.GetDisplayName(new EntityActor(), "InvoicingAddress");

        await GetRoles();
        await Refresh();
    }



    async Task SaveEntity()
    {
        var response = await actorsNodeServive.SaveEntity("", EntityNode);

        NewUserResponse newUserResponse = new NewUserResponse
        {
                EntityId = response.EntityId,
                UserName = EntityNode.SunttelUserId,
                Password = passwordNewUser
        };
        await EntitySaved.InvokeAsync(newUserResponse);

    }

    async Task CreateEntityNodeFace()
    {
        await actorsNodeServive.CreateNewEntityActor(currentEntityActor);
    }

    async Task UpdateEntityNodeFace()
    {
        await actorsNodeServive.UpdateEntityActor(currentEntityActor);
    }

    private void onDeleted(ChipDeletedEventArgs args)
    {
        FilterListGroups?.RemoveAt(args.Index);
        EntityNode.Groups = FilterListGroups;
        StateHasChanged();
    }

    public void SetMenuOption(int item)
    {
        verticalMenuOptionSelected = item;

    }

    private async Task ActorEntityNode(string entityActorId)
    {
        currentEntityActor = await actorsNodeServive.GetEntityActor(entityActorId);
        if (currentEntityActor != null)
            EntityNode = currentEntityActor;
        role = EntityNode.DefaultEntityRole;
        StateHasChanged();
    }


    public void SetViewElement(string Element)
    {
        ViewSelect = false;
        SearchValueMode = Element;
        if (Element == "Group" && !PopupViewGroups) { PopupViewGroups = true; }
        if (Element == "Roles" && !PopupViewRoles) { PopupViewRoles = true; }
        Refresh();
        StateHasChanged();
    }

    protected async void EventSearcherValue(string group)
    {
        if (SearchValueMode == "Group")
        {
            ListGroups = await actorsNodeServive.GetEntityGroups(group);
            ParamCountResul = ListGroups.Count();
        }
        if (SearchValueMode == "Roles")
        {
            entityRoles = await actorsNodeServive.GetListEntityRoles(group);
            ParamCountResul = entityRoles.Count();
        }
        if (ParamCountResul > 0)
        {
            ViewSelect = true;
        }
        else
        {
            ViewSelect = false;
        }
        await Refresh();
    }

    protected async void EventIdSelectorInput(string selectionId)
    {
        if (SearchValueMode == "Group")
        {
            FilterListGroups.Add(ListGroups.Where(c => c.Id == selectionId).FirstOrDefault());
        }
        if (SearchValueMode == "Roles")
        {
            role = entityRoles.Where(c => c.Id == selectionId).FirstOrDefault();
        }
        await Refresh();
    }


    public async Task Refresh()
    {
        if (inputTextSelector != null) await inputTextSelector.Refresh();
        StateHasChanged();
    }

    public bool EmptyFolder(string path)
    {
        StateHasChanged();
        return Directory.GetFiles(path).Length == 0;
    }

    public async Task NavigateToInvocingAddress()
    {
        navigationManager.NavigateTo($"/Actors/{Id}/InvocingAddress");
    }

    public async Task NavigateToTable()
    {
        navigationManager.NavigateTo($"/Actors/");
    }

    public async Task NavigateToImage()
    {
        navigationManager.NavigateTo($"/Actors/{Id}/Image");
    }


    public async Task ReturnToLogin()
    {
        navigationManager.NavigateTo($"");
    }
}
