@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents

@inject ActorsNodeService actorsNodeServive
@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Phones</h3>
    <span class="btn" title="Add new shipping to address" @onclick="(() => NavigatePhone())">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
        </svg>
    </span>
</div>


<div class="tableBodyContainer">

    @if (entityPhonesList != null)
    {

        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@entityPhonesList"
                    TItem="PhoneNumber"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuWithContent"
                    PageNumbersCount="100"
                    PageSize="50">

            <Columns>
                <RadzenDataGridColumn TItem="PhoneNumber" Property="ZoneCode" Title="@GetName("ZoneCode", new PhoneNumber())" Width="80px" />
                <RadzenDataGridColumn TItem="PhoneNumber" Property="Number" Title="@GetName("Number", new PhoneNumber())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="PhoneNumber" Property="Description" Title="@GetName("Description", new PhoneNumber())" Width="180px" TextAlign="Radzen.TextAlign.Center" />

            </Columns>
        </RadzenDataGrid>

     

    }

</div>


@code {


    [Parameter]
    public string? EntityId { get; set; }
    List<PhoneNumber> entityPhonesList = new List<PhoneNumber>();
    IList<PhoneNumber> selectedPhones;
    private PhonePopUp? phonePopUp;
    RadzenDataGrid<PhoneNumber>? radzenDataGrid;

    protected override async Task OnInitializedAsync()
    {
        await GetEntityPhone();
    }

    private async Task GetEntityPhone()
    {
        if (EntityId != null)
        {
            var response = await actorsNodeServive.GetPhoneNumber(EntityId);
            if (response != null)
                entityPhonesList = response;
            StateHasChanged();
        }
    }



    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<PhoneNumber> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        PhoneNumber argObj = (PhoneNumber)args.Value;
        navigationManager.NavigateTo($"/Actors/{EntityId}/Phones/{argObj.Id}/Edit");
    }

    #endregion Grid


    private async Task NavigatePhone()
    {
        navigationManager.NavigateTo($"/Actors/{EntityId}/Phones");
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
}
