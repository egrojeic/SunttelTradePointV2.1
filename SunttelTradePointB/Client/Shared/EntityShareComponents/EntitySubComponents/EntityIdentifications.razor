@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents

@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager
@inject IEntityNodes actorsNodeServive

<style>
    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        font-size: 12px;
    }

    .rz-datatable-data td, .rz-grid-table td {
        padding: 3px;
    }

        .rz-datatable-data td .rz-cell-data, .rz-grid-table tr:has(:hover) {
            background-color: #1bc7b7;
            box-shadow: 0px 2px 5px;
            font-weight: bold;
        }

    .rz-state-highlight {
        background-color: #1bc7b7;
        font-weight: bold;
    }
</style>

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Identifications</h3>
    <span class="btn" title="Add new shipping to address" @onclick="(() => NavigateIdentification())">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
        </svg>

    </span>

</div>

<div class="tableBodyContainer">

    @if (entityIdentificationList != null)
    {


        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@entityIdentificationList"
                    TItem="IdentificationEntity"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    @bind-Value="selectedentityIdentification"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuWithContent"
                    PageNumbersCount="100"
                    PageSize="50">

            <Columns>
                <RadzenDataGridColumn TItem="IdentificationEntity" Property="Code" Title="@GetName("Code", new IdentificationEntity())" Width="80px" />
                <RadzenDataGridColumn TItem="IdentificationEntity" Property="EntityTypeId.Name" Title="@GetName("EntityTypeId", new TransactionalItemCharacteristicPair())" Width="180px" TextAlign="Radzen.TextAlign.Center" />

            </Columns>
        </RadzenDataGrid>

     


    }

</div>

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string? EntityId { get; set; }
    List<IdentificationEntity> entityIdentificationList;
    IList<IdentificationEntity> selectedentityIdentification;
    RadzenDataGrid<IdentificationEntity>? refGrid;

    private IdentificationPopUp? identificationPopUp;

    IdentificationType identificationType = new IdentificationType();

    private void SaveDataIdentification(IdentificationEntity identificationEntity)
    {
        identificationType = identificationEntity.EntityTypeId;
        entityIdentificationList.Add(new IdentificationEntity
                {
                    Code = identificationEntity.Code,
                    EntityTypeId = identificationType
                });
        refGrid.Reload();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSelectorDetails();
    }

    private async Task GetSelectorDetails()
    {
        if (EntityId != null)
        {
            var response = await actorsNodeServive.GetEntityIdentifierList(EntityId);
            if (response != null)
                entityIdentificationList = response;
            StateHasChanged();
        }
    }



    #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<IdentificationEntity> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        IdentificationEntity argObj = (IdentificationEntity)args.Value;
         navigationManager.NavigateTo($"/Actors/{EntityId}/Identification/{argObj.Id}/Edit");
       
    }

    #endregion Grid

  

    private async Task NavigateIdentification()
    {
        navigationManager.NavigateTo($"/Actors/{EntityId}/Identification");
    }
    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
}