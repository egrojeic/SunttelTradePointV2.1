@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.ConceptSelectors
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents

@inject ActorsNodeService actorsNodeServive
@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager

<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Shipping Setup</h3>
    <span class="btn" @onclick="(() => NavigateToShippingInfo())">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
        </svg>
    </span>
</div>

<div class="tableBodyContainer">
    @if(shippingInfoList != null)
    {
        <SfGrid DataSource="shippingInfoList"
            Height="auto"
            Width="auto"
            TValue="ShippingInfo"
            AllowFiltering="true"
            AllowTextWrap="false"
            AllowPaging="true"
            AllowResizing="true"
            ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Edit", Target = ".e-content", Id = "copywithheader", IconCss="images/TransactionalTypes.png" } })">
            <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
            <GridColumns>
                <GridColumn Field="Sender.Name" HeaderText="Sender" Width="110"></GridColumn>
                <GridColumn Field="Carrier.Name" HeaderText="Phone Number" Width="110"></GridColumn>
                <GridColumn Field="DeliveryAddress.Name" HeaderText="Delivery Address" Width="110"></GridColumn>
                <GridColumn Field="@nameof(ShippingInfo.CutOff24Hour)" HeaderText="Cut Off 24H" Width="110"></GridColumn>
                <GridColumn Field="@nameof(ShippingInfo.CutOffMinute)" HeaderText="Cut Off Minute" Width="110"></GridColumn>
                <GridColumn Field="@nameof(ShippingInfo.DelayTimeDays)" HeaderText="Delay Time Days" Width="110"></GridColumn>
                <GridColumn Field="PalletTypeShipping.Name" HeaderText="Pallet Type Shipping" Width="110"></GridColumn>
                <GridColumn HeaderText="Days" Width="110">
                    <Template>
                        @{
                            var Monday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Monday)).GetValue(context);
                            var Tuesday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Tuesday)).GetValue(context);
                            var Wednesday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Wednesday)).GetValue(context);
                            var Thursday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Thursday)).GetValue(context);
                            var Friday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Friday)).GetValue(context);
                            var Saturday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Saturday)).GetValue(context);
                            var Sunday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Sunday)).GetValue(context);
                            if (Monday)
                            {

                                <span>Monday </span>
                            }
                            if (Tuesday)
                            {
                                <span> Tuesday </span>
                            }
                            if (Wednesday)
                            {
                                <span> Wednesday </span>
                            }
                            if (Thursday)
                            {
                                <span> Thursday </span>
                            }
                            if (Friday)
                            {
                                <span> Friday </span>
                            }
                            if (Saturday)
                            {
                                <span> Saturday </span>
                            }
                            if (Sunday)
                            {
                                <span> Sunday </span>
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
            <GridEvents ContextMenuItemClicked="OnContextMenuClick" TValue="ShippingInfo"></GridEvents>
        </SfGrid>

    }

</div>

@code {
    [Parameter]
    public string? EntityId { get; set; }
    List<ShippingInfo> shippingInfoList = new List<ShippingInfo>();
    IList<ShippingInfo> selectedShippingInfo;
    RadzenDataGrid<ShippingInfo>? radzenDataGrid;

    protected override async Task OnInitializedAsync()
    {
        await GetEntityShippingSetUp();
    }

    public async Task GetEntityShippingSetUp()
    {
        if(EntityId != null)
        {
            var response = await actorsNodeServive.GetShippingInfos(EntityId);
            if (response != null)
                shippingInfoList = response;
            StateHasChanged();
        }
    }

    public void OnContextMenuClick(ContextMenuClickEventArgs<ShippingInfo> args)
    {
        ShippingInfo _ShippingInfo = new();
        _ShippingInfo = args.RowInfo.RowData;

        if (args.Item.Text == "Edit")
        {
            navigationManager.NavigateTo($"/Actors/{EntityId}/ShippingInfo/{_ShippingInfo.Id}/Edit");
        }
    }

    private async Task NavigateToShippingInfo()
    {
        navigationManager.NavigateTo($"/Actors/{EntityId}/ShippingInfo");
    }

}
