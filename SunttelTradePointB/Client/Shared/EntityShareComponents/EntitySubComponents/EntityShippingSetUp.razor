@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.ConceptSelectors
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntityPopUpComponents

@inject ActorsNodeService actorsNodeServive
@inject ContextMenuService ContextMenuService
@inject NavigationManager navigationManager


<div class="detailsTitleContainer">
    <h3 class="subTitleDetailForm">Shipping Setup</h3>
    <span class="btn" @onclick="(() => NavigateToShippingInfo())">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-circle add-btn-style" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
        </svg>
    </span>
</div>

<div class="tableBodyContainer">
    @if(shippingInfoList != null)
    {


        <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="true"
                    FilterMode="FilterMode.Advanced"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true"
                    AllowPaging="true"
                    PagerHorizontalAlign="Radzen.HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@shippingInfoList"
                    TItem="ShippingInfo"
                    ColumnWidth="300px"
                    SelectionMode="DataGridSelectionMode.Single"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    CellContextMenu="@ShowContextMenuWithContent"
                    PageNumbersCount="100"
                    PageSize="50">

            <Columns>
                <RadzenDataGridColumn TItem="ShippingInfo" Property="Sender.Name" Title="@GetName("Sender", new ShippingInfo())" Width="180px" />
                <RadzenDataGridColumn TItem="ShippingInfo" Property="Carrier.Name" Title="@GetName("Carrier", new ShippingInfo())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="ShippingInfo" Property="DeliveryAddress.Name" Title="@GetName("DeliveryAddress", new ShippingInfo())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="ShippingInfo" Property="CutOff24Hour" Title="@GetName("CutOff24Hour", new ShippingInfo())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="ShippingInfo" Property="CutOffMinute" Title="@GetName("CutOffMinute", new ShippingInfo())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="ShippingInfo" Property="DelayTimeDays" Title="@GetName("DelayTimeDays", new ShippingInfo())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="ShippingInfo" Property="PalletTypeShipping.Name" Title="@GetName("PalletTypeShipping", new ShippingInfo())" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                <RadzenDataGridColumn TItem="ShippingInfo"   Title="Days" Width="180px" TextAlign="Radzen.TextAlign.Center" />
                   
             
            </Columns>
        </RadzenDataGrid>
        
         
            @*    <GridColumn HeaderText="Days" Width="110">
                    <Template>
                        @{
                            var Monday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Monday)).GetValue(context);
                            var Tuesday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Tuesday)).GetValue(context);
                            var Wednesday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Wednesday)).GetValue(context);
                            var Thursday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Thursday)).GetValue(context);
                            var Friday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Friday)).GetValue(context);
                            var Saturday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Saturday)).GetValue(context);
                            var Sunday = (bool)context.GetType().GetProperty(nameof(ShippingInfo.Sunday)).GetValue(context);
                            if (Monday)
                            {

                                <span>Monday </span>
                            }
                            if (Tuesday)
                            {
                                <span> Tuesday </span>
                            }
                            if (Wednesday)
                            {
                                <span> Wednesday </span>
                            }
                            if (Thursday)
                            {
                                <span> Thursday </span>
                            }
                            if (Friday)
                            {
                                <span> Friday </span>
                            }
                            if (Saturday)
                            {
                                <span> Saturday </span>
                            }
                            if (Sunday)
                            {
                                <span> Sunday </span>
                            }
                        }
                    </Template>*@
          
    }

</div>

@code {
    [Parameter]
    public string? EntityId { get; set; }
    List<ShippingInfo> shippingInfoList = new List<ShippingInfo>();
    IList<ShippingInfo> selectedShippingInfo;
    RadzenDataGrid<ShippingInfo>? radzenDataGrid;

    protected override async Task OnInitializedAsync()
    {
        await GetEntityShippingSetUp();
    }

    public async Task GetEntityShippingSetUp()
    {
        if(EntityId != null)
        {
            var response = await actorsNodeServive.GetShippingInfos(EntityId);
            if (response != null)
                shippingInfoList = response;
            StateHasChanged();
        }
    }


     #region Grid

    void ShowContextMenuWithContent(DataGridCellMouseEventArgs<ShippingInfo> args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick">
        <RadzenMenuItem Text="Edit" Value=args.Data Icon="edit"></RadzenMenuItem>
    </RadzenMenu>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        ShippingInfo argObj = (ShippingInfo)args.Value;
        navigationManager.NavigateTo($"/Actors/{EntityId}/ShippingInfo/{argObj.Id}/Edit");
    }
    #endregion Grid

    private async Task NavigateToShippingInfo()
    {
        navigationManager.NavigateTo($"/Actors/{EntityId}/ShippingInfo");
    }

    public string GetName(string Name, Object Obj)
    {
        if (UICommonFunctions.GetDisplayName(Obj, Name) != null) Name = UICommonFunctions.GetDisplayName(Obj, Name);
        return Name;
    }
}
