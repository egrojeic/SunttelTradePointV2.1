@page "/IdentificationTyes/NewIdentification"
@page "/IdentificationTyes/{identificationId}/Edit"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using SunttelTradePointB.Shared.Common
@using SunttelTradePointB.Client.Shared.EntityShareComponents.EntitySubComponents
@using Syncfusion.Blazor.Cards

@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject IEntityNodes actorsNodeServive

<div class="control-section">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 container">
            <SfCard>
                <CardHeader Title="Add a new identification" />
                <CardContent>
                    <form onsubmit="event.preventDefault();">
                        <div class="form-group row">
                            <div>
                                <label class="control-label col-md-12">@lblCode: </label>
                                <div class="col">
                                    <input type="number" class="form-control" @bind-value="identificationEntity.Code" required />
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="control-label col-md-12">@lblEntityIssuer: </label>
                            <div class="col">
                                <input type="Text" class="form-control" @bind-value="identificationEntity.Name" required />
                            </div>
                        </div>

                        <MessageSaveComponent message="@message" isVisible="visible"></MessageSaveComponent>
                        <div class="py-2">
                            <button type="submit" class="size-btn color-btn" style="float:right" @onclick="(() => SaveIdentification(identificationId, identificationEntity))"><i class="fa-regular fa-floppy-disk color-hover"></i></button>
                            <button type="button" class="btn" style="float:right" @onclick="GoBack"><i class="fa-sharp fa-solid fa-circle-arrow-left"></i></button>
                        </div>
                    </form>

                </CardContent>
            </SfCard>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public string identificationId { get; set; }
    [Parameter]
    public bool ViewSelect { get; set; } = false;

    public bool PopupViewIdentification = false;
    public string SearchValueMode = "";
    public int ParamCountResul = 0;

    private string message { get; set; } = "";
    private bool visible { get; set; } = false;

    AtomConcept identificationEntity = new AtomConcept();
    IdentificationType identificationType = new IdentificationType();
    List<IdentificationType> identificationTypesList = new List<IdentificationType>();

    AtomConcept identificationTypeAtom = new AtomConcept();

    public string lblCode = "";
    public string lblEntityIssuer = "";

    protected override async Task OnInitializedAsync()
    {
        lblCode = UICommonFunctions.GetDisplayName(new IdentificationEntity(), "Code");
        lblEntityIssuer = UICommonFunctions.GetDisplayName(new IdentificationType(), "EntityIssuer");
        await GetEntityIdentifierType(identificationId);
        GetIdentificationsType();
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/IdentificationTyes/");
    }

    public async void GetIdentificationsType()
    {
        identificationTypesList = await actorsNodeServive.GetIdentificationTypes();
        StateHasChanged();
    }

    private async void SaveIdentification(string entityId, AtomConcept identificationEntitySave)
    {
        if(entityId == null && identificationEntitySave != null)
        {
            identificationEntitySave = identificationEntity;
            await actorsNodeServive.SaveIdentificationType(identificationEntitySave);
            message = "Identification Saved";
            visible = true;
            StateHasChanged();
            Reload();
        }
        else
        {
            identificationEntitySave.Id = entityId;
            await actorsNodeServive.SaveIdentificationType(identificationEntitySave);
            message = "Identification Saved";
            visible = true;
            StateHasChanged();
            Reload();
        }
    }

    public async Task GetEntityIdentifierType(string entityId)
    {
        if (identificationId != null)
        {
            identificationTypeAtom = await actorsNodeServive.GetIdentificationTypeById(entityId);
            identificationEntity = identificationTypeAtom;
        }
    }

    public void Reload()
    {
        identificationEntity = new AtomConcept();
    }
}
