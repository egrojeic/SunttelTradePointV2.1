


<div style="position:relative;">
    <div style="display:@(!captionOff?"flex":"none")" class="item-edit">
        <label>@(caption)</label>
        <button type="button" @onclick='SetViewElemnt' class="btn color-btn"><i class="fa-sharp fa-solid fa-circle-plus"></i></button>
    </div>
    <div class="position-input">
        <div class="component-input" style="@style; display:@(Visible?"block":"none");  position:relative; width:278px;">
            <div style=" flex-direction:row; display:@(!ViewSelect?"flex":"none"); ">
                <input @bind="inputSearcherValue" class="form-control" autocomplete="on" />
                <img id="btn-img" src="images/search.svg" @onclick="SearcherValue" />
            </div>
            <div id="div-Popup">

                <select @onchange="SelectedCarsChanged" style="display:@(ViewSelect?"block":"none");  background-color:white; color:black;  border-color:gray; ">
                    <option value=""> select </option>
                    @if (ChildContent != null)
                    {
                        @ChildContent
                    }
                </select>
                <div>
                    <p style="background-color:@(ParamCountResul>0?"#8affa8":"orange"); display:@(ViewPopupCount?"block":"none");">@(ParamCountResul > 0 ? ParamCountResul : "searching")</p>
                </div>

            </div>
            <input type="button" value="✓" @onclick="SelectedItem" id="Success" />
            <input type="button" value="X" @onclick="Closed" id="Closed" />
        </div>
    </div>
</div>


@code {
    
    [Parameter]
    public EventCallback<(string,string)> EventSearcherValueAndId { get; set; }
    [Parameter]
    public EventCallback<(object, string)> EventSearcherValueAndId2 { get; set; }
    [Parameter]
    public EventCallback<string> EventSearcherValue { get; set; }
    [Parameter]
    public EventCallback<string> EventIdSelection { get; set; }
    [Parameter]
    public EventCallback<(string, string)> EventIdSelectionAndId { get; set; }
    [Parameter]
    public EventCallback EventClosed { get; set; }
    [EditorRequired]
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [EditorRequired]
    [Parameter]
    public int? ParamCountResul { get; set; }  
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public bool ViewSelect { get; set; } = false;
    [Parameter]
    public bool Visible { get; set; } = false; 
    [Parameter]
    public string style { get; set; }   
    [Parameter]
    public string caption { get; set; }
    [Parameter]
    public bool captionOff { get; set; } = false;
    private bool ViewPopupCount = false;
    protected bool statusTask = false;
    public string? inputSearcherValue { get; set; }  
    [Parameter]
    public  string selectionId { get; set; }
    [Parameter]
    public Object selectedObj { get; set; }
    string backgroundSelection = "", colorSelection = "";


    public async void SearcherValue()
    {
        ParamCountResul = 0;
        ViewPopupCount = true;
        SearcherCountOff();
        if (inputSearcherValue != null && inputSearcherValue != "")
        {
            await EventSearcherValueAndId.InvokeAsync((inputSearcherValue, Id));
            await EventSearcherValue.InvokeAsync(inputSearcherValue);
        }        
        else
        {
            await EventSearcherValueAndId.InvokeAsync(("all", Id));
            await EventSearcherValue.InvokeAsync("all");
        }
        backgroundSelection = "white";
        colorSelection = "black";

        StateHasChanged();
    }

    private async void SearcherCountOff()
    {
        if (!statusTask)
        {
            statusTask = true;
            await Task.Delay(10000);
            statusTask = false;
            ViewPopupCount = false;
            StateHasChanged();
        }
    }

    private void SelectedCarsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            //selectionId = e.Value.ToString();
            selectedObj = e.Value;

        }
    }

    private void SelectedItem()
    {
        if (selectionId != "")
        {
            EventIdSelectionAndId.InvokeAsync((Id, selectionId));
            EventIdSelection.InvokeAsync(selectionId);
            EventSearcherValueAndId2.InvokeAsync((selectedObj, selectionId));
            selectionId = "";
            backgroundSelection = "";
            colorSelection = "";
            ViewSelect = false;
            Visible = false;
            StateHasChanged();
        }

    }

    public void SetViewElemnt()
    {
        Visible = true;
    }

    public async Task Refresh()
    {
        StateHasChanged();
    }

    public void Closed()
    {
        Visible = false;
        ViewSelect = false;
        backgroundSelection = "";
        colorSelection = "";
        EventClosed.InvokeAsync();
        Refresh();
    }
}
