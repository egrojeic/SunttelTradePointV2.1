@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms


<div class="controlContainer">
    <label class="col-sm-2 col-form-label text-right lblControl">@(StartDateName != null ? StartDateName : "Start")</label>
    @if (StartDate != DateTime.MinValue)
    {
        <div >
            <input @onchange="SetDateStart" value="@(StartDate.ToString("yyyy-MM-dd"))" type="date" class="form-control" />
    </div>
    }
    @if (EndDate != DateTime.MinValue)
    {
        <label class="col-sm-2 col-form-label text-right lblControl"> @(EndDateName != null ? EndDateName : "Until")</label>
        <div class="col-sm-4">
            <input @onchange="@SetDateEnd" value="@EndDate.ToString("yyyy-MM-dd")" type="date" class="form-control" />
    </div>
    }
    @if (!disableBtn)
    {
        <div>
            <button @onclick="@SearchAll" class="reload-button">
                <img src="/images/findreload.png" />
            </button>
        </div>
    }
</div>

@code {
    [Parameter]
    public DateTime StartDate { get; set; } = DateTime.Now;
    [Parameter]
    public string StartDateName { get; set; }
    [Parameter]
    public DateTime EndDate { get; set; } = DateTime.Now.AddMonths(1);
    [Parameter]
    public string EndDateName { get; set; }
    [Parameter]
    public EventCallback<string> EventSearchAll { get; set; }
    [Parameter]
    public EventCallback<DateTime> EndDateChanged { get; set; }
    [Parameter]
    public EventCallback<DateTime> StartDateChanged { get; set; }

    [Parameter]
    public bool disableBtn { get; set; }

    protected override Task OnInitializedAsync()
    {      
        return base.OnInitializedAsync();
    }


    public void SetDateStart(ChangeEventArgs arg){
        StartDate = DateTime.Parse(arg.Value.ToString());
        StartDateChanged.InvokeAsync(StartDate);
    }
    
    public void SetDateEnd(ChangeEventArgs arg){
        EndDate = DateTime.Parse(arg.Value.ToString());
        EndDateChanged.InvokeAsync(EndDate);
    }

    public void SearchAll(){
        EventSearchAll.InvokeAsync("all");
        StateHasChanged();
    }

}